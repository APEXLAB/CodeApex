[
    {
        "id": 2195,
        "problem_description": "Cantor is a mathematician who proved an important theorem that requires the use of a table:\n\n1/1        1/2        1/3        1/4        1/5        ...\n2/1        2/2        2/3        2/4        2/5        ...\n3/1        3/2        3/3        3/4        3/5        ...\n4/1        4/2        4/3        4/4        4/5        ...\n5/1        5/2        5/3        5/4        5/5        ...\n...        ...        ...        ...        ...        ...\n\nThe pattern of this table is as follows: from top to bottom, the numerator of each row increases sequentially; from left to right, the denominator of each column increases sequentially. Cantor listed all the numbers on the table in a non-repetitive and non-omissive manner. The method is as follows: starting from the top left corner 1/1, scan in a zigzag pattern. The first item is 1/1; the second item is 1/2, the third item is 2/1, the fourth item is 3/1, the fifth item is 2/2, the sixth item is 1/3, and so on: 1/4, 2/3, 3/2, 4/1, 5/1, 4/2, ? Given a fraction a/b, please calculate its rank in the Cantor table.",
        "function_declaration": "int calculate_ans(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint a, b;\n\tcin >> a >> b;\n\t// calling start\n\tint result = calculate_ans(a, b);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"2 4\", \"output\": \"14\"}, {\"input\": \"1 4\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1748,
        "problem_description": "Given an undirected graph with the starting point as 1, please find all possible points that can be reached. Input two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 5*10^5), representing the number of points and edges on the map, respectively. Next m pairs of integers represent the two points connected by each undirected edge. Return the numbers of the points that can be reached in ascending order (except for the starting point 1).",
        "function_declaration": "vector<int> findReachablePoints(int n, int m, vector<pair<int, int>>& edges)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    \n    vector<pair<int, int>> edges;\n    for(int i=0; i<m; i++){\n        int u, v;\n        cin>>u>>v;\n        edges.push_back({u, v});\n    }\n    \n    // calling start\n    vector<int> result = findReachablePoints(n, m, edges);\n    // calling end\n    \n    for(auto point : result){\n        cout<<point<<\" \";\n    }\n}",
        "example": "[{\"input\": \"5 4\\n1 2\\n1 3\\n2 3\\n4 5\", \"output\": \"2 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1789,
        "problem_description": "Output a positive integer with an uncertain number of digits according to the standard three-digit section format. For example, when the user inputs 82668634, the program should output 82,668,634.",
        "function_declaration": "int formatNumber(int n, char a[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    char a[20];\n    cin >> n;\n    //calling start\n    int i = formatNumber(n, a);\n    //calling end\n    do {\n        i--;\n        cout << a[i];\n    } while (i > 0);\n    cout << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"82668634\", \"output\": \"82,668,634\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1739,
        "problem_description": "Given an integer sequence, please select half of the numbers from it so that their sum is maximized but does not exceed 3/4 of the sum of all the numbers. Return an integer representing the sum of the selected numbers according to the conditions of the question.",
        "function_declaration": "int calculateHalfSum(vector<int> nums)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> nums(n);\n    for(int i = 0; i < n; i++){\n        cin>>nums[i];\n    }\n    // calling start\n    int result = calculateHalfSum(nums);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"4\\n1 2 3 4\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1496,
        "problem_description": "Input two large integers a and b, calculate the result of a - b, where the data guarantees 0 < b < a < 10^500.",
        "function_declaration": "string subtract(string a, string b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    string a, b;\n    cin>>a>>b;\n    // calling start\n    string result = subtract(a, b);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"10000 9990\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1588,
        "problem_description": "Given a sequence of length N (N<=1000), remove the number X from the sequence, and output the remaining numbers in the order of input, separated by a space between each integer.",
        "function_declaration": "void printNumsExceptX(int n, int nums[], int x)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, x;\n    int nums[1001];\n    \n    cin >> n;\n    \n    for (int i=0; i<n; i++)\n        cin >> nums[i];\n    \n    cin >> x;\n    \n    // calling start\n    printNumsExceptX(n, nums, x);\n    // calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2 3 2 3\\n2\", \"output\": \"1 3 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1820,
        "problem_description": "Input n (n≤10^6) non-decreasing non-negative integers a_1, a_2, ..., a_n that are not greater than 10^9, and then perform m (m≤10^5) queries. For each query, given an integer q (q≤10^9), output the position (index) of the first element in the sequence that is greater than q. If there is no such position, output -1.",
        "function_declaration": "vector<int> findFirstGreaterPositions(int n, int m, const vector<int>& sequence, const vector<int>& queries)\n",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> sequence(n);\n    for (int i = 0; i < n; i++) {\n        cin >> sequence[i];\n    }\n\n    vector<int> queries(m);\n    for (int i = 0; i < m; i++) {\n        cin >> queries[i];\n    }\n\n    //calling start\n    vector<int> results = findFirstGreaterPositions(n, m, sequence, queries);\n    //calling end\n\n    for (int i = 0; i < m; i++) {\n        cout << results[i] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"11 3\\n1 3 3 3 5 7 9 11 13 15 15\\n1 3 20\", \"output\": \"2 5 -1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1717,
        "problem_description": "Output all non-repetitive permutations of natural numbers from 1 to n, that is, the full permutations of n. It is required that no duplicate numbers are allowed in any generated number sequence. Input n (1<=n<=9). Output all non-repetitive number sequences consisting of 1 to n, with one sequence per line.",
        "function_declaration": "void generateUniquePermutations(int n)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to generate all unique permutations of 1 to n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    //calling start\n    generateUniquePermutations(n);\n    //calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"123\\n132\\n213\\n231\\n312\\n321\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2218,
        "problem_description": "Input a string of characters and determine if it can be a valid representation of a floating-point number. The representation of a floating-point number needs to satisfy the following format: it can have a minus sign (-) or a plus sign (+), or it can have no sign at all, but at most only one sign and it must appear as the first character; it can have a decimal point (.), or it can have no decimal point, but at most only one decimal point; the integer part can be omitted, the decimal part can also be omitted, but both cannot be omitted at the same time.",
        "function_declaration": "bool isValidFloat(const string& s) ",
        "code_context": "#include <iostream>\n#include <string>\nusing namespace std;\n\n//function start\n//function end\n\nint main() {\n    string input;\n    cin >> input;\n    //calling start\n    bool isValid = isValidFloat(input);\n    //calling end\n    if (isValid) {\n        cout << \"Valid\" << endl;\n    } else {\n        cout << \"Invalid\" << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"+3.1415926\", \"output\": \"Valid\"}, {\"input\": \"1.0e10\", \"output\": \"Invalid\"}, {\"input\": \"-25.\", \"output\": \"Valid\"}, {\"input\": \".\", \"output\": \"Invalid\"}, {\"input\": \"-.\", \"output\": \"Invalid\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1682,
        "problem_description": "Enter a natural number and output its reverse number.",
        "function_declaration": "void reverse_number(int n, string &result)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    // calling start\n    string result = \"\";\n    reverse_number(n, result);\n    cout << result;\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"1234\", \"output\": \"4321\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2286,
        "problem_description": "In the financial market, it is often necessary to calculate the maximum drawdown of a stock. The maximum drawdown refers to the maximum loss that an investor may incur when buying on a certain day and selling on a later day, reflecting the worst performance of a stock in history. Given an integer sequence $a_1,a_2,a_3,...,a_n$, where each $a_i$ represents the price of the same stock on a certain day, please calculate the maximum drawdown of this stock. That is, find two indices satisfying $1≤i≤j≤n$, and $a_i-a_j$ is the maximum.",
        "function_declaration": "int maxDrawdown(vector<int>& prices)",
        "code_context": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to calculate the maximum drawdown of a stock\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> prices(n);\n    for (int i = 0; i < n; i++) {\n        cin >> prices[i];\n    }\n\n    // Calculate the maximum drawdown of the stock\n    //calling start\n    int result = maxDrawdown(prices);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n2 3 7 6 1 \", \"output\": \"6\"}, {\"input\": \"5\\n1 2 3 4 5\", \"output\": \"0\"}, {\"input\": \"5\\n1 10 100 10 -100\", \"output\": \"200\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2196,
        "problem_description": "Little Ai wants to use * to print a capital letter K. For example, when n=3, output:\n**   ***\n**  **\n** *\n***\n** *\n**  **\n**   ***\nGiven an integer n representing the size of the letter, please output a K-shaped pattern composed of asterisks. The pattern consists of 2n+1 rows, with the first vertical line occupying two columns. The second stroke will adjust its thickness according to the parameter n. Please refer to the example for details.",
        "function_declaration": "void printPattern(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\t\n    // calling start\n    printPattern(n);\n    // calling end\n}",
        "example": "[{\"input\": \"5\", \"output\": \"**     *****\\n**    ****\\n**   ***\\n**  **\\n** *\\n***\\n** *\\n**  **\\n**   ***\\n**    ****\\n**     *****\"}, {\"input\": \"7\", \"output\": \"**       *******\\n**      ******\\n**     *****\\n**    ****\\n**   ***\\n**  **\\n** *\\n***\\n** *\\n**  **\\n**   ***\\n**    ****\\n**     *****\\n**      ******\\n**       *******\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2163,
        "problem_description": "During the epidemic, masks have become a necessity. Xiaoxiao started wearing masks from a certain Wednesday, and she needs to consume 1 mask every day. On every Monday, the community will give her 7 masks, and on every Tuesday, the school will give her 7 masks. Before the epidemic, Xiaoxiao had 10 masks. Until one day, when the epidemic ended and Xiaoxiao no longer needed to wear masks, she had $n$ masks left. How many days in total did she wear masks?",
        "function_declaration": "int calculateDays(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\t\n\t// calling start\n\tint result = calculateDays(n);\n\t// calling end\n\t\n\tcout << result;\n}",
        "example": "[{\"input\": \"17\", \"output\": \"7\"}, {\"input\": \"23\", \"output\": \"15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2240,
        "problem_description": "Magic squares are a very magical $N\\times N$ matrix: it is composed of numbers $1,2,3,\\cdots \\cdots ,N \\times N$, and the sum of the numbers in each row, each column, and both diagonals is the same. When $N$ is odd, we can construct a magic square using the following method: first, write $1$ in the middle of the first row. Then, fill in each number $K (K=2,3,\\cdots,N \\times N)$ in ascending order according to the following rules: 1. If $(K-1)$ is in the first row but not in the last column, fill $K$ in the last row, one column to the right of the column where $(K-1)$ is located; 2. If $(K-1)$ is in the last column but not in the first row, fill $K$ in the first column, one row above the row where $(K-1)$ is located; 3. If $(K-1)$ is in the last column of the first row, fill $K$ directly below $(K-1)$; 4. If $(K-1)$ is neither in the first row nor in the last column, if the upper right of $(K-1)$ is not filled yet, fill $K$ in the upper right of $(K-1)$, otherwise fill $K$ directly below $(K-1)$. Now, given $N$, please construct an $N \\times N$ magic square according to the above method, and output $N$ lines, each line containing $N$ integers, representing the constructed $N \\times N$ magic square, with a single space between adjacent integers.",
        "function_declaration": "void generateMagicSquare(int N)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int N;\n    cin >> N;\n    //calling start\n    generateMagicSquare(N);\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"8 1 6\\n3 5 7\\n4 9 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1964,
        "problem_description": "Given 4 positive integers a, b, c, d, calculate the value of the expression (a*b*c)%d, where % represents the modulo operation.",
        "function_declaration": "int calculate_remainder(int a, int b, int c, int d)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int a,b,c,d;\n    scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n    // calling start\n    int result = calculate_remainder(a, b, c, d);\n    // calling end\n    printf(\"%d\", result);\n}",
        "example": "[{\"input\": \"2 3 4 5\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2340,
        "problem_description": "When browsing through a dictionary, we often cannot find the word we want to look up at once. At this time, we compare the current word with the word we want to look up. If the alphabetical order of the word we want to look up is after the current word, then we will flip forward. Conversely, we will flip backward. We continue this process until we find the word we want to look up. In fact, for any sorted structure, we can use a similar method to search for elements. For example, for a sorted array, if we want to know the index of a certain element, we can first query the middle element and determine whether to search forward or backward based on it, narrowing down the search range and efficiently finding the element. Now, given a sorted array and an integer, please use the above method and a function to find the index of the integer in the array. The input consists of three lines. The first line contains a positive integer n, indicating the length of the sequence. The second line contains n positive integers, representing a sorted sequence. The third line contains a positive integer q. It is guaranteed that all input integers are not greater than 1000. Output the index of q in the sequence (considering the index of the first element as 1).",
        "function_declaration": "int binarySearch(const vector<int>& sortedArray, int q) ",
        "code_context": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to perform binary search and find the index of q in the array\n// Returns -1 if q is not found in the array\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> sortedArray(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> sortedArray[i];\n    }\n\n    int q;\n    cin >> q;\n\n    //calling start\n    int index = binarySearch(sortedArray, q);\n    //calling end\n\n    cout << index << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n1 14 51 41 91 1810\\n91\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2080,
        "problem_description": "Write a program to deal with the number of the NTH decimal place after the fraction a/b is converted to a decimal.",
        "function_declaration": "int calculateRemainder(int a, int b, int n)",
        "code_context": "#include<iostream>\nusing namespace std;\nint a,b,n;\n\n// function start\n\n// function end\n\nint main()\n{\n    cin >> a >> b >> n;\n    // calling start\n    int result = calculateRemainder(a, b, n);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"1 2 1\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1972,
        "problem_description": "This is a simple question to determine if it is a leap year. (No need to study the Julian calendar) You only need to determine if the given year is a leap year under the Gregorian calendar.",
        "function_declaration": "bool isLeapYear(int n)",
        "code_context": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    bool result = isLeapYear(n);\n    // calling end\n    if (result) cout<<\"yes\" << endl;\n    else cout << \"no\" << endl;\n}",
        "example": "[{\"input\": \"2020\", \"output\": \"yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2139,
        "problem_description": "Given n non-negative integers, output the largest number. Little A thinks this question is too simple, so he decides to increase the difficulty a bit. Little A will perform m modification operations, each time giving two positive integers l and r, indicating that all numbers from the l-th to the r-th position should be increased by one. Finally, you need to output the largest number among the n numbers after Little A completes all the modification operations. There are m+2 lines of input. The first line contains two positive integers n and m. The second line contains n non-negative integers. The next m lines each contain two positive integers l and r ($l \\le r$). For 40% of the data, $n$ and $m$ are both less than or equal to 1000; for 100% of the data, $n$ and $m$ are both less than or equal to 200000, and all input numbers are not greater than 200000. Output a number representing the answer. Output a number representing the answer.",
        "function_declaration": "int findMaxAfterModifications(int n, int m, vector<int>& nums)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to find the maximum number after modifications\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Call the function to find the maximum number after modifications\n    //calling start\n    int result = findMaxAfterModifications(n, m, nums);\n    //calling end\n\n    // Output the result\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"10 3\\n1 8 3 4 8 0 7 1 9 3\\n1 6\\n5 8\\n10 10\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2313,
        "problem_description": "Given $n$ closed intervals on a number line, where the $i$-th closed interval is represented by $[a_i,b_i]$, and their union can be expressed as several disjoint closed intervals, please output these intervals' union in ascending order of the left endpoint.",
        "function_declaration": "pair<int, int> process_intervals(pair<int, int> a[], int n)",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\n//function start\n\n\n//function end\n\nint main()\n{\n    int n;\n    cin >> n;\n    using interval = pair<int, int>;\n    interval a[100000];\n    for (int i = 0; i < n; ++i)\n        cin >> a[i].first >> a[i].second;\n    //calling start\n    process_intervals(a, n);\n    //calling end\n}",
        "example": "[{\"input\": \"3\\n10 12\\n1 3\\n2 5\", \"output\": \"1 5\\n10 12\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2322,
        "problem_description": "Given a sequence $x_1,x_2,...,x_k$ of length $k$ as the initial values, then starting from the $(k+1)$-th term, extend this sequence infinitely. The definition of the extended sequence $x_i$ after extension is as follows: $$x_i=x_{i-1}⊕x_{i-2}⊕...⊕x_{i-k}$$, where ⊕ means performing XOR operation on the binary encodings of two numbers. Given $q$ queries, each query comes with a set of parameters $l$,$r$, please calculate and output the value of $$x_l⊕x_{l+1}⊕...⊕x_r$$.",
        "function_declaration": "int computeXOR(vector<int>& nums, int l, int r)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to compute the XOR of elements in the range [l, r]\n//function start\n\n//function end\n\nint main() {\n    int k;\n    cin >> k;\n\n    vector<int> nums(k);\n    for (int i = 0; i < k; i++) {\n        cin >> nums[i];\n    }\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        int l, r;\n        cin >> l >> r;\n\n        // Calling the function to compute the XOR of elements in the range [l, r]\n        //calling start\n        int result = computeXOR(nums, l - 1, r - 1);\n        //calling end\n\n        cout << result << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\", \"output\": \"3\\n1\\n0\"}, {\"input\": \"5\\n3 3 4 3 2\\n4\\n1 2\\n1 3\\n5 6\\n7 9\", \"output\": \"0\\n4\\n7\\n4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1776,
        "problem_description": "Some people are superstitious about numbers, such as believing that numbers with the digit 4 are unlucky. In a certain lottery event, the ticket numbers are 5-digit numbers (10000-99999). The organizers want you to calculate how many tickets can be issued between numbers n and m without any repeated tickets.",
        "function_declaration": "int countNumbersWithoutFour(int n, int m)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, m = 0;\n    cin >> n >> m;\n    // calling start\n    int result = countNumbersWithoutFour(n, m);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"10000 99999\", \"output\": \"52488\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1841,
        "problem_description": "The first N elements of a set: Write a program to generate the smallest N numbers of set M in ascending order. The definition of M is as follows: Number 1 belongs to M; if X belongs to M, then Y=2x+1 and Z=3x+1 also belong to M; furthermore, no other numbers belong to M.",
        "function_declaration": "set<int> generateSet(int N)",
        "code_context": "#include <iostream>\n#include <set>\n#include <queue>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int N;\n    cin >> N;\n\n    //calling start\n    set<int> M = generateSet(N);\n    //calling end\n\n    for (auto num : M) {\n        cout << num << \" \";\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"10\", \"output\": \"1 3 4 7 9 10 13 15 19 21\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2039,
        "problem_description": "Question: Xiao Wan, Xiao Cheng, and Xiao Wang are playing a game. There is a row of squares on the ground, and they each start on a square. The squares are numbered from left to right as 1, 2, 3, ... They take turns moving in the order of Xiao Wan, Xiao Cheng, Xiao Wang, Xiao Wan, and so on. When it's someone's turn to move, they will run to the square in the middle of the other two people. Because the ground is divided into individual squares, in this rule, \"middle\" refers to the sum of the other two people's square numbers divided by two and rounded down. If two people end up on the same square after a jump, the game is over. Xiao Cheng wants to know how many jumps they need in total. a, b, c represent the numbers of the squares where Xiao Wan, Xiao Cheng, and Xiao Wang are located, respectively.",
        "function_declaration": "int calculateTurns(int a, int b, int c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint a = 0, b = 0, c = 0;\n\tcin >> a >> b >> c;\n\t// calling start\n\tint count = calculateTurns(a, b, c);\n\t// calling end\n\tcout << count << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"1 3 10\\n\", \"output\": \"4\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2244,
        "problem_description": "Enter two integers and output their product.",
        "function_declaration": "long long multiply(long long a, long long b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long a,b;\n    cin>>a>>b;\n    // calling start\n    long long result = multiply(a, b);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"2 3\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1757,
        "problem_description": "We want to use the string \"YES\" to construct a string rectangle. When the input is 1, each row of the constructed string rectangle will have 1 \"YES\"; when the input is 2, each row will have 2 \"YES\" strings, and so on. Your task is to construct a string rectangle of \"YES\" based on the input number, where the number of rows and columns (number of characters) are equal. Input a positive integer N (N <= 20), representing the number of test cases. Following that, there are N integers in an array, each representing M (M <= 50), which indicates the number of consecutive \"YES\" strings in a row. Output the specified string rectangle for each test case.",
        "function_declaration": "void printYesRectangle(int N, int arr[])",
        "code_context": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to print the \"YES\" string rectangle\n//function start\n\n//function end\n\nint main() {\n    int N;\n    cin >> N;\n\n    int arr[N];\n    for (int i = 0; i < N; ++i) {\n        cin >> arr[i];\n    }\n\n    // Calling the function to print the string rectangle\n    //calling start\n    printYesRectangle(N, arr);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"2\\n1\\n2\", \"output\": \"YES\\nYES\\nYES\\nYESYES\\nYESYES\\nYESYES\\nYESYES\\nYESYES\\nYESYES\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1892,
        "problem_description": "Please use a while loop to output \"biu\" 3 times.",
        "function_declaration": "void printBiu(int num)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int num = 3;        \n  // calling start\n  printBiu(num);\n  // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"biu\\nbiu\\nbiu\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2078,
        "problem_description": "Professor Dark heard that you have studied strings and decided to test you with a related question. She is now giving you a string and asks you to output its reverse.",
        "function_declaration": "void reversePrint(char* name, int len)",
        "code_context": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    char name[200 + 1]; // 注意，有一位留给 '\\0'\n    cin >> name;\n    // calling start\n    reversePrint(name);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"Hello!\", \"output\": \"!olleH\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1899,
        "problem_description": "The narcissistic number refers to a 3-digit number, where the sum of the cubes of each digit is equal to the number itself. For example, 153, 1X1X1 + 5X5X5 + 3X3X3 = 1 + 125 + 27 = 153, so 153 is a narcissistic number. Please find all narcissistic numbers between 100 and 999. Approach: Since narcissistic numbers are 3-digit numbers, we know that the range of narcissistic numbers must be between 100 and 999. List all three-digit numbers, for (int i = 100; i <= 999; i++), and then check one by one if i satisfies the condition of the sum of the cubes of each digit being equal to itself. If it meets the condition, print it out. Note: Because each three-digit integer needs to be checked for whether the units, tens, and hundreds digits satisfy the condition, the calculation of the units, tens, and hundreds digits is placed in the loop body. int gw, sw, bw; for (i from 100 to 999) { Calculate the units digit of i; Calculate the tens digit of i; Calculate the hundreds digit of i; if (units digit * units digit * units digit + tens digit * tens digit * tens digit + hundreds digit * hundreds digit * hundreds digit == i) Print i; }",
        "function_declaration": "bool isArmstrong(int i)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    for(int i = 100; i <= 999; i++){\n        if (isArmstrong(i))\n            cout << i << \" \";\n    }\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"153 370 371 407\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2246,
        "problem_description": "Palindrome number refers to an integer that reads the same from left to right and right to left, such as 121 and 9889. If a number is both a palindrome number and a prime number, we call it a palindrome prime number. Given a positive integer n, find the smallest palindrome prime number that is not less than n.",
        "function_declaration": "long long findPalindromePrime(long long n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long n;\n    cin>>n;\n    // calling start\n    long long result = findPalindromePrime(n);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"9\", \"output\": \"11\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2294,
        "problem_description": "Given $n$ integers $a_1, a_2, ..., a_n$, they form a circular ring. Please find a continuous interval on this ring such that the sum of the numbers in this interval is maximized. Return the sum of the maximum subinterval and output the sum of the maximum subinterval. The empty set and the ring itself can both be considered as subintervals of the ring. Since it is a circular ring, $a_n$ and $a_1$ are also considered adjacent.",
        "function_declaration": "long long maxCircularSum(int nums[], int n)",
        "code_context": "#include<iostream>\nusing namespace std;\nint a[100001];\n//function start\n\n\n//function end\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        cin >> a[i];\n    }\n\n    //calling start\n    long long  result = maxCircularSum(a, n);\n    //calling end\n    cout << result << endl;\n\n}",
        "example": "[{\"input\": \"5\\n3 1 -4 1 5 \", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2308,
        "problem_description": "How many tickets do at least $n$ people need to buy when going to a scenic spot? In general, each person needs to buy a ticket. However, if one person's weight is less than or equal to half of another person's weight, these two people can share one ticket. The weights of the $n$ people are known.",
        "function_declaration": "int calculate_ans(int a[], int n)",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    int a[1000000];\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    // calling start\n    int ans = calculate_ans(a, n);\n    // calling end\n    cout << ans;\n}",
        "example": "[{\"input\": \"6\\n2 5 6 7 8 10\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1486,
        "problem_description": "A certain country's law stipulates that as long as a flag composed of N×M small squares meets the following rules, it is a legal flag. (Mao Xiong: Ah-choo -) 1. The top several rows (at least one row) of squares are all white; 2. The next several rows (at least one row) of squares are all blue; 3. The remaining rows (at least one row) are all red. There is a chessboard-like cloth divided into N rows and M columns of squares, each square being either white, blue, or red. Little A hopes to change this cloth into the national flag by painting on some squares, covering the previous colors. Little A is lazy and hopes to paint the minimum number of squares to make this cloth a legal flag. The input is two integers N and M on the first line. The following N lines form a matrix, where each small square in the matrix is one of W (white), B (blue), or R (red). Output an integer representing the minimum number of squares that need to be painted.",
        "function_declaration": "int calculateMinPaint(int N, int M, vector<vector<char>>& matrix)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int N, M;\n    cin>>N>>M;\n    vector<vector<char>> matrix(N, vector<char>(M));\n    for(int i=0; i<N; i++){\n        for(int j=0; j<M; j++){\n            cin>>matrix[i][j];\n        }\n    }\n    // calling start\n    int result = calculateMinPaint(N, M, matrix);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"4 5\\nWRWRW\\nBWRWB\\nWRWRW\\nRWBWR\", \"output\": \"11\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1648,
        "problem_description": "Archaeologists have discovered a thousand-year-old tomb with mysterious characters on the tombstone. After careful study, it was found that these characters are the method to open the entrance to the tomb. There are two strings, a and b, on the tombstone. The length of the first string is even. Now, it is required to insert the second string into the middle of the first string in order to open the tombstone and enter the tomb.",
        "function_declaration": "string mergeString(string a, string b)",
        "code_context": "#include <iostream>\n#include <string>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        string a, b;\n        cin >> a >> b;\n        // calling start\n        string result = mergeString(a, b);\n        // calling end\n        cout << result << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"2\\nCSJI\\nBI\\nAB\\nCMCLU\", \"output\": \"CSBIJI\\nACMCLUB\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1995,
        "problem_description": "It is well known that when an integer is divided by 7, the decimal is either a finite decimal or a recurring decimal. Find the recurring part of n/7.",
        "function_declaration": "int calculateRemainder(int n)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\t\n\t// calling start\n\tint result = calculateRemainder(n);\n\t// calling end\n\t\n\tprintf(\"%d\\n\", result);\n\treturn 0;\n}",
        "example": "[{\"input\": \"1\", \"output\": \"142857\"}, {\"input\": \"7\", \"output\": \"0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1727,
        "problem_description": "Given the molecular formula (without parentheses) of a substance, find the molecular weight. In this question, the molecular formula only contains 4 types of atoms, namely C, H, O, N, with atomic weights of 12.01, 1.008, 16.00, 14.01 (g/mol) respectively. For example, the molecular weight of C6H5OH is 94.108 g/mol.",
        "function_declaration": "double calculateSum(char* s, int len)",
        "code_context": "#include <bits/stdc++.h>\n#define maxn 85\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    char s[maxn];\n    scanf(\"%s\",s);\n    int len = strlen(s);\n    // calling start\n    double sum = calculateSum(s, len);\n    // calling end\n    printf(\"%.3f\",sum);\n    return 0;\n}",
        "example": "[{\"input\": \"C6H5OH\", \"output\": \"94.108\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1770,
        "problem_description": "Given a set of positive integers, please find the Kth largest integer among them.",
        "function_declaration": "void sortAndPrintKth(int a[], int n, int k)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint a[1010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    // calling start\n    sortAndPrintKth(a, n, k);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"5 3\\n1 3 6 5 8\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2300,
        "problem_description": "Given a sequence of $n$ integers $a_1, a_2, ..., a_n$, please find a balance point for this sequence, so that the torque on the left side and the right side of the balance point are as close as possible. If the balance point is $a_k$, the torque on the left side is defined as the sum of the product of the distance from each element with an index smaller than $k$ to $a_k$ and the size of these elements. Similarly, the torque on the right side is defined as the sum of the product of the distance from each element with an index greater than $k$ to $a_k$ and the size of these elements. For example, when $n=6$ and $a_4$ is chosen as the balance point, the formula for calculating the left torque is: $$L=a_1 ×(4-1)+a_2×(4-2)+a_3×(4-3)$$The formula for calculating the right torque is: $$R=a_5×(5-4)+a_6×(6-4)$$Please find the optimal balance point and output the minimum absolute difference between the left and right torques when selecting that point as the balance point.",
        "function_declaration": "int findMinAbsoluteDifference(vector<int>& nums)",
        "code_context": "#include<iostream>\nusing namespace std;\nconst int maxn = 300000;\nint a[maxn];\nlong long L[maxn], R[maxn];\n\n//function start\n\n//function end\n\nint main()\n{\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n        cin >> a[i];\n    //calling start\n    long long result = findMinAbsoluteDiff(n);\n    //calling end\n    cout << result << endl;\n}",
        "example": "[{\"input\": \"4\\n1 2 3 4\", \"output\": \"0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1565,
        "problem_description": "Input a sentence composed of three words, reverse the order of these three words and output them. For example, if the input is \"you love i\", the output should be \"i love you\". The length of each word is not greater than 100 (please implement it using a character array).",
        "function_declaration": "void reversePrint(char words[3][101])",
        "code_context": "# include <iostream>\n# include <cstring>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char words[3][101];\n    for (int i=0; i<3; i++)\n        scanf(\"%s\", words[i]);\n    \n    // calling start\n    reversePrint(words);\n    // calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"you love i\", \"output\": \"i love you\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1746,
        "problem_description": "Given an undirected graph and several queries, each query asks whether there is a direct path between two points without passing through any other points. Input three integers n m q (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 5*10^5, 1 ≤ q ≤ 100), representing the number of points, the number of paths, and the number of queries in the graph, respectively. M pairs of integers represent the two points connected by each path. q pairs of integers represent the two points in each query. Output several lines, each line containing a letter, Y indicating that there is a path that meets the condition, N indicating that there is not.",
        "function_declaration": "void hasDirectPath(int n, int m, int q, vector<pair<int, int>>& paths, vector<pair<int, int>>& queries) ",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, m, q;\n    cin >> n >> m >> q;\n    \n    vector<pair<int, int>> paths(m);\n    for (int i = 0; i < m; i++) {\n        cin >> paths[i].first >> paths[i].second;\n    }\n    \n    vector<pair<int, int>> queries(q);\n    for (int i = 0; i < q; i++) {\n        cin >> queries[i].first >> queries[i].second;\n    }\n    \n    // calling start\n    hasDirectPath(n, m, q, paths, queries);\n    // calling end\n}",
        "example": "[{\"input\": \"4 5 2\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 2\\n3 4\", \"output\": \"Y\\nN\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1949,
        "problem_description": "Enter any integer n between 0 and 99, and output the digits of n separated by spaces.",
        "function_declaration": "void printDigits(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n  \tint n;\n  \tcin >> n;  \n\n    // calling start\n    printDigits(n);\n    // calling end\n\n  \treturn 0;\n}",
        "example": "[{\"input\": \"13\", \"output\": \"1 3\"}, {\"input\": \"8\", \"output\": \"8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2081,
        "problem_description": "The question is asking to use the Euclidean algorithm, also known as the division algorithm, to find the greatest common divisor of two numbers. The basic idea of the Euclidean algorithm is to divide the larger number by the smaller number, then divide the divisor by the remainder (first remainder), and continue this process with each subsequent remainder until the remainder is 0. If we are finding the greatest common divisor of two numbers, then the final divisor is the greatest common divisor of those two numbers. For example, the process of finding the greatest common divisor of 1071 and 462 is as follows: 1071 ÷ 462 = 2...147, 462 ÷ 147 = 3...21, 147 ÷ 21 = 7...0. Therefore, the greatest common divisor of 1071 and 462 is 21. Now, please use the Euclidean algorithm to find the greatest common divisor of two numbers.",
        "function_declaration": "long long calculateGCD(long long a, long long b)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tlong long a, b;\n\tcin >> a >> b;\n\t// calling start\n\tlong long result = calculateGCD(a, b);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"114 514\", \"output\": \"2\"}, {\"input\": \"1919 810\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2070,
        "problem_description": "How many notes in a song are different from the previous note?",
        "function_declaration": "int countDistinct(int n, int arr[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n = 0;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n    // calling start\n    int result = countDistinct(n, arr);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n1 1 2\\n\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2212,
        "problem_description": "On April 11, 2020, the British mathematician John Horton Conway passed away due to COVID-19. He made significant contributions in the fields of group theory, number theory, algebra, geometric topology, theoretical physics, combinatorial game theory, and geometry. His most famous invention is Conway's Game of Life, which defines a cellular automaton. The automaton consists of a grid, where each cell represents a living (black) or dead (white) cell. The life or death of each cell in the next generation depends on the states of its eight neighboring cells according to the following rules: if a living cell has exactly 2 or 3 living neighbors, it will survive to the next generation; if a living cell has fewer than 2 or more than 3 living neighbors, it will die due to loneliness or overcrowding; if a dead cell has exactly 3 living neighbors, it will become alive in the next generation. Using these simple rules, the Game of Life iterates from one generation to the next, exhibiting different evolutionary patterns. The first pattern is a stable state where the cellular automaton remains unchanged. The second pattern is an oscillating state where the cellular automaton alternates between a few different states. The third pattern is an extinction state where the cellular automaton gradually dies out. The cellular automaton can also exhibit other interesting patterns such as reproduction or movement, but these will not be discussed here. Given a cellular automaton of size $n \\times m$, please determine if it is in a stable state. The first line of input consists of two integers $n$ and $m$. The following $n \\times m$ characters represent the state of each cell (alive or dead). The data range is 1 ≤ $n$, $m$ ≤ 100.",
        "function_declaration": "bool checkLife(char a[100][100], int n, int m)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tchar a[100][100];\n\tint n, m;\n\tcin >> n >> m;\n\tfor (int i = 0; i < n; ++i) \n\t  for (int j = 0; j < m; ++j)\n\t     cin >> a[i][j];\n\t// calling start\n\tbool flag = checkLife(a, n, m);\n\t// calling end\n\tif (flag)  \n\t  cout << \"Still life\";\n\telse\n\t  cout << \"Other\";  \n}",
        "example": "[{\"input\": \"4 4\\n....\\n.**.\\n.**.\\n....\", \"output\": \"Still life\"}, {\"input\": \"3 4\\n.**.\\n*..*\\n.**.\", \"output\": \"Still life\"}, {\"input\": \"2 3\\n...\\n.*.\", \"output\": \"Other\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1698,
        "problem_description": "The question in English: \"There are N steps in a staircase. You can either climb one step or two steps at a time. Write a program to calculate the total number of different ways to climb the staircase.\"",
        "function_declaration": "long long fibonacci(int n)",
        "code_context": "#include <bits/stdc++.h>\n#define N 60\nusing namespace std; \nlong long a[N]; \nint n; \n\n// function start\n\n// function end\n\nint main() { \n    cin >> n; \n    if (n == 0) {\n        cout << \"0\";\n        return 0;\n    }\n  \n    // calling start\n    long long result = fibonacci(n);\n    // calling end\n    cout << result;\n    return 0; \n}",
        "example": "[{\"input\": \"4\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1906,
        "problem_description": "First, write a function called rectangleStar that prints a star rectangle with a rows and b columns. Then, by calling the rectangleStar function twice, print a star rectangle with 3 rows and 4 columns, followed by a star rectangle with 2 rows and 5 columns. The expected output is as follows: \n****\n****\n****\n*****\n*****\nWrite a function called rectangleStar that prints a star rectangle with a rows and b columns. The function should have the following specifications: \n(1) void: indicating no return value. \n(2) Function name: rectangleStar, representing \"star rectangle\". \n(3) Parameters: two integer variables, a and b. \n(4) Function body: print a star rectangle with a rows and b columns. Note: if there are multiple parameters, separate them with commas in the parameter declaration.",
        "function_declaration": "void rectangleStar(int a, int b)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main () { \n    //calling start\n    rectangleStar(3, 4);\n    //calling end\n    //calling start\n    rectangleStar(2, 5);\n    //calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"****\\n****\\n****\\n*****\\n*****\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2284,
        "problem_description": "In a two-dimensional coordinate system, there are $n$ stationary balloons suspended. The coordinates of the $i$-th balloon are $(x_i, h_i)$, where $x_i$ represents its horizontal coordinate and $h_i$ represents its height. It is guaranteed that there is at most one balloon at the same coordinate. Xiaoi plans to shoot through all the balloons with the fewest number of arrows. When an arrow is shot, a height needs to be determined. If the arrow does not encounter a balloon, it will continue to move along the positive x-axis at the same height. If the arrow hits a balloon, the balloon will be pierced and the height of the arrow will decrease by 1, then it will continue to move horizontally until it encounters the next balloon. How many arrows does Xiaoi need to shoot at least in order to pierce all the balloons?",
        "function_declaration": "int countArrows(int n, pair<int, int> ball[])",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn = 100000;\npair<int, int> ball[maxn];\nint arrow[maxn * 2 + 1];\n\n//function start\n\n//function end\n\nint main() {\n int n;\n cin >> n;\n for (int i = 0; i < n; ++i) {\n   cin >> ball[i].first >> ball[i].second;\n    }\n    //calling start\n    int result = countArrows(n, ball);\n    //calling end\n    cout << result; \n}",
        "example": "[{\"input\": \"5\\n1 2 \\n3 5 \\n4 4 \\n5 3\\n2 1 \", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1758,
        "problem_description": "English question: Now there are some encrypted English sentences, where each character of every word is reversed. Please restore these words and output the entire sentence.",
        "function_declaration": "void reverseWords(char* a, int len)",
        "code_context": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nchar a[1050];\n\n// function start\n\n// function end\n\nint main(){\n    int N;\n    cin >> N;\n    getchar();\n    while(N--){\n        gets(a);\n        int len = strlen(a);\n        // calling start\n        reverseWords(a, len);\n        // calling end\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"3\\ntahW a !yad\\nevaH a ecin !yad\\nI ekil .gnidoc\", \"output\": \"What a day!\\nHave a nice day!\\nI like coding.\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2298,
        "problem_description": "If all the prime factors of a positive integer do not exceed 5, it is called a \"Regular Number\". For example, 60 is a regular number because $60=2^2*3*5$, and 1000 is also a regular number because $1000=2^3 *5^3$. The first fifteen regular numbers are: $$1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24$$. Given an $n$, please output the $n$th regular number.",
        "function_declaration": "long long findNthRegularNumber(int n) ",
        "code_context": "#include <iostream>\n\nusing namespace std;\n\n// Function to find the nth regular number\n//function start\n\n\n//function end\n\n#include<iostream>\nusing namespace std;\nlong long q[2000];\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    long long result = findNthRegularNumber(n);\n    //calling end\n    cout << result << endl;\n    \n}",
        "example": "[{\"input\": \"15\", \"output\": \"24\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2167,
        "problem_description": "English translation: \nXiao Ai went to get vaccinated. After receiving the first dose, the doctor told her to come back for the second dose after 14 days. Given the date of receiving the first dose (in the format of y-m-d, where $y$ represents the year, $m$ represents the month, and $d$ represents the day), please output the date for receiving the second dose in the format of y-m-d.",
        "function_declaration": "string calculateDate(int y, int m, int d)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint y, m, d;\n\tchar c;\n\tcin >> y >> c >> m >> c >> d;\n\t// calling start\n\tstring result = calculateDate(y, m, d);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"2021-3-12\", \"output\": \"2021-3-26\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1646,
        "problem_description": "Old Feilin runs a company, and each employee in the company has a unique ID number. Some employees are currently on a mission and not in the company headquarters. Now, Old Feilin wants to check whether some employees are currently in the company headquarters, but there are too many employees for Old Feilin to remember. Please design a program to help her with the query. To ensure the accuracy of the query, the technical department's Hillcolu tells you that the employee numbers Old Feilin wants to inquire about will not be duplicated in the residue system modulo the large prime number 19260817. Input two integers n and m, representing the number of employees currently in the company and the number of queries Old Feilin wants to make. Input n (1 ≤ n ≤ 10^5) integers, representing the ID numbers of the employees currently in the company. Input m (1 ≤ m ≤ 10^5) integers, representing the ID numbers of the employees Old Feilin wants to query. Note: The ID numbers of the employees may exceed the storage range of int. Return m integers, corresponding to the query results. If the employee is in the headquarters, output \"yes\"; otherwise, output \"no\".",
        "function_declaration": "void checkEmployeeLocation(int m)",
        "code_context": "#include <iostream>\n\n#define mo 19260817\n\nusing namespace std;\n\nlong long vis[mo];\n//function start\n\n\n//function end\nint main() {\n    int n, m;\n    long long t;\n    cin >> n >> m;\n    while (n--) {\n        cin >> t;\n        vis[t % mo] = t;\n    }\n    //calling start\n    checkEmployeeLocation(m);\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3 2\\n1 2 3\\n1 10\", \"output\": \"yes\\nno\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1947,
        "problem_description": "Given the coordinates of the two endpoints of a line segment A(X1,Y1), B(X2,Y2), find the length of line segment AB.",
        "function_declaration": "float calculate_distance(float x1, float y1, float x2, float y2)",
        "code_context": "#include<cstdio>\n#include<cmath>\n\n// function start\n\n// function end\n\nint main(){\n    float x1,y1,x2,y2;\n    scanf(\"%f%f%f%f\",&x1,&y1,&x2,&y2);\n    // calling start\n    float result = calculate_distance(x1, y1, x2, y2);\n    // calling end\n    printf(\"%.3f\", result);\n}",
        "example": "[{\"input\": \"1 1\\n2 2\", \"output\": \"1.414\"}, {\"input\": \"3 4\\n0 0\", \"output\": \"5.000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2204,
        "problem_description": "Given a positive integer $n$, if the sum of its digits in decimal representation is less than $10$, then this sum is the digital root of $n$. Otherwise, continue to find the sum of the digits of this sum in decimal representation until the result is less than $10$, and define the final result as the digital root of $n$. For example, the digital root of $999$ is $9$, because $9+9+9=27$, and further decomposition gives $2+7=9$. Given $n$, please output its digital root. Note that some $n$ may be very large.",
        "function_declaration": "int calculateRoot(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\n    long long n,root;\n    cin>>n;\n    // calling start\n    root = calculateRoot(n);\n    // calling end\n    cout <<root<< \"\\n\";\n}",
        "example": "[{\"input\": \"99999999999\", \"output\": \"9\"}, {\"input\": \"314159265358979323846264338328\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1794,
        "problem_description": "Write a function to convert a string to an integer value. Its prototype is: int myatoi(char *string); where the parameter string is the string to be converted (including positive and negative signs and numbers), and the return value is the conversion result.",
        "function_declaration": "int myatoi(char *string)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char str[50];\n    // calling start\n    cin >> str;\n    cout << myatoi(str) << endl;\n    // calling end\n    system(\"pause\");\n    return 0;\n}",
        "example": "[{\"input\": \"-123\", \"output\": \"-123\"}, {\"input\": \"+123\", \"output\": \"123\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1691,
        "problem_description": "In a cave, there are some different herbs. It takes some time to collect each herb, and each herb has its own value. Xiao needs to collect herbs with the highest possible total value within a limited time T. Each herb can only be collected once. Please help her calculate the maximum total value that can be collected within the time limit. Two integers T and N are given, representing the time limit and the number of herbs, respectively, where 1 ≤ T ≤ 1000 and 1 ≤ N ≤ 100. The next N lines each contain two integers vi and wi, representing the time required for the herb and its value, respectively, where 1 ≤ vi wi ≤ 100.",
        "function_declaration": "int calculateMaxValue(int n, int t, int v[], int w[])",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint f[1010];\n\n// function start\n\n// function end\n\nint main(){\n    int n, t;\n    cin >> n >> t;\n    int v[t+1], w[t+1];\n    for (int k = 1; k <= t; k++) {\n        cin >> v[k] >> w[k];\n    }\n    // calling start\n    int result = calculateMaxValue(n, t, v, w);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"70 3\\n71 100\\n68 1\\n1 2\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1778,
        "problem_description": "Given a numerical triangle, please find a path from the top to the bottom that maximizes the sum of the numbers along the path. Each move can only be made to the directly below number or the number diagonally below to the right. Only the maximum sum needs to be calculated in the end.",
        "function_declaration": "int calculateMaxSum(int n, int a[110][110])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint n, ans, a[110][110];\n\n// function start\n\n// function end\n\nint main(){\n    cin >> n;\n    for (int i = 1; i <= n; i++) \n        for (int j = 1; j <= i; j++)\n            cin >> a[i][j];\n    // calling start\n    ans = calculateMaxSum(n, a);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n7\\n3 8\\n8 1 0\\n2 7 4 4\\n4 5 2 6 5\", \"output\": \"30\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2197,
        "problem_description": "Given a date in the format of year-month-day, calculate which day of the year it is. Note that February in a leap year has 29 days.",
        "function_declaration": "int calculateDayOfYear(int year, int month, int day)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n\tint year, month, day;\n\tchar c;\n\tcin >> year >> c >> month >> c >> day;\n\n\t// calling start\n\tint result = calculateDayOfYear(year, month, day);\n\t// calling end\n\n\tcout << result; \n}",
        "example": "[{\"input\": \"2021-12-31\", \"output\": \"365\"}, {\"input\": \"2022-01-01\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1917,
        "problem_description": "There are many synthetic games that have the following gameplay: players will receive many numbers, each of which is a power of 2. Players can choose two numbers of the same size and combine them into a new number, which is twice the size of the original number. If this synthesis operation can be performed continuously, given the set of numbers that Xiaoi initially obtained, please help her calculate the maximum number she can obtain. A power of 2 refers to a positive integer that only has 2 as a prime factor, such as 4, 256, and so on. However, 60 is not a power of 2 because it has a prime factor of 3. For 30% of the data, 1 ≤ n ≤ 100, 1 ≤ ai ≤ 128; ? For 60% of the data, 1 ≤ n ≤ 2000, 1 ≤ ai ≤ 2^20; ? For 100% of the data, 1 ≤ n ≤ 1,000,000, 1 ≤ ai ≤ 2^40;",
        "function_declaration": "int calculate_ans(int n, int a[])",
        "code_context": "#include <cstdio>\n#include <iostream>\nusing namespace std;\n\nint n, ans, a[100];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> n;\n    // calling start\n    ans = calculate_ans(n, a);\n    // calling end\n    cout << (1LL << ans) << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n4 1 2 1 1\", \"output\": \"8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1618,
        "problem_description": "A grayscale image with dimensions of $n$ pixels by $m$ pixels can be represented as an $n\\times m$ matrix A. Each element $A_{ij}$ ($0\\leq i<n, 0\\leq j<m$) is an integer in the range $[0,L)$, representing the grayscale value of the corresponding pixel at that position. Specifically, in an 8-bit grayscale image, the grayscale range for each pixel is $[0,128)$. The grayscale histogram of a grayscale image can be represented as an array $h$ of length $L$, where $h[x]$ ($0\\leq x<L$) represents the number of pixels in the image with grayscale value $x$. Obviously, the sum of $h[0]$ to $h[L-1]$ should be equal to the total number of pixels in the image, $n*m$. Given the grayscale matrix $A$ of an image, calculate its grayscale histogram $h[0],h[1],...,h[L-1]$. The input consists of $n+1$ lines. The first line of the input contains three positive integers $n$, $m$, and $L$, separated by spaces, as described above. The second to the $(n+1)$th lines input the matrix $A$. The $(i+2)$th line ($0\\leq i<n$) contains $m$ integers separated by spaces, representing $A_{i0},A_{i1},...,A_{i(m-1)}$. All test data satisfies $0<n,m\\leq 500$ and $4\\leq L\\leq 256$. The output is a single line containing $L$ integers $h[0],h[1],...,h[L-1]$, separated by spaces, representing the grayscale histogram of the input image.",
        "function_declaration": "vector<int> calculateHistogram(int n, int m, int L, vector<vector<int>>& A)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n, m, L;\n    cin>>n>>m>>L;\n    vector<vector<int>> A(n, vector<int>(m));\n    for(int i=0; i<n; i++){\n        for(int j=0; j<m; j++){\n            cin>>A[i][j];\n        }\n    }\n    // calling start\n    vector<int> result = calculateHistogram(n, m, L, A);\n    // calling end\n    for(int i=0; i<L; i++){\n        cout<<result[i]<<\" \";\n    }\n}",
        "example": "[{\"input\": \"4 4 16\\n0 1 2 3\\n4 5 6 7\\n8 9 10 11\\n12 13 14 15\", \"output\": \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"}, {\"input\": \"7 11 8\\n0 7 0 0 0 7 0 0 7 7 0\\n7 0 7 0 7 0 7 0 7 0 7\\n7 0 0 0 7 0 0 0 7 0 7\\n7 0 0 0 0 7 0 0 7 7 0\\n7 0 0 0 0 0 7 0 7 0 0\\n7 0 7 0 7 0 7 0 7 0 0\\n0 7 0 0 0 7 0 0 7 0 0\", \"output\": \"48 0 0 0 0 0 0 29\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2072,
        "problem_description": "Prime numbers, or prime numbers, refer to numbers that cannot be divided by any natural number smaller than themselves except for 1 and the number itself. For example, 7 cannot be divided by 2, 3, 4, 5, or 6, so it is a prime number. However, 15 can be divided by 5, so it is not a prime number. Now, given a positive integer, determine if it is a prime number.",
        "function_declaration": "bool isPrime(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int n;\n    cin >> n;\n    // calling start\n    bool flag = isPrime(n);\n    // calling end\n   if(flag == true) cout << \"Yes\";\n    else cout << \"No\";\n    return 0;\n}",
        "example": "[{\"input\": \"37\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2025,
        "problem_description": "DarkSharpless often encounters problems that require inputting parameters. These types of problems will read in a different number of parameters based on the operation type. Now please help him process the input parameters. The input will first be a number op, representing the operation type. If op = 1, there will be one parameter x. If op = 2, there will be two parameters x and y. If op = 1, please output \"The parameter for operation 1 is \" followed by x (without quotes). If op = 2, please output \"The parameters for operation 2 are \" followed by x and y (separated by a space, without quotes).",
        "function_declaration": "void operation(int op, int x, int y)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n = 0, op = 0;\n    cin >> n;\n    while (n--) {\n        int x = 0, y = 0;\n        cin >> op;\n        // calling start\n        if (op == 1) {\n            cin >> x ;\n            operation(op, x, 0);\n        }\n        else {\n            cin >> x >> y;\n            operation(op, x, y);\n        }\n        // calling end\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"2\\n1 1\\n2 3 3\", \"output\": \"The parameter for operation 1 is 1\\nThe parameters for operation 2 are 3 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1721,
        "problem_description": "Are two strings, both composed of uppercase and lowercase letters and spaces, equal when ignoring case and spaces?",
        "function_declaration": "bool isAnagram(char* s1, char* s2)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=256;\nchar s1[N],s2[N],a[N],b[N];\nint l1,l2;\n\n//function start\n\n//function end\n\nint main(){\n    gets(s1); \n    gets(s2);\n    //calling start\n    if(isAnagram(s1, s2))\n        printf(\"YES\\n\");\n    else\n        printf(\"NO\\n\"); \n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"a A bb BB ccc CCC  \\nAa BBbb CCCccc\", \"output\": \"YES\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1705,
        "problem_description": "How many heads are there when counting from the top, and how many feet are there when counting from the bottom, in a cage with n chickens and m rabbits?",
        "function_declaration": "pair<int, int> calculate(int n, int m)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    // calling start\n    pair<int, int> result = calculate(n, m);\n    // calling end\n    cout << result.first << \" \" << result.second << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"2 3\", \"output\": \"5 16\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2156,
        "problem_description": "There is a mathematical puzzle that goes like this: Given $1234=1$, $5678=3$, $6089=5$, what is $2571$? The trick to solving this problem is to treat each digit as a shape, where the number of enclosed holes is the answer. Given a four-digit number, please output the number of holes it has. Hint: 1, 2, 3, 5, and 7 have no holes, 0, 4, 6, and 9 have one hole, and 8 has two holes.",
        "function_declaration": "int countHoles(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n\tint n;\n\tcin >> n;\n    // calling start\n    int result = countHoles(n);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"1234\", \"output\": \"1\"}, {\"input\": \"5678\", \"output\": \"3\"}, {\"input\": \"1023\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2209,
        "problem_description": "Given two strings $s$ and $p$, please determine whether $p$ is a repeating pattern of $s$. A repeating pattern means that when $p$ is repeated multiple times and concatenated together, it exactly equals $s$.",
        "function_declaration": "bool isSubsequence(string s, string p)",
        "code_context": "#include<iostream>\n#include<string>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  string s, p;\n  cin >> s >> p;\n  \n  // calling start\n  bool result = isSubsequence(s, p);\n  // calling end\n  \n  if(result)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n}",
        "example": "[{\"input\": \"xyxy\\nxy\", \"output\": \"Yes\"}, {\"input\": \"abbba\\nabbba\", \"output\": \"Yes\"}, {\"input\": \"ccccc\\ncc\", \"output\": \"No\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1649,
        "problem_description": "Given a graph with n (2 <= n <= 1000) vertices and m (1 <= m <= 10^6) edges, where vertices are numbered from 1 to n. Each edge connects two vertices, and the graph's connectivity information is represented in the 'nxt' array. For example, nxt[1][2] = true indicates that there is an edge between vertex 1 and vertex 2. Your task is to list the vertices that are directly connected to each vertex. Output n lines, each containing several integers. The i-th line should list the vertices directly connected to vertex i. If there are multiple such vertices, they should be listed in ascending order and exclude vertex i itself. If there are no vertices directly connected to vertex i, then output \"none\" on that line.",
        "function_declaration": "void printConnections(bool *nxt,int n)",
        "code_context": "#include <iostream>\n\n#define N 1010\n\nusing namespace std; \n\nbool nxt[N][N];\n\n// function start\n\n// function end\n\nint main() {\n    int n, m, a, b;\n    cin >> n >> m;\n    while (m--) {\n        cin >> a >> b;\n        nxt[a][b] = true;\n        nxt[b][a] = true;\n    }\n    // calling start\n    printConnections(nxt,n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"5 5\\n1 2\\n2 3\\n1 3\\n2 1\\n1 4\", \"output\": \"2 3 4\\n1 3\\n1 2\\n1\\nnone\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1780,
        "problem_description": "Please use a string to read in two integer strings and return these two integers and their digits.",
        "function_declaration": "int calculate_length(char* str)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\nchar a[1010], b[1010];\n\n//function start\n\n//function end\n\nint main() {\n    int a_len, b_len;\n    memset(a, 0, sizeof(a)); \n    memset(b, 0, sizeof(b));\n    \n    scanf(\"%s\", a);\n    scanf(\"%s\", b);\n    //calling start\n    a_len = calculate_length(a); //求出第一个字符串的长度\n    b_len = calculate_length(b); //求出第二个字符串的长度\n    //calling end\n   \n    printf(\"%s\\n\", a);\n    printf(\"%s\\n\", b);\n    printf(\"%d\\n\", a_len);\n    printf(\"%d\\n\", b_len);\n    return 0;\n}",
        "example": "[{\"input\": \"123456789123456789\\n9876543219876543210\", \"output\": \"123456789123456789 \\n9876543219876543210\\n18 \\n19\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1826,
        "problem_description": "Minesweeper is a built-in game in Windows. The goal of the game is to quickly find all the mines in the minefield without stepping on them. If there is a mine on a square, the game is lost. If a number appears on a square, it indicates how many mines are in the eight squares around it. Your task is to obtain the data in each square given the known locations of the mines. Each set of data has two numbers on the first line, m, n (0 < m, n < 100), indicating that the range of the minefield in the game is m×n. The next m lines each have n characters. * represents a mine, and . represents no mine. For each set of input data, output the result without leaving spaces between the numbers in each square. The mine locations are represented by *.",
        "function_declaration": "void printMinefieldData(int m, int n, const vector<vector<char>>& minefield)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int m, n;\n    while (cin >> m >> n && m != 0 && n != 0) {\n        vector<vector<char>> minefield(m, vector<char>(n));\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                cin >> minefield[i][j];\n            }\n        }\n\n        //calling start\n        printMinefieldData(m, n, minefield);\n        //calling end\n\n        cout << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"2 3 \\n***\\n...\\n4 4\\n*...\\n....\\n.*..\\n....\\n0 0\", \"output\": \"***\\n232\\n\\n*100\\n2210\\n1*10\\n1110\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2188,
        "problem_description": "Little A and Little B are bragging about having a supercomputer. Little B doesn't believe it and asks Little A to prove it by completing the following calculation. Little A seeks your help. Given n integers f1, f2, ..., fn. Since n may be large, the n integers are not directly provided in the input. Instead, they are generated as follows: only f1 is given as input. Then f2 = f1*a+b. And so on, each subsequent number is equal to the previous number multiplied by a and then added to b. Calculate the product of f1, f2, ..., fn modulo 1000003.",
        "function_declaration": "long long mainLogic(long long n, long long f1, long long a, long long b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nlong long mod=1000003;\nint vis[1000010],s[1000010];\n\n// function start\n\n// function end\n\nint main(){\n\tlong long n,f1,a,b;\n\tcin>>n>>f1>>a>>b;\t\n\n\t// calling start\n\tlong long result = mainLogic(n, f1, a, b);\n\t// calling end\n\n\tcout<<result;\n}",
        "example": "[{\"input\": \"3000000 3 116 555\", \"output\": \"783568\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2263,
        "problem_description": "Crowdsurfing is a common activity at music festivals or livehouses, usually taking place when there is a dense crowd of fans. The crowdsurfer stands on the stage facing upwards and jumps into the crowd. Fans use their hands to support the crowdsurfer and pass them overhead (dangerous actions should not be imitated). As a future legendary rock star, Bocchi is very familiar with crowdsurfing. Now, Bocchi is planning to do a crowdsurfing dive.The audience seating area can be viewed as an n*m grid, where each 11 cell may or may not have 1 audience member. The configuration of the audience seats is represented by the audienceSeats matrix, where each element is either 0 or 1, indicating whether there is an audience member at that position. Bocchi wants to find a rectangular area of size xy (x rows and y columns) on the audience seating area with the maximum number of audience members. Bocchi will provide you with q queries, each time specifying x and y. Your task is to determine the maximum number of audience members within a rectangular area of xy dimensions on the audience seating area. Return q answers.",
        "function_declaration": "vector<int> answerQueries(int n, int m, vector<vector<int>>& audienceSeats,\n                               vector<pair<int, int>>& queries)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to calculate the sum of audiences in each x*y region\n//function start\n//function end\n\nint main() {\n    int n, m, q;\n    cin >> n >> m >> q;\n\n    vector<vector<int>> audienceSeats(n, vector<int>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cin >> audienceSeats[i][j];\n        }\n    }\n\n    vector<pair<int, int>> queries(q);\n    for (int i = 0; i < q; i++) {\n        cin >> queries[i].first >> queries[i].second;\n    }\n\n    // Answering the queries\n    //calling start\n    vector<int> results = answerQueries(n, m, audienceSeats, queries);\n    //calling end\n\n    // Printing the results\n    for (int i = 0; i < results.size(); i++) {\n        cout << results[i] << endl;\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"5 6 3\\n1 1 1 1 0 1\\n1 0 1 0 1 1\\n1 1 1 1 1 1\\n1 1 1 0 0 1\\n1 0 1 1 1 1\\n4 2\\n3 3\\n3 4\", \"output\": \"7\\n8\\n10\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1916,
        "problem_description": "Given positive integers s and t, we want to use the operations of incrementing and doubling to transform s into t. One increment operation adds one to the number, and one doubling operation doubles the number. What is the minimum number of operations needed to transform s into t? It is guaranteed that s < t. For 50% of the data, 1 ≤ s < t ≤ 100; ? For 100% of the data, 1 ≤ s < t ≤ 1,000,000,000;",
        "function_declaration": "int calculateAns(int s, int t)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int s, t;\n    cin >> s >> t;\n    // calling start\n    int ans = calculateAns(s, t);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"1 4\", \"output\": \"2\"}, {\"input\": \"2 10\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1969,
        "problem_description": "For the convenience of calculation, astronomers use Julian day to express time. The so-called Julian day is defined as the number of days elapsed from noon on January 1, 4713 BC to a certain moment thereafter, with fractions used for less than a day. If this astronomical calendar is used, every moment will be uniformly mapped onto a number line, making it very convenient to calculate their differences. Now, given a Julian day without a fractional part, please help calculate whether the corresponding Gregorian calendar date (which must be noon) is in a leap year. Our current calendar is the Gregorian calendar, which was modified by Pope Gregory XIII in 1582 AD based on the original Julian calendar (note: the Julian calendar has no direct relationship with Julian day). Specifically, the current Gregorian calendar dates are calculated according to the following rules: 1. After October 15, 1582 AD (inclusive): the Gregorian calendar is used, with 31 days in January, 28 or 29 days in February (depending on whether it is a leap year), 31 days in March, 30 days in April, 31 days in May, 30 days in June, 31 days in July, 31 days in August, 30 days in September, 31 days in October, 30 days in November, and 31 days in December. In a leap year, February has 29 days, while in a common year, it has 28 days. A year is a leap year if it is a multiple of 400, or if the year is a multiple of 4 but not a multiple of 100. 2. From October 5, 1582 AD (inclusive) to October 14, 1582 AD (inclusive): these dates do not exist, they were skipped, and October 4th is followed by October 15th. 3. Before October 4, 1582 AD (inclusive): the Julian calendar is used, with the same number of days per month as the Gregorian calendar, but any year that is a multiple of 4 is a leap year. 4. Although the Julian calendar was not implemented until 45 BC and underwent several adjustments in the early stages, today humans are accustomed to retroactively applying the final rules of the Julian calendar to all dates before October 4, 1582 AD. Note that there is no year 0 AD, so the year after 1 BC is 1 AD. Therefore, years such as 1 BC, 5 BC, 9 BC, 13 BC, etc., should be considered leap years.",
        "function_declaration": "bool isLeapYear(int n)",
        "code_context": "#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\t//calling start\n\tbool result = isLeapYear(n);\n\t//calling end\n\tif(result) cout << \"Yes\";\n\telse cout << \"No\";\n}",
        "example": "[{\"input\": \"1\", \"output\": \"Yes\"}, {\"input\": \"1000\", \"output\": \"No\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2038,
        "problem_description": "CCTV Channel 8, in order to encourage young people to strive and avoid a passive attitude, introduced a new drama titled 'Turning Dreams into Reality' on March 9th. The female protagonist comes from a poor background and has worked in Beijing for several years to save enough money to buy a courtyard house near the central building of the Second Ring Road. After watching the drama, Xia A felt greatly inspired and decided to start saving money to buy a courtyard house for himself as well. Xia A has shared his plan with you and is seeking your help to calculate when his dream can be realized at the earliest. Input consists of a positive integer n and q, indicating the consideration of the next n days. 'Income' contains n non-negative integers, representing Xia A's daily earnings over the next n days. As Xia A wants to realize his dream as soon as possible, he will cut down on expenses and save all his income after he starts saving money. Input also contains two positive integers t and m, where t represents the starting day for Xia A to save money, and m represents the total amount he aims to save. He wants to know the earliest day by which he can achieve his dream under this plan. For 40% of the data, n and q are both ≤ 10^3. For 100% of the data, n ≤ 10^5, m ≤ 10^9, t ≤ n, and it's guaranteed that the total income of Xia A for the next n days is within the representable range of an integer. Return an integer indicating the day on which Xia A can save enough money according to this plan. If he can't save enough money by the end of n days, return -1, indicating that Xia A's wish can only be realized in his dreams.",
        "function_declaration": "int fastestDreamDay(int n, vector<int>& income, int t, int m)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<int> income(n);\n    for (int i = 0; i < n; i++) {\n        cin >> income[i];\n    }\n\n    // Process q queries\n    for (int i = 0; i < q; i++) {\n        int t, m;\n        cin >> t >> m;\n\n        //calling start\n        int result = fastestDreamDay(n, income, t, m);\n        //calling end\n\n        cout << result << endl;\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"10 3\\n100 100 200 100 300 200 100 100 200 300\\n1 1000\\n4 1001\\n6 1000\", \"output\": \"6\\n10\\n-1\"}, {\"input\": \"100000 1\\n1000 1000 1000 ...... 1000 （100000个1000）\\n1 100000000\", \"output\": \"100000\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2125,
        "problem_description": "Little Wan decided to create a special pattern composed of parentheses. This pattern can be determined by an integer $n$. Specifically, for n=1\n()<>\nn=2\n(()<>)<()<>>\nn=3\n((()<>)<()<>>)<(()<>)<()<>>>\nn=...\nThe pattern follows a clear rule: the pattern for $n$ contains two occurrences of the pattern for $n-1$. Now, Little Wan gives you an integer $n$ and asks you to help him write out the pattern. !!Hint!! The function can call itself. This is called recursive calling.",
        "function_declaration": "void dfs(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n int n = 0;\n cin >> n;\n    //calling start\n dfs(n);\n    //calling end\n cout << endl;\n return 0;\n}",
        "example": "[{\"input\": \"1\\n\", \"output\": \"()<>\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1742,
        "problem_description": "There are n items, and we need to select some items to pack into a backpack. Each item has an initial value of Ai and requires Ti time to be packed into the backpack. However, before being packed into the backpack, the value of each item decays at a rate of Bi, meaning that if the time from the start to when the item is fully packed into the backpack is t, then the actual value of the item is Ai - t*Bi. Your task is to determine the maximum value that can be obtained within a limited amount of time. The input consists of two integers, n and T (1 ≤ n ≤ 50, 1 ≤ T ≤ 10000), and three arrays A, B, and Ti. The arrays A and B contain the initial value Ai (1 ≤ Ai ≤ 10^5) and decay coefficient Bi (1 ≤ Bi ≤ 100) for each item, respectively. The array Ti contains the time required to pack each item (1 ≤ Ti ≤ 1000). Your output should be an integer, representing the maximum value that can be obtained.",
        "function_declaration": "int calculateMaxValue(int n, int T, vector<int>& A, vector<int>& B, vector<int>& Ti) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the maximum value that can be obtained\n// by selecting items to fit within the given total time\n//function start\n\n//function end\n\nint main() {\n    int n, T;\n    cin >> n >> T;\n\n    vector<int> A(n), B(n), Ti(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> A[i] >> B[i] >> Ti[i];\n    }\n\n    // Calling the function to calculate the maximum value\n    //calling start\n    int maxValue = calculateMaxValue(n, T, A, B, Ti);\n    //calling end\n\n    cout << maxValue << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"2 50\\n100 1 10\\n100 2 15\", \"output\": \"145\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2135,
        "problem_description": "Given three positive integers, use a function to find the median.",
        "function_declaration": "int middle(int x,int y,int z)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int x,y,z;\n    // calling start\n    cin >> x >> y >> z;\n    cout << middle(x,y,z);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"1 9 2\\n\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2104,
        "problem_description": "From a set of $n$ distinct elements, selecting any $m$ elements ($m\\leq n$) to form a subset is called a combination of selecting $m$ elements from $n$ distinct elements. The number of all possible combinations of selecting $m$ elements from $n$ distinct elements is called the combination number of selecting $m$ elements from $n$ distinct elements. It is denoted by the symbol $\\mathrm C_n^m$ or $\\dbinom{n}{m}$. One way to calculate the combination number is $\\mathrm C_n^m=\\dfrac{n!}{m!(n-m)!}$ , which can be written as $\\mathrm C_n^m=\\dfrac{n\\times(n-1)\\times\\cdots\\times (n-m+1)}{1\\times2\\times\\cdots\\times m}$. For example, the calculation of $\\mathrm C_7^3$ is $\\dfrac{7\\times6\\times5}{1\\times2\\times3}=35$. In particular, we define $\\mathrm C_n^0=1\\ (n>0)$. Now please calculate $\\mathrm C_n^m$.",
        "function_declaration": "long long calculate(long long n, long long m)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tlong long n, m;\n\tcin >> n >> m;\n\t// calling start\n\tlong long result = calculate(n, m);\n\t// calling end\n\tcout << result;\n\treturn 0;\n}",
        "example": "[{\"input\": \"10 4\", \"output\": \"210\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2034,
        "problem_description": "This question is an enhanced version of buying snacks. Xiao Wan plans to go to the store to buy some snacks and share them with Xiao Cheng. In this case, Xiao Wan usually buys an even number of portions, with at most one being different. Xiao Cheng is hesitant about whether to accept his sharing. In the end, she decides that if every kind of snack on Xiao Wan's shopping list is an even number, she will eat snacks with him. To interfere with Xiao Cheng's judgment, Xiao Wan's shopping list is very long, with a total of $n$ items, each item has a category number. Xiao Cheng is having difficulty and asks you to help her determine if each kind is an even number. If Xiao Cheng can accept it, return \"accept\", otherwise return \"deny\".",
        "function_declaration": "string checkShoppingList(int n, int arr[])",
        "code_context": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    int arr[n];\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    //calling start\n    string result = checkShoppingList(n, arr);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"2\\n1 1\", \"output\": \"accept\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1973,
        "problem_description": "Input five integers, please output the maximum value of these five integers.",
        "function_declaration": "int findMax(int a, int b, int c, int d, int e)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int a, b, c, d, e, ans;\n  cin >> a >> b >> c >> d >> e;\n  // calling start\n  ans = findMax(a, b, c, d, e);\n  // calling end\n  cout << ans;\n  return 0;\n}",
        "example": "[{\"input\": \"1 7 4 6 5\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1831,
        "problem_description": "Due to the low profitability of the dairy industry, it is very important to reduce the price of raw materials (milk). Help Marry Dairy find the optimal milk procurement plan. Marry Dairy purchases milk from some dairy farmers, and the price provided by each dairy farmer to the dairy processing company is different. In addition, just like each cow can only produce a fixed amount of milk per day, each dairy farmer can provide a certain amount of milk per day. Every day, Marry Dairy can purchase an integer quantity of milk from the dairy farmers that is less than or equal to the maximum production of the dairy farmers. Given Marry Dairy's daily demand for milk, as well as the milk unit price and production volume provided by each dairy farmer, calculate the minimum cost required to purchase enough milk. Note: the total production of all dairy farmers per day is greater than Marry Dairy's demand. The input consists of the first line with two integers n m (0 ≤ n ≤ 2 * 10^6), representing the total amount of milk needed and the number of farmers supplying milk. The next m (0 ≤ m ≤ 5000) lines each contain two integers pi ai (0 ≤ pi ≤ 1000, 0 ≤ ai ≤ 2 * 10^6), representing the unit price of milk for the i-th farmer and the maximum amount of milk the i-th farmer can sell in one day. The output is a single line containing a single integer, representing the minimum cost required for Marry's milk manufacturing company to obtain the required milk.",
        "function_declaration": "long long calculateMinimumCost(long long n, int m, vector<pair<int, int>>& farmers)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    long long n;\n    int m;\n    cin>>n>>m;\n    vector<pair<int, int>> farmers;\n    for(int i=0; i<m; i++){\n        int p, a;\n        cin>>p>>a;\n        farmers.push_back(make_pair(p, a));\n    }\n    // calling start\n    long long result = calculateMinimumCost(n, m, farmers);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"100 5\\n5 20\\n9 40\\n3 10\\n8 80\\n6 30\", \"output\": \"630\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1930,
        "problem_description": "Given an integer n, please find the largest square factor of n. The so-called square factor is a factor of n and is a perfect square. The largest square factor is the largest number among all the square factors of n. For example, the largest square factor of 12 is 4, the largest square factor of 81 is itself, and the largest square factor of 21 is 1. For 50% of the data, 1 ≤ n ≤ 10000; for 100% of the data, 1 ≤ n ≤ 10,000,000.",
        "function_declaration": "int findMaxPerfectSquare(int n)",
        "code_context": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n, mx = 0;\n\n// function start\n\n// function end\n\nint main()\n{\n    cin >> n;\n\n    // calling start\n    mx = findMaxPerfectSquare(n);\n    // calling end\n\n    cout << mx;\n\n    return 0;\n}",
        "example": "[{\"input\": \"12\", \"output\": \"4\"}, {\"input\": \"81\", \"output\": \"81\"}, {\"input\": \"21\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2326,
        "problem_description": "Given two n*m integer matrices, add the corresponding elements at each position and output the resulting matrix.",
        "function_declaration": "vector<vector<int>> addMatrices(int n, int m, vector<vector<int>>& matrix1, vector<vector<int>>& matrix2)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to add two matrices\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<vector<int>> matrix1(n, vector<int>(m, 0));\n    vector<vector<int>> matrix2(n, vector<int>(m, 0));\n\n    for (int i = 0; i < 2 * n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (i < n) {\n                cin >> matrix1[i][j];\n            } else {\n                cin >> matrix2[i - n][j];\n            }\n        }\n    }\n\n    // Add the two matrices\n    //calling start\n    vector<vector<int>> result = addMatrices(n, m, matrix1, matrix2);\n    //calling end\n\n    // Print the result\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"2 3\\n1 2 3\\n4 5 6\\n3 0 -1\\n-4 5 8\", \"output\": \"4 2 2\\n0 10 14\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2154,
        "problem_description": "Given two integers $n$ and $k$, print a fence diagram that should be divided into $n$ segments, with $k$ fillings in each segment. For example, when $n=5$ and $k=6$, the diagram is as follows: +------+------+------+------+------+",
        "function_declaration": "void printPattern(int n, int k)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n    int n, k;\n    cin >> n >> k;\n\n    // calling start\n    printPattern(n, k);\n    // calling end\n}",
        "example": "[{\"input\": \"4 5\", \"output\": \"+-----+-----+-----+-----+\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2056,
        "problem_description": "It is well known that Professor Dark is a fan of ASCII art, so she wants you to output some ASCII art. In simple terms, you need to output a rectangle made up of the character \"*\", with its height and width given by Professor Dark. Two positive integers, n and m, represent the height and width of the ASCII art, respectively. It is guaranteed that n and m will not exceed 100.",
        "function_declaration": "void printStars(int n, int m)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int n,m;\n    cin >> n >> m;\n    // calling start\n    printStars(n, m);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2 3\\n\", \"output\": \"***\\n***\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1662,
        "problem_description": "明明 wants to invite some classmates to do a questionnaire survey at school. In order to ensure the objectivity of the experiment, he first generates N random integers between 1 and 1000 using a computer (N≤100). For duplicate numbers, only one is kept, and the rest are removed. Different numbers correspond to different student IDs. Then, these numbers are sorted in ascending order, and classmates are found to do the survey according to the sorted order. Please assist Mingming in completing the \"removal of duplicates\" and \"sorting\" tasks. Note: Please use the selection sort method to complete this question. Output 2 lines: the first line is a positive integer M, representing the number of different random numbers. The second line is M positive integers separated by spaces, representing the sorted different random numbers.",
        "function_declaration": "void removeDuplicatesAndSort(int N, vector<int>& nums)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int N;\n    cin>>N;\n    vector<int> nums(N);\n    for(int i=0; i<N; i++){\n        cin>>nums[i];\n    }\n    // calling start\n    removeDuplicatesAndSort(N, nums);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"10\\n20 40 32 67 40 20 89 300 400 15\", \"output\": \"8\\n15 20 32 40 67 89 300 400\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 1998,
        "problem_description": "Every day, there are some income and expenses in Xiao A's account. Now Xiao A has informed you about the changes in his account balance over a period of time and wants you to help calculate his income and expenses. The input \"balance\" contains t non-negative integers, where the i-th number represents Xiao A's account balance at the end of the i-th day. \"Queries\" contains q pairs of integers l and r, indicating that Xiao A is asking about his income and expenses from day l to day r. For 100% of the data, t and q are both less than or equal to 100, 1 <= l < r <= t, the account balance is less than or equal to 100000. Your task is to return the answers to the q queries regarding income and expenses.",
        "function_declaration": "vector<long long> calculateBalance(vector<long long> balance, vector<pair<int, int>> queries)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int t, q;\n    cin>>t>>q;\n    vector<long long> balance(t+1);\n    for(int i=1; i<=t; i++){\n        cin>>balance[i];\n    }\n    vector<pair<int, int>> queries(q);\n    for(int i=0; i<q; i++){\n        int l, r;\n        cin>>l>>r;\n        queries[i] = make_pair(l, r);\n    }\n    // calling start\n    vector<long long> result = calculateBalance(balance, queries);\n    // calling end\n    for(auto res : result){\n        cout<<res<<endl;\n    }\n}",
        "example": "[{\"input\": \"10 3\\n100 200 300 400 500 600 350 450 50 0\\n1 8\\n4 5\\n5 10\", \"output\": \"350\\n100\\n-500\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2317,
        "problem_description": "Given a binary sequence $b_1, b_2, ..., b_n$, where 01 means that the sequence only contains 0 and 1. How many minimum changes from 1 to 0 are needed so that the sequence contains at least $k$ consecutive 0s?",
        "function_declaration": "int calculateBestb(int n, int k, int b[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n int n, k;\n cin >> n >> k;\n int b[500001];\n for (int i = 1; i <= n; ++i) \n {\n  char c;\n  cin >> c;\n  if (c == '0') b[i] = 0;\n  else b[i] = 1;\n } \n\n // calling start\n int best = calculateBestb(n, k, b);\n // calling end\n\n cout << best; \n}",
        "example": "[{\"input\": \"6 3\\n101010\", \"output\": \"1\"}, {\"input\": \"5 5\\n00100\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2164,
        "problem_description": "Given $n$ integers $a_1, a_2, ..., a_n$, each representing the length of a line segment, can these line segments be used to form a closed $n$-sided polygon? The necessary and sufficient condition for $n$ line segments to form an $n$-sided polygon is that the length of any one line segment is strictly less than the sum of the lengths of the remaining $n-1$ line segments. Input a single integer $n$ and $n$ integers $a_1, a_2, ..., a_n$, where $1 \\leq a_i \\leq 1,000,000,000$; for $30\\%$ of the data, $1 \\leq n \\leq 100$; for $60\\%$ of the data, $1 \\leq n \\leq 5,000$; for $100\\%$ of the data, $1 \\leq n \\leq 100,000$; if an $n$-sided polygon can be formed, output Yes, otherwise output No.",
        "function_declaration": "string canFormPolygon(int n, vector<int>& lineSegments)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Function to check if the given line segments can form a closed n-gon\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> lineSegments(n);\n    for (int i = 0; i < n; i++) {\n        cin >> lineSegments[i];\n    }\n    //calling start\n    string result = canFormPolygon(n, lineSegments);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n1 3 5 2 4 6\", \"output\": \"Yes\"}, {\"input\": \"3\\n1 1 2\", \"output\": \"No\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1796,
        "problem_description": "Using pointers, write a function to swap the values of two integer variables.",
        "function_declaration": "void swapNumbers(int *xp, int *yp)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // calling start\n    swapNumbers(&a, &b);\n    // calling end\n    cout << a << \" \" << b << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5 6\", \"output\": \"6 5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2100,
        "problem_description": "Xiao Wan took Xiao Cheng to admire an artistic staircase. This staircase has a total of $n$ steps, and each step has the same width but varying heights. Suddenly, Xiao Cheng has a question: If we look at the staircase from the side, what is the area enclosed by the surface of the staircase and the ground? Can you help Xiao Wan answer this question? Input two integers $n$ and $w$, followed by $n$ integers. The first integer represents the number of steps $n$, the second integer represents the width of each step $w$, and the following $n$ integers represent the heights $h_i$ of each step relative to the previous one. Output an integer, representing the area enclosed by the surface of the steps and the ground. (Note that the answer might exceed the range of an integer.)",
        "function_declaration": "long long calculateSurfaceArea(int n, int w, vector<int>& heights)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, w;\n    cin >> n >> w;\n\n    vector<int> heights(n);\n    for (int i = 0; i < n; i++) {\n        cin >> heights[i];\n    }\n\n    //calling start\n    long long surfaceArea = calculateSurfaceArea(n, w, heights);\n    cout << surfaceArea << endl;\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"3 2\\n1 2 3\\n\", \"output\": \"20\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2177,
        "problem_description": "Little Orange has a cute little cat. One day, the cat ran to the park and played hide-and-seek with Little Orange! Little Orange knows the terrain of the park. Specifically, the park can be seen as an $n$-row $m$-column rectangular area, where the elevation is approximately equal in each rectangular area. Little Orange's cat likes to climb high, so Little Orange asked Little Wan to help find each area that is higher than its surrounding four areas (strictly) according to the topographic map. Please determine how many areas Little Wan needs to go to based on the topographic map.",
        "function_declaration": "int findPeaks(int n, int m, int a[maxn][maxn])",
        "code_context": "#include <iostream>\nusing namespace std;\nint const maxn = 5001;\n\nint n = 0, m = 0;\nint a[maxn][maxn];\n\n// function start\n\n// function end\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j)\n\t\t\tcin >> a[i][j];\n\t// calling start\n\tint ans = findPeaks(n, m, a);\n\t// calling end\n\tcout << ans << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"3 5\\n1 2 3 4 5\\n6 7 6 7 6\\n5 4 3 2 1\", \"output\": \"2\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1793,
        "problem_description": "Write a program using pointers. After inputting a string, it should not only count the number of characters, but also indicate the number of uppercase letters, lowercase letters, numbers, and other characters separately.",
        "function_declaration": "void countCharacters(char* ptr, int& total, int& cap, int& sma, int& num, int& oth)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char str[100];\n    char *ptr = str;\n    int total, cap, sma, num, oth;\n    cin.get(ptr, 100);\n    // calling start\n    countCharacters(ptr, total, cap, sma, num, oth);\n    // calling end\n    cout << cap << endl;\n    cout << sma << endl;\n    cout << num << endl;\n    cout << oth << endl;\n    cout << total << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"I am 21 years old.\", \"output\": \"1\\n10\\n2\\n5\\n18\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1799,
        "problem_description": "Input two integers, use variable references to swap them in ascending order.",
        "function_declaration": "void swapValues(int &a, int &b)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int m, n;\n    cin >> m >> n;\n    // calling start\n    if (m > n)\n        swapValues(m, n);\n    // calling end\n    cout << m << \" \" << n << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3 2\", \"output\": \"2 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1573,
        "problem_description": "Enter a character, if the character is an uppercase or lowercase letter. Additional hint: the syntax of the if statement is if (expression) {\n    // statements to be executed if the expression is true\n}\nelse {\n    // statements to be executed if the expression is false (the else branch can be omitted)\n}",
        "function_declaration": "bool isAlphabet(char a)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    char a;\n    cin >> a;\n    // calling start\n    bool result = isAlphabet(a);\n    // calling end\n    if (result) {\n        cout << \"yes\";\n    }\n    else {\n        cout << \"no\";\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"q\", \"output\": \"yes\"}, {\"input\": \">\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2062,
        "problem_description": "Little A found that the floating-point data type does not support the modulo (%) operation in the process of learning programming. However, if integer division is used, an unreasonable situation occurs where (A/B)*B is not equal to A. Little A wants to solve this problem. Specifically, Little A wants to find an integer t that satisfies (t*B)%C == A%C. This integer t can be regarded as the result of (A/B)%C. After studying, Little A found that when c is a prime number, there must be exactly one integer t in the range 0,1,...,c-1 that satisfies the condition. Little A would like you to help him find this number. The input contains three positive integers a, b, c. Output a non-negative integer less than c, representing the answer.",
        "function_declaration": "long long calculate(long long a, long long b, long long c)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tlong long a,b,c;\n\tcin>>a>>b>>c;\n\t// calling start\n\tlong long result = calculate(a, b, c);\n\t// calling end\n\tcout<<result;\n}",
        "example": "[{\"input\": \"1 2 7\", \"output\": \"4\"}, {\"input\": \"3 5 11\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1578,
        "problem_description": "This question requires you to write a program that uses the cout statement to print a menu on the screen with 5 lines. Print the menu in the following format, with each line displaying one sentence. Pay attention to not having any extra characters except for the line breaks in each line. [1] Select crisps\n[2] Select popcorn\n[3] Select chocolate\n[4] Select cola\n[0] Exit",
        "function_declaration": "void displayMenu()",
        "code_context": "#include <iostream>\nusing namespace std; \n\n//function start\n\n//function end\n\nint main() {\n    //calling start\n    displayMenu();\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"[1] Select crisps\\n[2] Select popcorn\\n[3] Select chocolate\\n[4] Select cola\\n[0] Exit\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2003,
        "problem_description": "Given two positive integers a and b, find the values of a+b and a*b. The input consists of one line containing two positive integers a and b. For 100% of the data, $a,b \\le 10^9$. The output is one line containing two numbers, representing the values of a+b and a*b.",
        "function_declaration": "pair<long long, long long> calculateSumAndProduct(long long a, long long b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    long long a, b;\n    cin>>a>>b;\n    // calling start\n    pair<long long, long long> result = calculateSumAndProduct(a, b);\n    // calling end\n    cout<<result.first<<\" \"<<result.second;\n}",
        "example": "[{\"input\": \"2 3\", \"output\": \"5 6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2149,
        "problem_description": "To make a pancake, both sides of the pancake need to be heated. Given two positive integers $n$ and $k$, where $n$ represents the number of pancakes to be made and $k$ represents the number of pans in the kitchen, each pan can make one side of a pancake in one minute. Please calculate the minimum number of minutes needed to make all the pancakes.",
        "function_declaration": "int calculate(int n, int k)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    // calling start\n    int result = calculate(n, k);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"3 2\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2373,
        "problem_description": "Assuming we have a set ${1, 2, 3, ..., n}$, output the number of subsets that satisfy the condition that the sum of all numbers in the set is a multiple of 3. For example, when n is equal to 3, all subsets are: {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}. Among them, there are 3 subsets that satisfy the condition, which are {3}, {1, 2}, {1, 2, 3}. For example, when n is equal to 4, all subsets are: {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}, {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}, {1, 2, 3, 4}. Among them, there are 5 subsets that satisfy the condition, which are {3}, {1, 2}, {2, 4}, {1, 2, 3}, {2, 3, 4}.",
        "function_declaration": "int calculate_ans(int n)",
        "code_context": "#include <bits/stdc++.h>  \nusing namespace std;  \nint n;\n\n// function start\n\n// function end\n\nint main() {  \n    cin >> n;\n    // calling start\n    int ans = calculate_ans(n);\n    // calling end\n    printf(\"%d\\n\", ans);  \n}",
        "example": "[{\"input\": \"3\", \"output\": \"3\"}, {\"input\": \"4\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1966,
        "problem_description": "Little A and Little B are playing a matching game. Matching refers to both players revealing a card face down, and the player with the higher number on the card wins. At the start of the game, Little A and Little B each have three cards. In each round, both players simultaneously play one card for matching, and the winner earns 2 points. If it's a tie, both players earn 1 point. After three rounds, both players have played all their cards, and the game ends. You have already seen both players' cards in advance. Now, Little A wants you to tell him the highest possible score he can get when the game ends. Input three integers a1, a2, a3, representing the numbers on Little A's three cards. Input three integers b1, b2, b3, representing the numbers on Little B's three cards.",
        "function_declaration": "int calculateScore(int a1, int a2, int a3, int b1, int b2, int b3)",
        "code_context": "#include<cstdio>\n\n//function start\n\n//function end\n\nint main(){\n\tint a1,a2,a3,b1,b2,b3;\n\tscanf(\"%d%d%d%d%d%d\",&a1,&a2,&a3,&b1,&b2,&b3);\n\t//calling start\n\tint result = calculateScore(a1, a2, a3, b1, b2, b3);\n\t//calling end\n\tprintf(\"%d\",result);\n}",
        "example": "[{\"input\": \"2 9 8\\n9 3 10\", \"output\": \"3\"}, {\"input\": \"1 8 5\\n2 5 6\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1994,
        "problem_description": "Input a non-negative integer and output the sum of its digits.",
        "function_declaration": "int calculateSum(int n)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    // calling start\n    int result = calculateSum(n);\n    // calling end\n    printf(\"%d\\n\",result);\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"3\"}, {\"input\": \"67\", \"output\": \"13\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2321,
        "problem_description": "Given $n$ numbers $a_1,a_2,...,a_n$, select $i$ and $j$ from 1 to $n$ such that $i<j$, and form an ordered pair $(a_i,a_j)$. Please count how many different pairs can be selected from the sequence. Two pairs $(x,y)$ and $(p,q)$ are considered different if $x≠p$ or $y≠q$.",
        "function_declaration": "int countUniquePairs(int n, vector<int>& arr) ",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to count the number of unique pairs\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> arr(n);\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    // Calling the function to count the number of unique pairs\n    //calling start\n    int result = countUniquePairs(n, arr);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n3 1 3 2\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2114,
        "problem_description": "Enter a non-negative integer n and calculate the power of 2 to the n-th power ($2^n$).",
        "function_declaration": "double calculatePower(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    // calling start\n    double result = calculatePower(n);\n    // calling end\n    printf(\"%.0lf\", result);\n}",
        "example": "[{\"input\": \"3\", \"output\": \"8\"}, {\"input\": \"200\", \"output\": \"1606938044258990275541962092341162602522202993782792835301376\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1564,
        "problem_description": "Input a matrix of size n*m, swap its rows and columns, with the first row becoming the first column, the second row becoming the second column, and so on. 1 <= n, m <= 100. Output m rows, each row containing n integers, representing the matrix after the swap.",
        "function_declaration": "void printMatrix(int m, int n, int nums[][100])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    int nums[100][100];\n    \n    for (int i=0; i<n; i++)\n        for (int j=0; j<m; j++)\n            cin >> nums[j][i];\n    \n    // calling start\n    printMatrix(m, n, nums);\n    // calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"2 3\\n1 2 3\\n4 5 6\", \"output\": \"1 4\\n2 5\\n3 6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2140,
        "problem_description": "The ancient Chinese mathematical treatise \"Nine Chapters on the Mathematical Art\" was written during the Han Dynasty. In one of its chapters, a profit and loss problem is discussed: Suppose there are people buying an item, with each person contributing 8 units and having a surplus of 3 units, or contributing 7 units and having a deficit of 4 units. The question asks for the number of people and the price of the item. In other words, a group of people collectively buy an item. If each person contributes $a$ units, the total amount paid exceeds the price of the item by $x$ units. If each person contributes $a-1$ units, the total amount paid is less than the price of the item by $y$ units. Given $a$, $x$, and $y$, find the number of people and the price of the item. Output two integers: the first integer represents the number of people involved, and the second integer represents the price of the item. Separate the two integers with a space.",
        "function_declaration": "void findPeopleAndPrice(int a, int x, int y)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// Function to find the number of people and the price of the item\n//function start\n\n//function end\n\nint main() {\n    int a, x, y;\n    cin >> a >> x >> y;\n\n    // Call the function to find the number of people and the price of the item\n    //calling start\n    findPeopleAndPrice(a, x, y);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"8 3 4\", \"output\": \"7 53\"}, {\"input\": \"5 2 6\", \"output\": \"8 38\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2276,
        "problem_description": "Given an integer array of length n and q queries, each query provides a range. Find a continuous segment of numbers (at least 1) within this range that has the maximum sum.",
        "function_declaration": "vector<int> maxSubarraySum(vector<int>& nums, vector<pair<int, int>>& queries)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to find the maximum subarray sum within a given range\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    vector<pair<int, int>> queries(q);\n    for (int i = 0; i < q; i++) {\n        int l, r;\n        cin >> l >> r;\n        queries[i] = make_pair(l, r);\n    }\n\n    // Find the maximum subarray sum within each query range\n    //calling start\n    vector<int> results = maxSubarraySum(nums, queries);\n    //calling end\n\n    // Output the results\n    for (int i = 0; i < q; i++) {\n        cout << results[i] << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"9 2\\n-1 8 3 -7 5 3 -9 2 6\\n1 9\\n4 4\", \"output\": \"12\\n-7\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2215,
        "problem_description": "How should Xiao Ai allocate her time in order to maximize the number of level upgrades, given that she can play two games, each with $n$ levels, and each level has a different completion time?",
        "function_declaration": "int calculateMaxPassengers(long long a[], long long b[], int n, int t)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tlong long a[100001], b[100001];\n\tint n, t;\n\tcin >> n >> t;\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> b[i];\n\t}\n\t// calling start\n\tint result = calculateMaxPassengers(a, b, n, t);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"4 22\\n6 8 10 7 \\n7 11 9 9\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1641,
        "problem_description": "Given a complete binary tree with the root node as 1 and stored in sequential order. We know that the last node of the complete binary tree is n. We want to know how many nodes are included in the subtree with node m as the root node.",
        "function_declaration": "int getNodeNum(int n,int m)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\nint n, m, ans;\n\nvoid getAns(int pos) {\n    ans++;\n    if (pos * 2 <= n)\n        getAns(pos * 2);\n    if (pos * 2 + 1 <= n)\n        getAns(pos * 2 + 1);\n    return;\n}\n// function start\n\n// function end\n\nint main() {\n    cin >> n >> m;\n    // calling start\n    ans =  getNodeNum(n,m);\n    // calling end\n    cout << ans;\n    return 0;\n}",
        "example": "[{\"input\": \"7 3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1498,
        "problem_description": "Find the product of two numbers. Explanation/Hint: Each number does not exceed 10^2000 and high precision is required.",
        "function_declaration": "string multiply(string num1, string num2)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    string num1, num2;\n    cin >> num1 >> num2;\n    // calling start\n    string result = multiply(num1, num2);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"123456789\\n987654321\", \"output\": \"121932631112635269\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1571,
        "problem_description": "Enter a number and determine whether it is both a multiple of 5 and a multiple of 7.",
        "function_declaration": "bool isDivisibleBy5And7(int a)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    bool result = isDivisibleBy5And7(a);\n    // calling end\n    if (result) {\n        cout << \"yes\";\n    }\n    else {\n        cout << \"no\";\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"35\", \"output\": \"yes\"}, {\"input\": \"1\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1779,
        "problem_description": "There is a rectangular grid of 2Xn. Fill the grid with 1*2 dominoes. For example, when n=3, there are a total of 3 methods to fill the 2X3 rectangular grid with dominoes. Input an integer n (1 ≤ n ≤ 50) to represent the length of the grid that needs to be filled. Calculate the number of possible solutions.",
        "function_declaration": "long long fibonacci(int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nlong long a[60];\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    // calling start\n    long long result = fibonacci(n);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2014,
        "problem_description": "Given the lengths of three line segments, all of which are positive integers not greater than 10000. Intend to combine these three line segments into a triangle, what kind of triangle can it be? If the three line segments cannot form a triangle, output \"Not triangle\"; if it is a right triangle, output \"Right triangle\"; if it is an acute triangle, output \"Acute triangle\"; if it is an obtuse triangle, output \"Obtuse triangle\"; if it is an isosceles triangle, output \"Isosceles triangle\"; if it is an equilateral triangle, output \"Equilateral triangle\". If this triangle meets multiple conditions mentioned above, please output them in the order mentioned above, separated by line breaks.",
        "function_declaration": "string triangleType(int a, int b, int c)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main()\n{\n    int a, b, c;\n    cin >> a >> b >> c;\n    //calling start\n    string result = triangleType(a, b, c);\n    //calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"3 3 3\", \"output\": \"Acute triangle\\nIsosceles triangle\\nEquilateral triangle\"}, {\"input\": \"3 4 5\", \"output\": \"Right triangle\"}, {\"input\": \"6 10 6\", \"output\": \"Obtuse triangle\\nIsosceles triangle\"}, {\"input\": \"1 14 5\", \"output\": \"Not triangle\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2324,
        "problem_description": "Given n non-negative integers, calculate the sum of all odd numbers.",
        "function_declaration": "int calculateOddSum(int n, vector<int>& numbers)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> numbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> numbers[i];\n    }\n\n    //calling start\n    int oddSum = calculateOddSum(n, numbers);\n    //calling end\n\n    cout << oddSum << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n1 2 3 4 5 6\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1993,
        "problem_description": "Enter an integer and output the result of its mod 5.",
        "function_declaration": "int calculateRemainder(int n)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    // calling start\n    int result = calculateRemainder(n);\n    // calling end\n    printf(\"%d\\n\", result);\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"3\"}, {\"input\": \"-1\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1790,
        "problem_description": "Assign the integers 1 to 10 in order to an int type array, and then use an int type pointer to output the values of the array elements.",
        "function_declaration": "void printArray(int* ptr, int size)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, *ptr;\n    ptr = a;\n    // calling start\n    printArray(ptr, 10);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"1 2 3 4 5 6 7 8 9 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1934,
        "problem_description": "All web browsers have access, forward, and backward buttons. Their functionalities work as follows: Accessing requires the user to provide a URL. The browser will visit that URL and set its predecessor to the URL before the jump. Backward operation checks if the current URL has a predecessor (except for the first URL, every URL has a predecessor). If it does, the browser will visit the predecessor of the current URL. Forward is used to counteract the backward operation: if the previous step is a backward operation, the browser goes back to the web page before the backward operation. If the previous step is an access operation, the forward operation is ignored. If the previous step is also a forward operation, if the previous forward operation has already offset a backward operation, the effect of the forward operation is determined based on earlier operations; otherwise, the operation is ignored. Given n operations, simulate the behavior of the browser and output the URLs it accesses for each operation. It's guaranteed that the length of each input URL will not exceed 30 characters. For 30% of the data, 1 ≤ n ≤ 1000; for 60% of the data, 1 ≤ n ≤ 10000; for 100% of the data, 1 ≤ n ≤ 50000. Input a single positive integer n representing the number of operations. Then follow n steps of operations: Access operations start with the letter \"v\" followed by a URL, separated by a space, ensuring that there are no spaces or other invisible characters in the URL; backward operation consists of only the letter \"b\"; forward operation consists of only the letter \"f\". Output n lines in total: for each operation, if the browser accesses a URL, output that URL; if the browser ignores the operation, output a \"?\" character.",
        "function_declaration": "void simulateBrowser(int n, vector<string>& operations)",
        "code_context": "#include <iostream>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n\n// Function to simulate browser behavior\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> operations(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> operations[i];\n    }\n\n    //calling start\n    simulateBrowser(n, operations);\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"10\\nv iai.sh.cn\\nv scs.sh.cn\\nv yacs.club\\nb\\nb\\nf\\nf\\nf\\nv ioinformatics.org\\nf\", \"output\": \"iai.sh.cn\\nscs.sh.cn\\nyacs.club\\nscs.sh.cn\\niai.sh.cn\\nscs.sh.cn\\nyacs.club\\n?\\nioinformatics.org\\n?\"}, {\"input\": \"8\\nv iai.sh.cn\\nv taobao.com\\nv baidu.com\\nb\\nb\\nv tmall.com\\nf\\nb\", \"output\": \"iai.sh.cn\\ntaobao.com\\nbaidu.com\\ntaobao.com\\niai.sh.cn\\ntmall.com\\n?\\niai.sh.cn\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1704,
        "problem_description": "There are a certain number of chickens and rabbits in a cage. When counted from the top, there are n heads. When counted from the bottom, there are m feet. Please tell me how many chickens and rabbits are in the cage.",
        "function_declaration": "pair<int, int> calculate(int n, int m)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    // calling start\n    pair<int, int> result = calculate(n, m);\n    // calling end\n    cout << result.first << \" \" << result.second << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"2 6\", \"output\": \"1 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1378,
        "problem_description": "Input n, output a parallelogram with n rows, print the parallelogram using *.",
        "function_declaration": "void printPattern(int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    printPattern(n);\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"4\", \"output\": \"****\\n ****\\n  ****\\n   ****\"}, {\"input\": \"3\", \"output\": \"***\\n ***\\n  ***\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1902,
        "problem_description": "User enters password twice, determine if the two passwords are inconsistent.",
        "function_declaration": "bool checkPasswordConsistency(char* passWord1, char* passWord2)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char userName[21];\n    char passWord1[21];\n    char passWord2[21];\n    printf (\"请输入你的用户名\\n\");\n    scanf (\"%s\", userName);\n    printf (\"请输入你的密码\\n\");\n    scanf (\"%s\", passWord1);\n    printf (\"请再次输入密码\\n\");\n    scanf (\"%s\", passWord2);\n    // calling start\n    if (checkPasswordConsistency(passWord1, passWord2))\n        printf (\"%s你好，欢迎来到伯禹商城\", userName);\n    else\n        printf (\"两次密码不一致\");\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"Akatsuki\\n123456789\\n123456789\\n\", \"output\": \"请输入你的用户名\\n请输入你的密码\\n请再次输入密码\\nAkatsuki你好，欢迎来到伯禹商城\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2301,
        "problem_description": "English translation: \nXiao Ai runs a dairy farm and produces milk. In the next $n$ days, there will be orders every day. On the $i$th day, Xiao Ai must deliver $a_i$ boxes of milk. The cost of producing milk comes from two aspects: material cost and storage cost. The price of raw materials changes every day. If Xiao Ai chooses to produce milk on the $i$th day, the material cost per box of milk is $c_i$ yuan. If the cost of raw materials increases, Xiao Ai can produce the milk in advance and store it in a cold storage, but there will be a storage cost. The cost of storing one box of milk for one day is $s$ yuan. There is no production limit per day, which means Xiao Ai can produce any amount of milk on any day. There is also no limit to the capacity of the cold storage, and it is assumed that milk can be stored for any length of time. The question is, how should Xiao Ai plan the daily production and storage in order to minimize the total cost while meeting all the order requirements? Output a single integer representing the minimum total cost to fulfill all the orders.",
        "function_declaration": "long long calculateSum(int n, long long s, long long a[], long long c[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tlong long s;\n\tcin >> n >> s;\n\tlong long a[1000001], c[1000001];\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> c[i] >> a[i]; \t\n\t}\n\n    // calling start\n\tlong long sum = calculateSum(n, s, a, c);\n    // calling end\n\n    cout << sum;\n}",
        "example": "[{\"input\": \"3 10\\n100 5\\n200 5\\n90 20\", \"output\": \"2850\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1863,
        "problem_description": "The game rule of \"pass on every multiple of 7\" is as follows: starting from a positive integer, count one by one. If encountering a multiple of 7 or a number with 7 as the units digit, do not count and output \"pass\". Given the first integer a to start the game and the last integer b when the game ends, please output the entire counting process. Output multiple lines: each line contains a number or the word \"pass\".",
        "function_declaration": "void checkNumber(int a, int b)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // calling start\n    checkNumber(a, b);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"5 8\", \"output\": \"5\\n6\\npass\\n8\"}, {\"input\": \"42 49\", \"output\": \"pass\\n43\\n44\\n45\\n46\\npass\\n48\\npass\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1792,
        "problem_description": "Write a function to search for a certain character in a string. If the search is successful, the function returns the address (pointer) of the character(the address starts with 1); if the search fails, the returned pointer is NULL. If found, output the index of the character in the source string; if not found, output \"Not Found\".",
        "function_declaration": "void findCharacter(char* str, char c)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    char str[100];\n    char c;\n    cin.getline(str, 100, ' ');\n    cin>>c;\n    // calling start\n    findCharacter(str, c);\n    // calling end\n}",
        "example": "[{\"input\": \"ABCDEFGHIJKLMN D\", \"output\": \"4\"}, {\"input\": \"ABCDEFG S\", \"output\": \"Not Found\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2283,
        "problem_description": "Given $n$ integers $a_1,a_2,...,a_n$, please calculate a set of products, denoted as $P_1,P_2,...,P_n$, where the definition of $P_i$ is as follows: $$P_i = \\frac{a_1  a_2  a_3  a_n}{a_i}$$ In other words, $P_i$ is the product of $a_1$ to $a_n$ divided by $a_i$. Since the answer may be large, output the remainder of each $P_i$ modulo $10000$.",
        "function_declaration": "vector<int> calculateProductArray(int n, vector<int>& nums)",
        "code_context": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to calculate the product array\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Calculate the product array and output the results\n    //calling start\n    vector<int> result = calculateProductArray(n, nums);\n    //calling end\n\n    for (int i = 0; i < n; i++) {\n        cout << result[i] << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n1 3 4 6\", \"output\": \"72\\n24\\n18\\n12\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1706,
        "problem_description": "This question requires finding the given X from the input of N integers. If found, output the first occurrence of X (counting from 1); if not found, return -1.",
        "function_declaration": "int findElement(int n, int x, int a[])",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[110];\n\n// function start\n\n// function end\n\nint main() {\n    int n, x, i;\n    cin >> n;\n    for (i = 1; i <= n; i++)\n        cin >> a[i];\n    cin >> x;\n    // calling start\n    int result = findElement(n, x, a);\n    // calling end\n    if (result != -1)\n        cout << result << endl;\n    else\n        cout << \"Not Found\" << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 4 2 3 5\\n3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1716,
        "problem_description": "Output all permutations of natural numbers from 1 to n. Input n (1<=n<=9). Output all sequences of numbers composed of 1 to n, with each sequence on a separate line (Duplicate numbers are allowed in the sequence).",
        "function_declaration": "void generatePermutations(int n)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to generate all permutations of 1 to n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    //calling start\n    generatePermutations(n);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"1 1\\n1 2\\n2 1\\n2 2\"}]",
        "time_limit": 10000,
        "memory_limit": 256
    },
    {
        "id": 1846,
        "problem_description": "Given a sequence, initially empty, please support the following three operations: Given an integer x, add x to the sequence. Output the smallest number in the sequence. Delete the smallest number in the sequence (if there are multiple smallest numbers, only delete one). The first line of input is an integer, indicating the number of operations n. The next n lines represent each operation. Each line starts with an integer op indicating the operation type. If op = 1, there is an integer x following it, indicating that x should be added to the sequence. If op = 2, it means to output the smallest number in the sequence. If op = 3, it means to delete the smallest number in the sequence. If there are multiple smallest numbers, only delete one. For 100% of the data, it is guaranteed that 1 ≤ n ≤ 10^6, 1 ≤ x < 2^31. For each operation 2, output one line with an integer representing the answer.",
        "function_declaration": "void processOperations(int n)",
        "code_context": "#include <iostream>\n#include <queue>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    //calling start\n    processOperations(n);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2\\n1 5\\n2\\n3\\n2\", \"output\": \"2\\n5\\n\"}]",
        "time_limit": 5000,
        "memory_limit": 256
    },
    {
        "id": 2309,
        "problem_description": "Little Ai and Little Ming are playing a game, and the goal of each person is to score as many points as possible for themselves. The game consists of $n$ rounds, and each round corresponds to a score, given before the game starts, denoted as $a_1, a_2, ..., a_n$. In each round, the person with the flowers can make a choice: she can choose to keep the flowers. In this case, the score of this round will be given to the other person, and when the next round comes, the flowers will still be in her hands; she can choose to take away the score of this round. In this case, when the next round comes, the flowers will belong to the other person, but the score of this round will be hers. Before the game starts, the flowers are in Little Ai's hands. If both sides use the best strategy to score as many points as possible, how many points can Little Ai score? Output the maximum score that Little Ai can obtain.",
        "function_declaration": "int maxScore(vector<int>& a)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n\n    // Calling the function to find the maximum score that Little Ai can get\n    //calling start\n    int maxScoreA = maxScore(a);\n    //calling end\n\n    cout << maxScoreA << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n5 2 7 3\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1752,
        "problem_description": "There is a building with a total of N (1 ≤ N ≤ 200) floors. Each floor of the building has an elevator, and there is a number Ki (0 ≤ Ki ≤ N) on the i-th (1 ≤ i ≤ N) floor. The elevator has only four buttons: open, close, up, and down. The number of floors to go up or down is equal to the number on the current floor. Of course, if the requirement cannot be met, the corresponding button will malfunction. For example, 3 3 1 2 5 represents Ki (K1=3, K2=3, ...) starting from the first floor. On the first floor, pressing the up button will go to the 4th floor, and pressing the down button will not work because there is no -2 floor. So, how many times do you need to press the buttons at least from floor A to floor B? Input three positive integers, representing N A B. All data is guaranteed to be 1 ≤ A,B ≤ N. Input N positive integers, representing Ki. Output the minimum number of button presses. If it is not possible to reach, output -1.",
        "function_declaration": "int calculateButtonPress(int N, int A, int B, vector<int> K)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int N, A, B;\n    cin>>N>>A>>B;\n    vector<int> K(N);\n    for(int i=0; i<N; i++){\n        cin>>K[i];\n    }\n    // calling start\n    int result = calculateButtonPress(N, A, B, K);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"5 1 5\\n3 3 1 2 5\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1988,
        "problem_description": "How many pencils can Bo Xiaoyu buy at most with the given amount of money, a yuan b jiao, if the price of one pen is 1 yuan 9 jiao?",
        "function_declaration": "int calculatePrice(int a, int b)",
        "code_context": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){\n    int a,b;\n    scanf(\"%d %d\",&a,&b);\n\n    //calling start\n    int result = calculatePrice(a, b);\n    //calling end\n\n    printf(\"%d\", result);\n    return 0;\n}",
        "example": "[{\"input\": \"10 3\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1984,
        "problem_description": "It is a place that exists somewhere unknown and at an unspecified time. A deity named Conless established his kingdom there. To better manage his territory, he decided to reform the calendar and adopt a new system of measuring time. The unique aspect of Conless's domain is that a day consists of only 10000 seconds. To make it easier to remember, Conless stipulated that a year is divided into 20 months numbered from 0 to 19, and each month is further divided into 20 days numbered from 0 to 19.\nThe current date is Year 0, Month 0, Day 0, and the time is 0 seconds. Conless has made some plans and wants to complete a certain task by a specific date. Completing this task requires a certain amount of time, denoted as 't'. Conless wants to know whether the task can be completed before the deadline. Please write a program to help him answer this question.\nThe input consists of two integers and a four-digit decimal number, representing the year 'y', month 'm', and day 'd' (where 'd' is guaranteed to be greater than or equal to 0 and less than 20), and an integer representing the required time 't'. All input values are guaranteed to be valid, and no input time 't' will exactly match the given year, month, and day.\nTo prevent the impact of floating-point errors, this problem will not have cases where 't' exactly matches the input year, month, and day.\n",
        "function_declaration": "bool check(long long y, long long m, double d, long long t)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    long long y,m,t;\n    double d;\n    scanf(\"%lld%lld%lf%lld\",&y,&m,&d,&t);\n    // calling start\n    bool result = check(y, m, d, t);\n    // calling end\n    if(result) {\n        printf(\"Yes\");\n    } else {\n        printf(\"No\");\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"0 0 1.0000\\n10001\", \"output\": \"No\"}, {\"input\": \"100000000 1 1.0000\\n1919810114514\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2148,
        "problem_description": "The conditions for running for class monitor are: among the scores of Chinese, mathematics, and English, at least two of them are greater than or equal to 90, and physical education cannot be lower than 85. Given Xiaoi's scores in Chinese, mathematics, English, and physical education, can she run for class monitor? If she can, return 1; otherwise, return 0.",
        "function_declaration": "int countQualified(int a, int b, int c, int d)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  \n  // calling start\n  int result = countQualified(a, b, c, d);\n  // calling end\n  \n  if (result == 1)\n    cout << \"Qualified\";\n  else\n    cout << \"Not qualified\";\n}",
        "example": "[{\"input\": \"91\\n96\\n99\\n89\", \"output\": \"Qualified\"}, {\"input\": \"84\\n91\\n85\\n95\", \"output\": \"Not qualified\"}, {\"input\": \"94\\n98\\n97\\n80\", \"output\": \"Not qualified\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2199,
        "problem_description": "In a country, there is a need to allocate resources between various cities. Given an integer $n$, representing the number of cities in this country. Also given a sequence of integers $a_1,a_2,?,a_n$, representing the amount of resources produced or consumed in each city - positive numbers indicate that the corresponding city produces resources, with their absolute values representing the production quantity; negative numbers indicate that the corresponding city consumes resources, with their absolute values representing the consumption quantity. The road network between these cities forms a straight line, with only adjacent cities connected by roads. Transporting one unit of resources from one city to an adjacent city will generate one unit of workload. Please design a plan to ensure that the required resources for each city can be achieved, and the total workload of transportation is minimized. Output the minimum total workload generated by the optimal transportation plan. The input data guarantees that the total production quantity and consumption quantity are equal, i.e., $a_1+a_2+?+a_n=0$.",
        "function_declaration": "long long calculateCost(int n, int* arr)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n\tint n;\n\tcin >> n;\n\tint* arr = new int[n];\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> arr[i];\n\t}\n\t// calling start\n\tlong long cost = calculateCost(n, arr);\n\t// calling end\n\tcout << cost;\n\tdelete[] arr;\n}",
        "example": "[{\"input\": \"4\\n-10 10 20 -20\", \"output\": \"30\"}, {\"input\": \"5\\n100 -10 -20 -30 -40\", \"output\": \"300\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2320,
        "problem_description": "There are $n$ integers $a_1, a_2, ..., a_n$. Initially, all numbers are 0. Next, based on the input data, $q$ modification operations will be performed in sequence: an addition modification operation starts with the character '+', followed by two integers $p$ and $d$, indicating that the $p$-th term of the sequence will increase by $d$; a multiplication modification operation starts with the character '*', followed by an integer $m$, indicating that each term of the sequence will be multiplied by $m$. Please output the modified sequence. Since the answer may be large, output the remainder of each number modulo 1,000,000,007.",
        "function_declaration": "vector<int> modifiedSequence(int n, int q, vector<pair<char, pair<int, int>>>& queries)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst int MOD = 1000000007;\n\n// Function to perform modifications on the sequence\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<pair<char, pair<int, int>>> queries(q);\n    for (int i = 0; i < q; i++) {\n        cin >> queries[i].first;\n        if (queries[i].first == '+') {\n            cin >> queries[i].second.first >> queries[i].second.second;\n        } else if (queries[i].first == '*') {\n            cin >> queries[i].second.first;\n        }\n    }\n\n    //calling the function to perform modifications on the sequence\n    //calling start\n    vector<int> result = modifiedSequence(n, q, queries);\n    //calling end\n\n    for (int i = 0; i < n; i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3 5\\n+ 1 3\\n* 10\\n+ 2 6\\n+ 3 9\\n* 5\", \"output\": \"150 30 45\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1369,
        "problem_description": "Find the greatest common divisor of two positive integers a and b.",
        "function_declaration": "int gcd(int a, int b)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  \tint a = 0, b = 0;\n  \tcin >> a >> b;\n  \t// calling start\n  \tcout << gcd(a, b) <<'\\n';\n  \t// calling end\n\treturn 0;\n}",
        "example": "[{\"input\": \"12 18\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1576,
        "problem_description": "Using two cout statements, output two lines, each with one sentence: This is line No.1.\nThis is line No.2.",
        "function_declaration": "void printLines()",
        "code_context": "#include <iostream>\nusing namespace std; \n\n//function start\n\n//function end\n\nint main() {\n    //calling start\n    printLines();\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"无输入\", \"output\": \"This is line No.1.\\nThis is line No.2.\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1940,
        "problem_description": "Given a character, construct a diamond with a diagonal length of 5 characters, placed diagonally.",
        "function_declaration": "void printDiamond(char a)",
        "code_context": "#include <iostream> \nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    char a;\n    cin >> a;\n\n    // calling start\n    printDiamond(a);\n    // calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"*\", \"output\": \"  *\\n ***\\n*****\\n ***\\n  *\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2348,
        "problem_description": "Given a binary number, convert it to decimal and output it.",
        "function_declaration": "int calculateBinaryToDecimal(string s)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nstring s; \n\n//function start\n\n//function end\n\nint main(){\n    cin>>s;\n    //calling start\n    n = calculateBinaryToDecimal(s);\n    //calling end\n    cout<<n; \n}",
        "example": "[{\"input\": \"10000000010\", \"output\": \"1026\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1684,
        "problem_description": "Jinming is very happy today because he is about to receive the keys to the new house his family purchased. There is a spacious room in the new house that is exclusively for him. What makes him even happier is that his mother told him yesterday, \"You can decide which items to buy for your room and how to decorate it. As long as it doesn't exceed N yuan.\" Early this morning, Jinming started budgeting, but he realized that he wants to buy too many things, which will definitely exceed the N yuan limit set by his mother. Therefore, he assigned an importance level to each item, ranging from 1 to 5, with 5 being the most important. He also found the prices of each item on the internet (all prices are integers). He hopes to maximize the sum of the product of each item's price and importance level, under the condition that it does not exceed N yuan (it can be equal to N yuan). Let the price of the j-th item be w[j], and the importance level be v[j]. If he selects k items, with the corresponding indices being j1, j2, ..., jk, then the desired sum is: w[j1] * v[j1] + w[j2] * v[j2] + ... + w[jk] * v[jk]. (where * denotes multiplication). Please help Jinming design a shopping list that meets the requirements and return a positive integer, which is the maximum value of the sum of the product of the price and importance level of the items that do not exceed the total amount of money (<100000000).",
        "function_declaration": "int calculateMaxValue(int m, int n, int w[], int v[], int f[])",
        "code_context": "#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint w[35],v[35],f[50005]; //w代表价格，v代表价值\nint n,m;\n\n//function start\n\n//function end\n\nint main()\n{\n    scanf(\"%d %d\",&m,&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d %d\",&w[i],&v[i]); //输入每个商品的价格和价值\n    }\n    //calling start\n    int result = calculateMaxValue(m, n, w, v, f);\n    //calling end\n    printf(\"%d\",result); //输出\n    return 0;\n}",
        "example": "[{\"input\": \"1000 5\\n800 2\\n400 5\\n300 5\\n400 3\\n200 2\", \"output\": \"3900\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 2074,
        "problem_description": "Translation: Xiao Wan recently learned about division. He discovered the power of division. He randomly wrote a positive integer 1000 and continuously divided it by 2. He was surprised to find that after dividing 1000 by 10 times 2, it became 0. 1000 -> 500 -> 250 -> 125 -> 62 -> 31 -> 15 -> 7 -> 3 -> 1 -> 0\nThe difference between 1000 and 10 is significant. He wants to know if this is a general rule, so he gives you an integer and asks you to output how many times it needs to be divided by 2 to become 0.",
        "function_declaration": "int countBits(int x)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n = 0;\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint x = 0;\n\t\tcin >> x;\n\t\t// calling start\n\t\tint t = countBits(x);\n\t\t// calling end\n\t\tcout << t << \"\\n\";\n\t}\n\treturn 0;\n}",
        "example": "[{\"input\": \"4\\n0 1 2 1000\\n\", \"output\": \"0\\n1\\n2\\n10\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2271,
        "problem_description": "Given n integers, output the average value.",
        "function_declaration": "double calculateAverage(vector<int>& nums)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to calculate the average of n integers\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Calculate the average\n    //calling start\n    double average = calculateAverage(nums);\n    //calling end\n\n     printf(\"%.2lf\", average);\n\n    return 0;\n}",
        "example": "[{\"input\": \"5 \\n5 4 3 2 1\", \"output\": \"3.00\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1650,
        "problem_description": "Given a graph with n vertices, numbered from 1 to n, and the adjacency matrix of the graph, please perform a depth-first search starting from vertex x and output the order of visited vertices. If there are multiple paths from any starting point, the vertex with the smallest index should be visited first. Also, ensure that the final traversal order is in lexicographically smallest order. For all test data, n ≤ 100. The input consists of the first line containing two integers n and x, where n represents the number of vertices in the graph and x represents the starting vertex for traversal. The next n lines each contain n integers, representing the adjacency matrix of the graph. A value of 0 indicates no edge, while a value of 1 indicates an edge. Output a single line containing the depth-first traversal sequence starting from vertex x, with each number separated by a space.",
        "function_declaration": "void dfs(int node, const vector<vector<int>>& graph, vector<bool>& visited, vector<int>& traversal)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to perform Depth First Search (DFS) from a given node\n//function start\n\n//function end\n\nint main() {\n    int n, x;\n    cin >> n >> x;\n\n    vector<vector<int>> graph(n, vector<int>(n));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            cin >> graph[i][j];\n        }\n    }\n\n    vector<bool> visited(n + 1, false);\n    vector<int> traversal;\n\n    //calling start\n    dfs(x, graph, visited, traversal);\n    //calling end\n\n    for (int node : traversal) {\n        cout << node << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4 1\\n0 1 0 1\\n1 0 1 1\\n0 1 0 1\\n1 1 1 0\", \"output\": \"1 2 3 4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1687,
        "problem_description": "Given a sequence a of length n, select a continuous and non-empty segment from it to maximize the sum of this segment, and return the maximum sum.",
        "function_declaration": "int maxSubarraySum(int n, vector<int>& a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> a(n);\n    for(int i=0; i<n; i++){\n        cin>>a[i];\n    }\n    // calling start\n    int result = maxSubarraySum(n, a);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"7\\n2 -4 3 -1 2 -4 3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2273,
        "problem_description": "Given n integers and an integer q representing the number of queries, each query provides an integer a. The question is whether it is possible to select some of the n integers and find their sum such that the sum is not less than a.",
        "function_declaration": "vector<bool> checkSum(vector<int>& nums, int q)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to check if it's possible to select some integers and their sum is not less than a\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Check if it's possible to select some integers and their sum is not less than a\n    //calling start\n    vector<bool> result = checkSum(nums, q);\n    //calling end\n\n    // Output the results\n    for (int i = 0; i < q; i++) {\n        if (result[i]) {\n            cout << \"Yes\" << endl;\n        } else {\n            cout << \"No\" << endl;\n        }\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"6 3\\n3 -8 7 0 -6 6\\n16\\n-7\\n17\", \"output\": \"Yes\\nYes\\nNo\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1840,
        "problem_description": "Assuming that at a weekend dance party, men and women enter the dance hall and form separate queues. When the dance starts, one person is selected from the front of the men's queue and one person is selected from the front of the women's queue to form a dance couple. It is stipulated that each dance can have one couple. If the initial number of people in the two queues is different, the unmatched individuals in the longer queue will wait for the next round of dances. Now, a program is required to simulate the above dance partner matching problem. Input three integers m, n, k, representing the number of men, the number of women, and the number of rounds of dances, respectively. Output the pairing scheme for each round of dances, with each line displaying the indices of a pair consisting of a gentleman and a lady, separated by a space.",
        "function_declaration": "void dancePartners(int m, int n, int k)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int m, n, k;\n    cin >> m >> n >> k;\n //calling start\n    dancePartners(m, n, k);\n //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"2 4 6\", \"output\": \"1 1\\n2 2\\n1 3\\n2 4\\n1 1\\n2 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1848,
        "problem_description": "Calculate the area of the figure enclosed by 1 in the following diagram using programming. The calculation method is to count the number of intersections between horizontal and vertical lines within the closed curve formed by 1. As shown below, in a 10*10 two-dimensional array, 1 encloses 2 points; therefore, the area is 2. 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 1 0 1 0 0 0 0 0 0\n0 1 0 1 0 0 0 0 0 0\n0 0 1 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 0 0, Input consists of ten lines, each containing ten 0s or 1s, representing the map. Output an integer representing the area enclosed by 1.",
        "function_declaration": "int calculateArea(int grid[10][10])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int grid[10][10];\n\n    // Input grid\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            cin >> grid[i][j];\n        }\n    }\n\n    //calling start\n    int area = calculateArea(grid);\n    //calling end\n\n    cout << area << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 1 0 0 0 0 0 0 0\\n0 1 0 1 0 0 0 0 0 0\\n0 1 0 1 0 0 0 0 0 0\\n0 0 1 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 1 0 0\\n0 0 0 0 0 0 0 0 0 0\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2111,
        "problem_description": "Given an integer a, output the opposite number of a (i.e., -a).",
        "function_declaration": "long long calculateNegative(long long a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long a;\n    cin>>a;\n    // calling start\n    long long result = calculateNegative(a);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"-3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2338,
        "problem_description": "Define the symbol $\\gcd(a,b)$ to represent the greatest common divisor of $a$ and $b$. $\\gcd$ satisfies the following properties: $\\gcd(a,b)=\\gcd(b,a)$ if $a = 0$, $\\gcd(a,b)=\\gcd(0,b)=b$. If $a<b$, $\\gcd(a,b)=\\gcd(a,b-a)$. Please calculate the greatest common divisor.",
        "function_declaration": "int gcd(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint a, b;\n\tcin >> a >> b;\n\t// calling start\n\tint result = gcd(a, b);\n\t// calling end\n\tcout << result << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"33 121 \", \"output\": \"11\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1699,
        "problem_description": "Fibonacci sequence refers to a sequence of numbers where the first two numbers are both 1, and each subsequent number is the sum of the previous two numbers. Write a program that takes a positive integer n as input and outputs the nth number in the Fibonacci sequence.",
        "function_declaration": "int fibonacci(int n)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a;\n    cin >> a;\n    // calling start\n    int result = fibonacci(a);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1979,
        "problem_description": "Can you help Little Fish output a decimal number with variable length? The input is a decimal number b (within the range of float) and a length n ($1\\leq n\\leq 20$). Output a decimal part of b with a length of n (keeping the integer part). Note: rounding and padding with trailing zeros are required.",
        "function_declaration": "void printFixedPrecision(double b, int n)",
        "code_context": "#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<iostream>\n#include<iomanip>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+1;\nconst int INF=1e9+7;\n#define test(x) cout<<(x)<<endl;\n\n// function start\n\n// function end\n\nint main()\n{\n    int n;\n    double b;\n    cin>>b>>n;\n    // calling start\n    printFixedPrecision(b, n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"1.111 3\", \"output\": \"1.11\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1952,
        "problem_description": "Input the quantities of dogs and cats respectively, and output the total number.",
        "function_declaration": "int calculatePet(int dog, int cat)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int dog;\n    int cat;\n    int pet;\n    cout << \"读入狗和猫的数量\\n\";\n    cin >> dog;\n    cin >> cat; \n    // calling start\n    pet = calculatePet(dog, cat);\n    // calling end\n    cout << \"BOYU宠物店的宠物总数为\" << pet; \n  \treturn 0;\n}",
        "example": "[{\"input\": \"14 16\", \"output\": \"读入狗和猫的数量\\nBOYU宠物店的宠物总数为30\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1736,
        "problem_description": "The new semester has started, and Xiao Ha is Xiao Heng's new classmate. Xiao Heng asked Xiao Ha for his QQ number, but Xiao Ha naturally wouldn't tell him directly. So Xiao Ha gave Xiao Heng a string of encrypted numbers, and also told him the decryption rules. The rules are as follows: first, delete the first number, then move the second number to the end of the string, then delete the third number and move the fourth number to the end of the string, then delete the fifth number... until there is only one number left, delete the last number as well. According to the order of deletion just now, connect these deleted numbers together, and that will be Xiao Ha's QQ number. Now, please help Xiao Heng. Xiao Ha gave Xiao Heng an encrypted string of numbers: 6 3 1 7 5 8 9 2 4. After decryption, Xiao Ha's QQ number should be 6 1 5 9 4 7 2 8 3. Given n integers as the encrypted QQ number, each integer is between 1 and 9. For 100% of the data, 1 ≤ n ≤ 10^5. Output the decrypted QQ number.",
        "function_declaration": "deque<int> decryptQQ(deque<int> encryptedQQ) \n",
        "code_context": "#include <iostream>\n#include <deque>\n\nusing namespace std;\n\n// Function to decrypt the QQ number\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    deque<int> qq;\n\n    for (int i = 0; i < n; ++i) {\n        int num;\n        cin >> num;\n        qq.push_back(num);\n    }\n    //calling start\n    deque<int> decryptedQQ = decryptQQ(qq);\n    //calling end\n    for (int num : decryptedQQ) {\n        cout << num << \" \";\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"9\\n6 3 1 7 5 8 9 2 4\", \"output\": \"6 1 5 9 4 7 2 8 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1581,
        "problem_description": "Please use the switch statement to implement the following function: In the year 2021, it is a common year. Input a month (1~12) and output the number of days in that month of the year 2021.",
        "function_declaration": "string getMonthDays(int a)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    cout << getMonthDays(a);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"28\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1661,
        "problem_description": "Divide the numbers 1, 2, ..., 9 into three groups to form three three-digit numbers, and make the ratio of these three numbers a : b : c. Find all the three-digit numbers that satisfy this condition. If there is no solution, output No!!!. Input three numbers, a, b, c. Output several lines, each line containing 3 numbers. Sort the first number in each line in ascending order.",
        "function_declaration": "void generateValidCombinations(int a, int b, int c)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to generate all valid combinations of three 3-digit numbers with the given ratio\n//function start\n\n//function end\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n\n    //calling start\n    generateValidCombinations(a, b, c);\n    //calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"1 2 3\", \"output\": \"192 384 576\\n219 438 657\\n273 546 819\\n327 654 981\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2260,
        "problem_description": "Question: Nijika's sister Ijichi Seika is assessing the ending band to determine if they qualify to perform in the next live show. The ending band needs to complete a trial performance, and Seika will evaluate the band's guitar level, bass level, vocal level, and jazz drum level. Now that the trial performance has just ended, the ending band performed an original song called \"Guitar and Loneliness and Blue Planet.\" Please help Seika determine if the ending band passed the assessment. Seika has already scored the ending band's guitar level, bass level, vocal level, and jazz drum level, with scores of $a, b, c, d$ respectively. The overall score of the band is calculated by the following formula: $score = 100 \\times (\\frac{a}{100} \\cdot \\frac{b}{100} \\cdot \\frac{c}{100} \\cdot \\frac{d}{100})$. Round the score to the nearest integer, and if the score is not less than 60, it is considered that the ending band passed the assessment.",
        "function_declaration": "bool checkPass(int a, int b, int c, int d)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a,b,c,d;\n    cin>>a>>b>>c>>d;\n    // calling start\n    bool result = checkPass(a, b, c, d);\n    // calling end\n    if(result) cout<<\"pass\";\n    else cout<<\"fail\";\n}",
        "example": "[{\"input\": \"90 90 90 90\", \"output\": \"pass\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2351,
        "problem_description": "Given n positive integers, choose two numbers such that their product does not exceed m, and maximize the product under this condition. Output a number that represents the maximum product satisfying the requirements of the question.",
        "function_declaration": "long long findMaxProduct(long long n, long long m, long long a[])",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nlong long a[200010]; \n\n// function start\n\n// function end\n\nint main(){\n\tlong long n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i) cin>>a[i];\n\t\n\t// calling start\n\tlong long result = findMaxProduct(n, m, a);\n\t// calling end\n\t\n\tcout<<result;\n}",
        "example": "[{\"input\": \"4 27\\n3 9 4 7\", \"output\": \"27\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1549,
        "problem_description": "Input two numbers, output their sum. When summing two variables or constants, use + to connect them. For example, to find the sum of variable a and constant 2, it can be written as a + 2.",
        "function_declaration": "int add(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // calling start\n    cout << add(a, b);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"1 2\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2179,
        "problem_description": "Little Wan is taking Little Orange to play hopscotch again! There are $n$ squares on the square, numbered $1,2,\\cdots,n$ in order. Each square is marked with a square number, and they are all different from each other. Little Wan and Little Orange take turns playing the game. In each round, the player randomly selects a square that has not been jumped to before, and then, based on the number written on the square, determines which square to move to next. When they jump to a square that has already been passed, their turn ends. Little Orange takes the first turn. When a person finishes their turn, there are no more squares left to be jumped on, and the other person loses. Please help Little Wan determine if he can win! Input an integer $n$, representing the number of squares. $1\\le n\\le 10^6$. There are $n$ integers $a_i$, $1\\le i \\le n$ and they are all different from each other. If Little Wan wins, output \"win\", otherwise output \"uim\".",
        "function_declaration": "bool canWin(vector<int>& grid) ",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> grid(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        cin >> grid[i];\n    }\n\n    //calling start\n    if (canWin(grid)) {\n        cout << \"win\" << endl;\n    } else {\n        cout << \"uim\" << endl;\n    }\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n2 1 3\", \"output\": \"win\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2116,
        "problem_description": "Little A and Little B are playing a matching game. Matching refers to both players revealing a card face down at the same time, and the player with the higher number on the card wins. At the beginning of the game, Little A and Little B each have n cards. In each round, both players simultaneously play one card for matching, and the winner earns 2 points. If it's a tie, both players earn 1 point. After n rounds, both players have played all their cards and the game ends. You have already seen both players' cards in advance. Now Little A wants you to tell him the highest score he can get when the game ends. Input list a containing n integers represents the numbers on Little A's n cards. List b containing n integers represents the numbers on Little B's n cards. Output an integer representing the highest score Little A can get.",
        "function_declaration": "int calculateMaxScore(vector<int>& a, vector<int>& b)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> a(n), b(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    for (int i = 0; i < n; i++) {\n        cin >> b[i];\n    }\n\n    //calling start\n    int maxScore = calculateMaxScore(a, b);\n    cout << maxScore << endl;\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n1 9 8\\n9 3 10\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1761,
        "problem_description": "The break time is here, and some students have already lined up in a queue according to their heights, from shortest to tallest. At this moment, a new student named Xiaobai joins the queue from the back. The teacher, along with Xiaobai, walks from the end of the queue to the front, comparing Xiaobai's height with the other students' heights. When the first student shorter than Xiaobai is found, the teacher asks Xiaobai to stand behind that student, and the rest of the students move back one position. Then, another new student named Xiaohei joins. The teacher repeats the same process as before to find a position for Xiaohei. This process continues for more new students... Please simulate the above process to sort n numbers.",
        "function_declaration": "void sortArray(int a[], int n)",
        "code_context": "#include <bits/stdc++.h>\n#define N 1550\nusing namespace std;\nint a[N], n;\n\n//function start\n\n//function end\n\nint main() {\n    cin >> n; \n    for (int i = 1; i <= n; ++i) cin >> a[i];\n    \n    //calling start\n    sortArray(a, n);\n    //calling end\n    \n    for (int i = 1; i <= n; ++i) \n        cout << a[i] << ' ';\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n7 4 6 8 3\", \"output\": \"3 4 6 7 8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2297,
        "problem_description": "Reverse Polish notation is a postfix expression, defined as follows: Single digits such as 6, 8, etc. are postfix expressions; If $e_1$ and $e_2$ are both postfix expressions, then $e_1 e_2 +$, $e_1 e_2 -$, $e_1 e_2 *$ are all postfix expressions; Expressions that do not satisfy the above two rules are not postfix expressions. Given a postfix expression (guaranteed to be valid), please calculate the value of the expression and output its remainder when divided by 10. Note that for convenience, we have omitted division and also specified that the numbers appearing in the expression can only consist of single digits.",
        "function_declaration": "int evaluatePostfix(string postfix) ",
        "code_context": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\n// Function to evaluate the given postfix expression and return the result modulo 10\n//function start\n\n//function end\n\nint main() {\n    string postfix;\n    getline(cin, postfix);\n\n    // Calling the function to evaluate the postfix expression and get the result modulo 10\n    //calling start\n    int result = evaluatePostfix(postfix);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3 4 +\", \"output\": \"7\"}, {\"input\": \"2 3 3 + *\", \"output\": \"12\"}, {\"input\": \"1 2 * 3 + 4 * 5 - 6 + 7 * 8 - 9 +\", \"output\": \"8\"}, {\"input\": \"1 5 -\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1842,
        "problem_description": "General text editors have the function of searching for words, which can quickly locate the position of a specific word in the article, and some can also count the number of times a specific word appears in the article. Now, please program to implement this function. The specific requirements are as follows: given a word, please output the number of times it appears in the given article and the position of the first occurrence. Note: when matching words, it is not case-sensitive, but it requires a complete match, that is, the given word must be exactly the same as a independent word in the article without considering the case. If the given word is only part of a word in the article, it is not considered a match. The output is only one line. If the given word is found in the article, output two integers separated by a space, which are the number of times the word appears in the article and the position of the first occurrence (that is, the position of the first letter of the word in the article, starting from 0); if the word does not appear in the article, return the integer -1.",
        "function_declaration": "pair<int, int> findWordInText(const string& text, const string& word)",
        "code_context": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    string text;\n    string word;\n    getline(cin, text); // Read the whole line as text\n    cin >> word;\n\n    // Convert both text and word to lowercase for case-insensitive matching\n    transform(text.begin(), text.end(), text.begin(), ::tolower);\n    transform(word.begin(), word.end(), word.begin(), ::tolower);\n\n    //calling start\n    pair<int, int> result = findWordInText(text, word);\n    //calling end\n    if (result.first!= -1)\n        cout << result.first << \" \" << result.second;\n    else\n        cout << -1;\n\n    return 0;\n}",
        "example": "[{\"input\": \"To\\nto be or not to be is a question\", \"output\": \"2 0\"}, {\"input\": \"to\\nDid the Ottoman Empire lose its power at that time\", \"output\": \"-1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1898,
        "problem_description": "1 for loop can print: 12345678910. for (i = 1; i <= 10; i++) { \n    cout << i;\n} \n3 for loops can print: 12345678910\n12345678910\n12345678910\nfor (i = 1; i <= 10; i++) { \n    cout << i;\n} \ncout << endl;\nfor (i = 1; i <= 10; i++) { \n    cout << i;\n} \ncout << endl;\nfor (i = 1; i <= 10; i++) { \n    cout << i;\n} \ncout << endl;\nPlease rewrite the above code using nested for loops.",
        "function_declaration": "void printNumbers()",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    printNumbers();\n    // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"12345678910\\n12345678910\\n12345678910\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1783,
        "problem_description": "Little A and Little B are eating snacks together. They drew $n$ boxes side by side on the ground, and put different numbers of candies in each box. Little B asks Little A, how many candies are there in total from the $x$th box to the $y$th box?",
        "function_declaration": "int calculateSum(int x, int y, int a[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint n, m, x, y, a[110];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; ++i)\n        cin >> a[i];\n    cin >> m;\n    while (m--) {\n        cin >> x >> y;\n        // calling start\n        int sum = calculateSum(x, y, a);\n        // calling end\n        cout << sum << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 3 2 5 0\\n4\\n1 2\\n2 3\\n1 5\\n3 3\", \"output\": \"4\\n5\\n11\\n2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2305,
        "problem_description": "There is a road that needs to be paved with tiles. This road consists of $n\\times2$ squares. There are two types of tiles available: one type is of size $1\\times2$, which can cover exactly two squares, and the other type is of size $2\\times2$. There is no limit to the number of tiles of each type. Please calculate the number of ways to fill the road with tiles. Since the number of possible solutions may be large, output the remainder when divided by 1,000,000,007.",
        "function_declaration": "int calculate_f(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    int result = calculate_f(n);\n    //calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"3\"}, {\"input\": \"8\", \"output\": \"171\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2258,
        "problem_description": "A smooth processing of an image involves many complex algorithms. For simplicity, we simplify an image as an n by m integer matrix. The basic operation of image smoothing is as follows: for an integer at the i-th row and j-th column, it is replaced by the floor value of the average of the integers within a 3x3 square centered at it. If the integer is at the edge or corner of the matrix, it is replaced by the floor value of the average of the integers within the intersection of the 3x3 square and the matrix. The input consists of the first line with three positive integers n, m, and k, representing the height, width, and number of smoothing operations of the matrix, respectively. The following n lines each contain m integers, representing the initial integers at each position. It is guaranteed that all input integers have an absolute value not exceeding 100 and are valid. Now, please output the final result of the matrix after k times of smoothing, with n lines and m integers per line, representing the integers after k times of smoothing at each position.",
        "function_declaration": "vector<vector<int>> imageSmoothing(int n, int m, int k, vector<vector<int>>& matrix)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to perform the image smoothing operation\n//function start\n//function end\n\nint main() {\n    int n, m, k;\n    cin >> n >> m >> k;\n\n    vector<vector<int>> matrix(n, vector<int>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n\n    // Calling the function to perform image smoothing\n    //calling start\n    vector<vector<int>> result = imageSmoothing(n, m, k, matrix);\n    //calling end\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"2 4 1\\n1 2 3 4\\n5 6 7 8\", \"output\": \"3 4 5 5\\n3 4 5 5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2024,
        "problem_description": "Question in English: Darksharpless, who has OCD, wants to fill in the numbers in his hand to exactly eight digits (with leading zeros). Can you help him? Input a number n and complete it to an eight-digit number.",
        "function_declaration": "string formatNumber(int n)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main () {\n    int n = 0;\n    cin >> n;\n    // calling start\n    string result = formatNumber(n);\n    // calling end\n    cout << result << '\\n';\n    return 0;\n}",
        "example": "[{\"input\": \"1\", \"output\": \"00000001\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1997,
        "problem_description": "Little A and Little B are playing a number guessing game. The rules are as follows: Little B first thinks of a positive integer n and tells Little A. Then, in his mind, Little B thinks of a positive integer that is not greater than n. Each time, Little A can guess a number. If the guessed number is smaller than the number Little B is thinking of, Little B will answer \"guessed too small\", otherwise, he won't answer. Little A can also choose to stop guessing at any time and say the number he thinks Little B is thinking of. If he is correct, Little A wins; otherwise, Little A loses and the game ends. Now, Little B has already told Little A the value of n. Little A wants you to tell him the minimum number of guesses he needs to guarantee that, no matter what number Little B is thinking of, he will eventually win.",
        "function_declaration": "int calculateLog(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int t,n;\n    cin>>t;\n    while(t--){\n        cin>>n;\n        // calling start\n        int result = calculateLog(n);\n        // calling end\n        cout<<result<<endl;\n    }\n}",
        "example": "[{\"input\": \"2\\n1\\n8\", \"output\": \"0\\n3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1944,
        "problem_description": "Given three integers a, b, c, calculate the value of the expression $\\frac{(a+b)}{c}$.",
        "function_declaration": "float calculate(float a, float b, float c)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    float a,b,c;\n    scanf(\"%f%f%f\",&a,&b,&c);\n    // calling start\n    float result = calculate(a, b, c);\n    // calling end\n    printf(\"%.2f\", result);\n}",
        "example": "[{\"input\": \"0 1 2\", \"output\": \"0.50\"}, {\"input\": \"1 -1 1\", \"output\": \"0.00\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2264,
        "problem_description": "Bocchi is worried about the quota for the performance. Suddenly, she came up with a brilliant idea: why not just buy all the tickets for the quota herself! However, this would require a large amount of funds, so Bocchi wants to earn as much money as possible in the next period of work. Can you help her? Enter a total of m+1 lines, the first line contains two positive integers n, m, where n represents the total duration of Bocchi's work life, and m represents the number of work tasks that Bocchi can take. The next m lines, each line contains 3 positive integers l, r, s, representing a work task that starts at time l and ends at time r, and the reward for completing it is s. Bocchi can only work one job at a time, so any two work tasks $(l_1,r_1,s_1),(l_2,r_2,s_2)$ that Bocchi takes must satisfy $l_1 < r_1 \\le l_2 < r_2$ or $l_2 < r_2 \\le l_1 < r_1$ (in other words, the time intervals [l,r) of any two selected work tasks must not overlap). For 30% of the data, $m \\le 10$; for another 10% of the data, each work task satisfies $l = r - 1$; for another 20% of the data, each work task satisfies $s = 10000$; for the above parts and another 20% of the data (a total of 80% of the data), $n,m \\le 1000$; for 100% of the data, $n,m \\le 100000$, $1 \\le l < r \\le n$, $s \\le 20000$. Output a number, representing the maximum amount of money Bocchi can earn through work.",
        "function_declaration": "int calculateMaxEarnings(int n, int m, vector<pair<pair<int, int>, int>>& jobDetails)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<pair<pair<int, int>, int>> jobDetails(m + 1);\n    for (int i = 1; i <= m; ++i) {\n        cin >> jobDetails[i].first.first >> jobDetails[i].first.second >> jobDetails[i].second;\n    }\n\n    //calling start\n    int earnings = calculateMaxEarnings(n, m, jobDetails);\n    //calling end\n\n    cout << earnings << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"10 5\\n1 5 10000\\n3 6 12000\\n7 9 5000\\n8 10 4000\\n5 8 4000\", \"output\": \"18000\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2274,
        "problem_description": "Given a positive integer n, calculate $1+\\frac{1}{2\\sqrt{2}}+\\frac{1}{3\\sqrt{3}}+\\dots+\\frac{1}{n\\sqrt{n}}$.",
        "function_declaration": "double calculate_ans(long long n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long n;\n    cin>>n;\n    // calling start\n    double result = calculate_ans(n);\n    // calling end\n    printf(\"%.3lf\",result);\n}",
        "example": "[{\"input\": \"3\", \"output\": \"1.546\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2259,
        "problem_description": "The question is asking for the abbreviation of a member's name from the band \"结束乐队\" (End Band). The names of the members are Ijichi Nijika (伊地知虹夏), Yamada Ryo (山田凉), Goto Hitori (后藤一里), and Kita Ikuyo (喜多郁代). Given one of the member's names as input, the output should be the corresponding abbreviation. If the name is \"伊地知虹夏\", the output should be \"Nijika\"; if the name is \"山田凉\", the output should be \"Ryo\"; if the name is \"后藤一里\", the output should be \"Bocchi\"; if the name is \"喜多郁代\", the output should be \"Kita\".",
        "function_declaration": "string checkName(string a, string b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tstring a,b;\n\tcin>>a>>b; // 读入两个以空格分隔的字符串 \n\n\t// calling start\n\tstring result = checkName(a, b);\n\t// calling end\n\n\tif(result != \"\") cout<<result;\n\treturn 0; \n}",
        "example": "[{\"input\": \"Ijichi Nijika\", \"output\": \"Nijika\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2015,
        "problem_description": "Is it possible for you to determine whether a given non-negative integer is a perfect number? A perfect number, in the eyes of DarkSharpness, is defined as a number where the sum of the cubes of its digits is equal to the number itself. For example, for the number 153, the sum of the cubes of its digits is calculated as 1 * 1 * 1 + 5 * 5 * 5 + 3 * 3 * 3 = 153, making it a perfect number. However, for the number 201, the sum of the cubes of its digits is calculated as 2 * 2 * 2 + 0 * 0 * 0 + 1 * 1 * 1 = 9, which is not equal to 201, making it not a perfect number. Now, given any non-negative integer less than 1000, can you determine if it is a perfect number? If it is a perfect number, return \"Yes\"; otherwise, return \"No\".",
        "function_declaration": "string isPerfectNumber(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    // calling start\n    string result = isPerfectNumber(n);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"370\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2158,
        "problem_description": "Every day, signing in to an application can earn at least 1 point. If signed in the previous day, the score for that day is the previous day's score plus 1. The maximum score per day is 5. Given a character sequence consisting of Y and N, representing Xiao Ai's daily sign-in status, where Y represents signed in and N represents not signed in, please calculate the total score Xiao Ai can earn.",
        "function_declaration": "int calculateTotalScore(string signIns) ",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// Function to calculate the total score based on the sign-in pattern\n//function start\n\n//function end\n\nint main() {\n    string signIns;\n    cin >> signIns;\n    //calling start\n    int totalScore = calculateTotalScore(signIns);\n    //calling end\n    cout << totalScore << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"YYNYYYYYYNNNYYY\", \"output\": \"29\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1715,
        "problem_description": "Given a sequence of length n (1 <= n <= 100000), please sort them in ascending order. Note: Please use merge sort.",
        "function_declaration": "void sortArray(int n, int a[])",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    // calling start\n    sortArray(n, a);\n    // calling end\n    for (int i = 1; i <= n; i++)\n        cout << a[i] << \" \";\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n3 5 2 1 4\", \"output\": \"1 2 3 4 5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1904,
        "problem_description": "Please determine whether the password entered by the user consists entirely of Arabic numerals. Approach: First, read in the string, and then check each character to see if it is between '0' and '9'. First, set a flag to 1. During the checking process, if there is any character that does not meet the condition, set the flag to 0 and exit the loop. Finally, after the checking is complete, check the value of the flag.",
        "function_declaration": "bool checkPasswordValidity(char passWord[], int length)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  char passWord[21];\n  int length;\n  printf (\"请输入你的密码\\n\");\n  scanf (\"%s\", passWord);\n  length = strlen(passWord);\n  \n  // calling start\n  bool isValid = checkPasswordValidity(passWord, length);\n  // calling end\n  \n  if (isValid)\n      printf (\"你设置的密码有效\");\n  else\n      printf (\"你设置的密码无效\");\n  return 0;\n}",
        "example": "[{\"input\": \"1234567890\", \"output\": \"请输入你的密码\\n你设置的密码有效\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1772,
        "problem_description": "The meaning of a palindrome is that the result of reading the string \"from left to right\" is the same as reading it \"from right to left\", such as \"tenet\". Now there are several strings, please determine whether each of them is a palindrome.",
        "function_declaration": "bool isPalindrome(char* s)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nchar s[1010];\n\n// function start\n\n// function end\n\nint main() {\n    while (cin >> s) {\n        // calling start\n        bool result = isPalindrome(s);\n        // calling end\n        cout << (result ? \"Yes!\" : \"No!\") << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"abcba\\nabccba\\nabcd\", \"output\": \"Yes!\\nYes!\\nNo!\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1744,
        "problem_description": "There is a complete binary tree, where each node has a value, and it satisfies the following conditions: if the current node value is A, then the value of the left branch node is A*2+1, and the value of the right branch node is A*3+2. Initially, we only know the value of the root node, and now we provide the level and position of a node, hoping to find the value of that node.",
        "function_declaration": "long long calculateNodeValue(int root, int level, int position)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int root, n;\n    cin>>root>>n;\n    // calling start\n    for(int i=0; i<n; i++){\n        int level, position;\n        cin>>level>>position;\n        int nodeValue = calculateNodeValue(root, level, position);\n        cout<<nodeValue<<endl;\n    }\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"1 3\\n2 1\\n3 1\\n3 4\", \"output\": \"3\\n7\\n17\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2036,
        "problem_description": "Given an integer N, please reverse the digits of the number to obtain a new number. The new number should also be in the common form of an integer, which means that unless the given original number is zero, the highest digit of the new number obtained after reversal should not be zero.",
        "function_declaration": "int reverseNumber(int n)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\t// calling start\n\tint result = reverseNumber(n);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"123\", \"output\": \"321\"}, {\"input\": \"-380\", \"output\": \"-83\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2350,
        "problem_description": "According to legend, there is a game called Hanoi in the ancient Indian temple. In this game, there is a device made of copper with three poles (labeled A, B, C), and 64 gold discs are placed on pole A from bottom to top in descending order. The goal of the game is to move all the gold discs from pole A to pole C while maintaining their original order. The rules are as follows: only one disc can be moved at a time, and during the movement, the larger disc must always be at the bottom and the smaller disc on top on all three poles. The discs can be placed on any of the three poles during the operation. Little A is learning how to solve the Hanoi problem: let n be the number of discs to be moved, and the Hanoi problem can be solved in the following three steps: (1) using pole C as an intermediary, move discs 1 to n-1 from pole A to pole B; (2) move the remaining disc n from pole A to pole C; (3) using pole A as an intermediary, move discs 1 to n-1 from pole B to pole C. Now, given the number of discs n, with the discs numbered from 1 to n in ascending order, please output the process of moving the discs according to the solution learned by Little A. Output multiple lines to represent the movement process. For example, if disc 1 is moved from pole A to pole B, the corresponding output is \"1 A B\".",
        "function_declaration": "void solve(int n,char a,char b,char c)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tint n;\n\tcin>>n;\n\t// calling start\n\tsolve(n,'A','B','C');\n\t// calling end\n}",
        "example": "[{\"input\": \"2\", \"output\": \"1 A B\\n2 A C\\n1 B C\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1579,
        "problem_description": "Please use the switch statement to implement: input an English letter and output the corresponding grade level. A represents \"优秀\" (excellent); B represents \"良\" (good); C represents \"及格\" (pass); D represents \"不及格\" (fail). Output a string, \"perfect\" for excellent, \"great\" for good, \"good\" for pass, and \"miss\" for fail.",
        "function_declaration": "string evaluateGrade(char c)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    char c;\n    cin >> c;\n    // calling start\n    string result = evaluateGrade(c);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"A\", \"output\": \"perfect\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2166,
        "problem_description": "Given a positive integer $n$, please print a hollow square with * as the boundary, with exactly $n$ characters on each side.",
        "function_declaration": "void drawSquare(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n  int n;\n  cin >> n;\n  // calling start\n  drawSquare(n);\n  // calling end\n}",
        "example": "[{\"input\": \"5\", \"output\": \"*****\\n*   *\\n*   *\\n*   *\\n*****\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2180,
        "problem_description": "Little Wan and Little Orange discovered a game called \"Super Marbles\" at the level of ashes. The game is as follows: there are several chess pieces in an $n*n$ matrix. You can place marbles in a place without chess pieces, and then use them to shoot the chess pieces in the same row and column. Your score is the sum of the values of these chess pieces. Little Wan wants to show off his skills in front of Little Orange. Please help him determine his maximum score. Input a positive integer $n$, $1\\le n\\le 1000$. Next, $n$ lines, each line has $n$ columns. If there is a chess piece, it is a positive integer within the range of $10^4$, otherwise it is 0. Output one line representing the maximum score. If there is no place to place the marbles, output 0.",
        "function_declaration": "int maxScore(vector<vector<int>>& grid)",
        "code_context": "#include <bits/stdc++.h>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    vector<vector<int>> grid(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            cin >> grid[i][j];\n        }\n    }\n\n    //calling start\n    int result = maxScore(grid);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n1 1 1 0\\n1 2 2 1\\n1 2 2 1\\n0 1 1 1\\n\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2035,
        "problem_description": "You bought a box of n apples, unfortunately, there was a worm mixed in the box when you finished buying. The worm can eat one apple every x hours. Assuming the worm will not eat another apple before finishing one, how many intact apples will you have after y hours?",
        "function_declaration": "int calculateResult(int n, int x, int y)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint n, x, y;\n\tcin >> n >> x >> y;\n\t\n\t// calling start\n\tint result = calculateResult(n, x, y);\n\t// calling end\n\t\n\tcout << result;\n\t\n\treturn 0;\n}",
        "example": "[{\"input\": \"10 4 9\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2243,
        "problem_description": "Given an n-row m-column integer matrix. Request the sum of the specified matrix from row a column b to row c column d. Input the first line with two positive integers n, m. The following n lines each have m integers. The last line has four positive integers a, b, c, d. Ensure that all inputs are valid and the absolute value of the input integers does not exceed 100. Output the sum of the matrix from row a column b to row c column d.",
        "function_declaration": "int submatrixSum(int n, int m, vector<vector<int> >& matrix, int a, int b, int c, int d) ",
        "code_context": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    \n    vector<vector<int> > matrix(n, vector<int>(m));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            cin >> matrix[i][j];\n        }\n    }\n    \n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    //calling start\n    int result = submatrixSum(n, m, matrix, a, b, c, d);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"2 3\\n1 2 3\\n4 5 6\\n1 1 2 2\", \"output\": \"12\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1729,
        "problem_description": "The sieve method, also known as the sieve of Eratosthenes, is a method proposed by the famous Greek mathematician Eratosthenes for finding prime numbers. Compared to the exhaustive method, the sieve method is more efficient. Taking the example of finding prime numbers within 1 to 20, the specific steps are as follows: Put all numbers (2 to n) into the \"sieve\", remove 1; 2 is in the sieve, remove multiples of 2, 2, 4, ..., 20 (sieve); 3 is in the sieve, remove multiples of 3, 6, 9, ..., 18 (sieve); 4 is not in the sieve, do not perform removal (sieve) operation; ... 10 is not in the sieve, do not perform removal (sieve) operation.  Now please use the sieve method, input n, and find all prime numbers between 2 and n.",
        "function_declaration": "vector<int> sieve(int n)",
        "code_context": "#include<bits/stdc++.h>\n#include <vector>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    // calling start\n    vector<int> result = sieve(n);\n    // calling end\n    for(int i=0; i<result.size(); i++){\n        cout<<result[i]<<\" \";\n    }\n}",
        "example": "[{\"input\": \"20\", \"output\": \"2 3 5 7 11 13 17 19\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1598,
        "problem_description": "Input two numbers A and B, and calculate the quotient of A divided by B. Note: The test data guarantees that A can be evenly divided by B.",
        "function_declaration": "int division(int a, int b)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    // calling start\n    int result = division(a, b);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"4 2\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1896,
        "problem_description": "The following is a \"dong ci da ci\" implemented using a while loop. Please rewrite it using a for loop. Sample output \"dong ci da ci\"\ndong ci da ci\ndong ci da ci\ndong ci da ci\nwhile code: int i = 1;\nwhile (i <= 4) {\n   cout << \"dong ci da ci\\n\";\n   i++;\n}",
        "function_declaration": "void printMessage()",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    printMessage();\n    // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"动次打次\\n动次打次\\n动次打次\\n动次打次\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1633,
        "problem_description": "In a school, a teacher wants to arrange N students in a row. The students are numbered from 1 to N. The teacher follows the following method: First, the teacher arranges student 1 in the queue, so the queue initially contains only student 1. Then, students 2 to N are added to the queue one by one. For student with number i, the method of adding them to the queue is as follows: the teacher designates student i to stand to the left or right of some student among students 1 to (i-1) who are already in the queue. After all students have been placed in the queue using this method, the teacher wants to know the sequence of student numbers from left to right. Input consists of a positive integer N, representing the number of students. The 'student' input contains N-1 pairs of integers. Each pair (k, p) indicates that student i will be placed to the left (if p is 0) or right (if p is 1) of student k, where k is an integer less than i. Input also includes a positive integer M, representing the number of students to be removed from the queue. The 'removed' input contains M positive integers x, indicating the students that should be removed from the queue. If student x is not in the queue, ignore that instruction. Return an array containing at most N positive integers, representing the sequence of student numbers from left to right in the queue.",
        "function_declaration": "vector<int> arrangeStudents(int N, vector<pair<int, int>>& students, int M, vector<int>& removed)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int N;\n    cin>>N;\n    vector<pair<int, int>> students(N);\n    for(int i=0; i<N; i++){\n        int k, p;\n        cin>>k>>p;\n        students[i] = make_pair(k, p);\n    }\n    int M;\n    cin>>M;\n    vector<int> removed(M);\n    for(int i=0; i<M; i++){\n        cin>>removed[i];\n    }\n    // calling start\n    vector<int> result = arrangeStudents(N, students, M, removed);\n    // calling end\n    for(int i=0; i<result.size(); i++){\n        cout<<result[i]<<\" \";\n    }\n}",
        "example": "[{\"input\": \"4\\n1 0\\n2 1\\n1 0\\n2\\n3\\n3\", \"output\": \"2 4 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2143,
        "problem_description": "There are three types of balls in the gym: soccer, basketball, and volleyball. It is known that there are $a$ soccer and basketball balls together; $b$ basketball and volleyball balls together; $c$ volleyball and soccer balls together. Please indicate the number of soccer, basketball, and volleyball balls respectively. Input data are three lines of numbers, the first line is a natural number $a$ representing the total quantity of soccer balls and basketball balls; the second line is a natural quantity $b$ representing the total number of basketball balls and volleyball balls; the third line is a natural number $c$ representing the total quantity of volleyball balls and soccer balls. Output three lines: the first line is a natural number representing the quantity of soccer balls; the second line is a natural number representing the quantity of basketball balls; the third line is a natural number representing the quantity of volleyball balls.",
        "function_declaration": "void calculate(int a, int b, int c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n    int a, b, c;\n    cin >> a >> b >> c;\n    // calling start\n    calculate(a, b, c);\n    // calling end\n}",
        "example": "[{\"input\": \"8\\n5\\n7\", \"output\": \"5\\n3\\n2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1891,
        "problem_description": "There is a saying in Chinese: \"Three days of fishing, two days of drying the net.\" If Xiaoi Ai fishes for the first three days and dries the net for the next two days, repeating this process continuously, then on the n-th day, is it fishing or drying the net? Return True for drying the net and False for fishing.",
        "function_declaration": "bool isLying(int n)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int n;\n  cin >> n;\n  // calling start\n  bool result = isLying(n);\n  // calling end\n  if (result)\n      cout<< \"Lying\\n\";\n  else\n      cout<< \"Fishing\\n\";\n  return 0;\n}",
        "example": "[{\"input\": \"1\", \"output\": \"Fishing\"}, {\"input\": \"10\", \"output\": \"Lying\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1962,
        "problem_description": "Please complete Xiao Bo's self-introduction. Let the computer print the following content: \"大家好，我叫小博\\n。我今年 $10$ 岁了，我的身高是 $1.5$ 米\\n我上 $4$ 年级了，我的体重是 $52.7$ 千克\\n我最喜欢的数字是 $3.14$\\n\"(Hello everyone, my name is Xiao Bo. I am $10$ years old, my height is $1.5$ meters. I am in the $4$th grade, and my weight is $52.7$ kilograms. My favorite number is $3.14$). Keep the height and weight to 1 decimal place, and the favorite number to 2 decimal places.",
        "function_declaration": "void printInfo(int age, int grade, float height, float weight, float num)",
        "code_context": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int age = 10;\n  int grade = 4;\n  float height = 1.5;\n  float weight = 52.7;\n  float num = 3.14159;\n\n  // calling start\n  printInfo(age, grade, height, weight, num);\n  // calling end\n\n  return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"大家好，我叫小博。\\n我今年10岁了，我的身高是1.5米\\n我上4年级了，我的体重是52.7千克\\n我最喜欢的数字是3.14\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1580,
        "problem_description": "Enter an integer to represent Xiao Ming's score (out of 100). Please use a switch statement to determine the grade level of the score. Rules: Score >= 90 is \"perfect\"; Score >= 80 is \"great\"; Score >= 60 is \"good\"; Score < 60 is \"miss\". Output a string, \"perfect\" for \"优秀\", \"great\" for \"良\", \"good\" for \"及格\", and \"miss\" for \"不及格\".",
        "function_declaration": "string evaluateGrade(int a)",
        "code_context": "#include <iostream>\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    string result = evaluateGrade(a);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"99\", \"output\": \"perfect\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2337,
        "problem_description": "Little Wan took out $n$ paper cups and quickly exchanged them in front of Little Orange. Clever Little Orange naturally saw where the item was hidden. She wants to test Little Wan and asks, if the initial paper cups are numbered as $1,2,3,...$ in order, what permutations can Little Wan exchange? Please output them in ascending lexicographic order, one permutation per line.",
        "function_declaration": "void cupPermutations(int n)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    //calling start\n    cupPermutations(n);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"1 2 3\\n1 3 2\\n2 1 3\\n2 3 1\\n3 1 2\\n3 2 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2285,
        "problem_description": "There are $n$ soldiers participating in a fierce battle. Each soldier has two companions: the left companion of soldier $i$ is numbered $i-1$, and the right companion is numbered $i+1$. Soldier 1 does not have a left companion, and soldier $n$ does not have a right companion. During the battle, $m$ soldiers are sacrificed one by one. Once a soldier is sacrificed, the surviving soldiers will come closer to each other and form new companion relationships. Given the order and numbers of the soldiers sacrificed, please output the numbers of the two soldiers who form a new companion relationship when each soldier is sacrificed.",
        "function_declaration": "void formNewPartners(vector<int>& partners, int soldier)",
        "code_context": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to form new partner relationships after a soldier is sacrificed\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> partners(n + 1);\n    for (int i = 1; i <= n; i++) {\n        partners[i] = i;\n    }\n\n    for (int i = 0; i < m; i++) {\n        int soldier;\n        cin >> soldier;\n\n        // Form new partner relationships after the soldier is sacrificed\n        //calling start\n        formNewPartners(partners, soldier);\n        //calling end\n\n        // Output the new partner relationships of the left and right soldiers\n        int left_partner = (soldier > 1) ? partners[soldier - 1] : -1;\n        int right_partner = (soldier < n) ? partners[soldier + 1] : -1;\n\n        // Check if any side has no partner and output accordingly\n        if (left_partner == -1) {\n            cout << \"* \";\n        } else {\n            cout << left_partner << \" \";\n        }\n        if (right_partner == -1) {\n            cout << \"*\" << endl;\n        } else {\n            cout << right_partner << endl;\n        }\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"5 3\\n3\\n2\\n1\", \"output\": \"2 4\\n1 4\\n* 4\"}]",
        "time_limit": 4000,
        "memory_limit": 512
    },
    {
        "id": 1620,
        "problem_description": "The final exams were approaching, and Little Cai reached out to their good friend Doudou with the hope of predicting whether they might fail any courses this semester. Firstly, Doudou selected various indicators such as \"classroom performance,\" \"study duration,\" \"homework scores,\" \"participation in club activities,\" and more, forming a total of n criteria for the prediction. Then, based on Doudou's subtle observations of Little Cai's behaviors, each of these indicators was assigned a score in the range of 0 to 100, represented by the variable $score_i$ for the i-th indicator, where i ranges from 1 to n. Given that not all indicators carry the same level of importance, Doudou introduced weights represented by integers in the range of -10 to 10, denoted as $w_i$ for the i-th indicator (with i ranging from 1 to n). Finally, Little Cai's safety index at the end of the semester, denoted as $y$, was defined using the following equation: $y = \\text{ReLU}(\\sum_{i=1}^n score_i \\cdot w_i)$, where $\\text{ReLU}(x) = \\max(0, x)$ is a commonly used activation function. Due to the use of the ReLU function, the safety index $y$ is ensured to be a non-negative value. If the safety index is too low (or even zero), it suggests that Little Cai is likely to fail courses this semester. With the knowledge of the importance weights $w_i$ and the corresponding scores $score_i$ for each indicator, let's calculate Little Cai's safety index at the end of the semester.",
        "function_declaration": "int calculateSum(int n, vector<pair<int, int>> ws)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector<pair<int, int>> ws(n);\n    for(int i = 0; i < n; i++)\n    {\n        scanf(\"%d%d\", &ws[i].first, &ws[i].second);\n    }\n    // calling start\n    int sum = calculateSum(n, ws);\n    // calling end\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n2 60\\n10 100\\n0 70\\n0 0\\n-10 50\\n10 60\", \"output\": \"1220\"}, {\"input\": \"2\\n-10 100\\n-1 15\", \"output\": \"0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2160,
        "problem_description": "Given an integer $n$, please find the largest square factor of $n$. The so-called square factor is a factor of $n$ that is a perfect square. The largest square factor is the largest number among all the square factors of $n$. For example, the largest square factor of 12 is 4, the largest square factor of 81 is itself, and the largest square factor of 21 is 1.",
        "function_declaration": "int calculateSquare(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n  int n; \n  cin >> n;\n  // calling start\n  int result = calculateSquare(n);\n  // calling end\n  cout << result;\n}",
        "example": "[{\"input\": \"12\", \"output\": \"4\"}, {\"input\": \"81\", \"output\": \"81\"}, {\"input\": \"21\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2162,
        "problem_description": "The exchange rules of the soda company are as follows: Collect $b$ bottle caps to exchange for a new soda. Collect $c$ bottles to exchange for a new soda. Xiao Ai initially has $a$ unopened bottles of soda. How many bottles of soda can Xiao Ai drink in the end using the above rules? Note that borrowing bottle caps or bottles from others is not allowed.",
        "function_declaration": "int calculateSoda(int a, int b, int c)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // calling start\n    int result = calculateSoda(a, b, c);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"10 5 4\", \"output\": \"17\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2242,
        "problem_description": "Dark Professor has some points, and there are some edges between them. Now, Dark Professor has told you the situation of all the edges. She hopes that you can answer whether there is a direct edge between two specific points. Can you complete her challenge?Input information is as below: in line 1 we input two numbers m and q, representing the number of edges and the number of inquiries, respectively. Input m lines, each line contains two positive integers x and y, indicating that there is an edge between point x and point y. Finally, input q lines, each line contains two positive integers x and y, indicating an inquiry about whether there is an edge between x and y. Ensure that all input integers are not greater than 500. For each inquiry, if there is no direct edge between the two points, output No; otherwise, output Yes.",
        "function_declaration": "void processQuery(int m, int q)",
        "code_context": "#include <iostream>\nusing namespace std;\n\nconst int N = 501;\nbool g[N][N];\n\n// function start\n\n// function end\n\nsigned main() {\n    int m,q;\n    cin >> m >> q;\n    // calling start\n    processQuery(m, q);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2 3\\n1 2\\n1 3\\n2 1\\n1 3\\n2 3\", \"output\": \"Yes\\nYes\\nNo\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2146,
        "problem_description": "For a four-digit decimal number, we encrypt it into another four-digit number using the following rules: first, swap the units digit and the thousands digit; then, swap the tens digit and the hundreds digit; finally, replace each digit with a new digit according to the following rule: replace 0 with 9, 1 with 8, 2 with 7, 3 with 6, 9 with 0, and so on for other digits. For example, encrypting 8429, we swap the units digit and the thousands digit to get 9428; swap the tens digit and the hundreds digit to get 9248; replace each digit to get 0751. Now, given an already encrypted four-digit number (called the ciphertext), please decrypt and find the original number (called the plaintext).",
        "function_declaration": "int calculate(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n   int n;\n   cin >> n;\n   // calling start\n   int result = calculate(n);\n   // calling end\n   cout << result << \"\\n\";  \n}",
        "example": "[{\"input\": \"0751\", \"output\": \"8429\"}, {\"input\": \"1123\", \"output\": \"6788\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2013,
        "problem_description": "Enter a natural number and output its Chinese pronunciation (in pinyin form, lowercase letters), with a space between every two words.",
        "function_declaration": "string numToChinese(int x)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main()\n{\n\tint x;\n\tcin >> x;\n\t//calling start\n\tstring result = numToChinese(x);\n\t//calling end\n\tcout << result;\n\t\n\treturn 0;\n}",
        "example": "[{\"input\": \"14\", \"output\": \"shi si\"}, {\"input\": \"90\", \"output\": \"jiu shi\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2198,
        "problem_description": "There are $n$ people waiting in line to do something, and the person at position $i$ in the line takes $a_i$ units of time to complete their task. There are two windows open, and Xiaoi can divide these people into two teams in their original order. How can they divide the people to minimize the difference in the total time taken by the two teams? Return a single integer representing the minimum difference in the total time taken by the two teams.",
        "function_declaration": "int calculateMin(int n, int a[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tint a[100000];\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i) {\n\t  cin >> a[i];\t\n\t}\n\t// calling start\n\tint min = calculateMin(n, a);\n\t// calling end\n\tcout << min;\n}",
        "example": "[{\"input\": \"3\\n1 1 100\", \"output\": \"98\"}, {\"input\": \"6\\n1 2 3 4 5 6\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2370,
        "problem_description": "Read in two \"big numbers\" and store them in two strings str_a and str_b. Please convert each digit of str_a and str_b into an integer and store them in reverse order in arrays a and b. The input of this function is two \"char *\" parameters, the output is two \"int *\" parameters",
        "function_declaration": "void reverseStore(char* str_a, char* str_b, int* a, int* b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){\n    char str_a[1010], str_b[1010];\n    int a[1010], b[1010];\n    memset(a, 0, sizeof(a)); \n    memset(b, 0, sizeof(b));\n    \n    scanf(\"%s\", str_a);\n    scanf(\"%s\", str_b);\n\n    //calling start\n    reverseStore(str_a, str_b, a, b);\n    //calling end\n\n    //输出整数数组a和数组b\n    for (int i = 0; i < strlen(str_a); i++)\n         cout << a[i];\n    cout << endl;\n    for (int i = 0; i < strlen(str_b); i++)\n         cout << b[i];\n}",
        "example": "[{\"input\": \"20087\\n1876485\", \"output\": \"78002\\n5846781\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1625,
        "problem_description": "Consider a simple binary classification problem – separating points on a two-dimensional plane into classes $A$ and $B$. The training data consists of $n$ points, where the $i$th point $(1 \\leq i \\leq n)$ can be represented as a triplet $(x_i, y_i, type_i)$, denoting the coordinates and class of the point. Any straight line on the two-dimensional plane can be represented in the form $\\theta_0 + \\theta_1 x + \\theta_2 y = 0$, with $\\theta_1$ and $\\theta_2$ not both equal to $0$. Based on these $n$ known points with their classes, we want to find a straight line on the plane that serves as a linear classifier. Specifically, this line should perfectly separate the $A$ and $B$ class points in the training data, meaning one side contains only $A$ class points and the other side contains only $B$ class points. This way, we can predict the class of any point at a given position based on which side of the line it falls on. In this problem, the only query we need to address is: given a straight line, determine whether it can perfectly separate the $A$ and $B$ class points in the training data. Input consists of information about $n$ points, denoted as \"points\" and \"types\". \"points\" includes $x_i$ and $y_i$, representing the horizontal and vertical coordinates of the $i$th point, and \"type_i\" represents the class, which is a capital letter A or B. Three integers $\\theta_0$, $\\theta_1$, and $\\theta_2$ represent the three parameters of the given query line. Return a string. If the given line can perfectly separate the $A$ and $B$ class points, output \"Yes\"; otherwise, output \"No\".",
        "function_declaration": "string classifyPoints(vector<pair<int, int>>& points, vector<char>& types, int theta0, int theta1, int theta2)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    vector<pair<int, int>> points(n);\n    vector<char> types(n);\n    for(int i=0; i<n; i++){\n        int x, y;\n        char type;\n        cin>>x>>y>>type;\n        points[i] = make_pair(x, y);\n        types[i] = type;\n    }\n    for(int i=0; i<m; i++){\n        int theta0, theta1, theta2;\n        cin>>theta0>>theta1>>theta2;\n        // calling start\n        string result = classifyPoints(points, types, theta0, theta1, theta2);\n        // calling end\n        cout<<result<<endl;\n    }\n}",
        "example": "[{\"input\": \"9 3\\n1 1 A\\n1 0 A\\n1 -1 A\\n2 2 B\\n2 3 B\\n0 1 A\\n3 1 B\\n1 3 B\\n2 0 A\\n0 2 -3\\n-3 0 2\\n-3 1 1\", \"output\": \"No\\nNo\\nYes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1553,
        "problem_description": "Enter an integer and output its absolute value. Additional hint: the syntax of the if statement is if (expression) {\n    // statements to be executed if the expression is true\n}\nelse {\n    // statements to be executed if the expression is false (the else branch can be omitted)\n}",
        "function_declaration": "int absoluteValue(int a)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    int result = absoluteValue(a);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"-10\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2255,
        "problem_description": "There are $n$ wooden sticks. Now choose $4$ sticks from them to form an equilateral triangle. How many ways are there to choose? Take the answer modulo $10^9+7$. Input an integer $n$ and an array containing an integer $n$ integers. $a_i$, representing the length of the $i$th stick. Return an integer representing the answer.",
        "function_declaration": "int countTriangleWays(int n, vector<int>& sticks)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MOD = 1000000007;\n\n// Function to calculate the number of ways to choose 4 sticks to form a triangle\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> sticks(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> sticks[i];\n    }\n\n    //calling start\n    int ways = countTriangleWays(n, sticks);\n    //calling end\n\n    cout << ways << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"4 \\n1\\n1\\n2\\n2\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1895,
        "problem_description": "The following is implemented using a while loop: automatically output each integer from 1 to 10, separated by spaces. Please rewrite the following code using a for loop: Input: None Output: 1 2 3 4 5 6 7 8 9 10\nint i = 1;\nwhile (i <= 10) {\n    cout << i << \" \";\n    i++;\n}",
        "function_declaration": "void printNumbers()",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    printNumbers();\n    // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"1 2 3 4 5 6 7 8 9 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1950,
        "problem_description": "Enter any integer n between 0 and 99. The first line of output is the number of digits in n, such as \"n is a one-digit number\". The second line of output is the digits in each position, separated by spaces.",
        "function_declaration": "string numberClassification(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;  \n    // calling start\n    string result = numberClassification(n);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"13\", \"output\": \"13是两位数\\n1 3\"}, {\"input\": \"8\", \"output\": \"8是一位数\\n8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2325,
        "problem_description": "Fibonacci sequence's first two terms are 1,1, and each subsequent term is the sum of the previous two terms. Please output the value of the nth term of the sequence modulo 998244353.",
        "function_declaration": "long long fibonacci(long long n, long long mod)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tlong long n,mod=998244353;\n\tcin>>n;\n\t// calling start\n\tlong long result = fibonacci(n, mod);\n\t// calling end\n\tcout<<result;\n}",
        "example": "[{\"input\": \"50\", \"output\": \"607336789\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1673,
        "problem_description": "English translation: During a scientific research survey, n natural numbers were obtained, each of which does not exceed 1500000000 (1.5*10^9). It is known that there are no more than 10000 different numbers. Now it is necessary to count the occurrences of each natural number and output the results in ascending order of the natural numbers. Each output group contains m lines (m is the number of different numbers among the n natural numbers), and the results are outputted in ascending order of the natural numbers. Each line outputs two integers, the natural number and the number of times it appears, separated by a space. Note: Please choose a suitable sorting method to complete this question.",
        "function_declaration": "void countAndPrint(int n, int a[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint a[300000];                    // 防止越界\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    for(int i = 1;i <= n;i++){\n        cin >> a[i];\n    }\n    // calling start\n    countAndPrint(n, a);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"8\\n2\\n4\\n2\\n4\\n5\\n100\\n2\\n100\", \"output\": \"2 3\\n4 2\\n5 1\\n100 2\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 1868,
        "problem_description": "There are 3 candidates \"Li\", \"Zhang\", and \"Sun\", and 5 voters. Each voter can only vote for one person. Please write a program to count the votes. Input the voting results one by one, and output the voting results for \"Li\", \"Zhang\", and \"Sun\" in the end. Input five lines as five strings, and output each line as the name of the person and the number of votes, separated by a colon \":\".The output is required to align the colons on each line (i.e., the number of characters before the colons is equal, and any shortfalls are made up with spaces).",
        "function_declaration": "void countVotes() ",
        "code_context": "#include <iostream>\n#include <map>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    //calling start\n    countVotes();\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"Zhang\\nSun\\nLi\\nSun\\nZhang\", \"output\": \"   Li:1\\nZhang:2\\n  Sun:2\"}, {\"input\": \"Sun\\nSun\\nZhang\\nLi\\nSun\", \"output\": \"   Li:1\\nZhang:1\\n  Sun:3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1996,
        "problem_description": "Complete a function to calculate the result of rounding a positive integer to the nearest ten.",
        "function_declaration": "int calculate(int n)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    // calling start\n    int result = calculate(n);\n    // calling end\n    printf(\"%d\", result);\n    return 0;\n}",
        "example": "[{\"input\": \"84\", \"output\": \"80\"}, {\"input\": \"105\", \"output\": \"110\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1915,
        "problem_description": "To calculate a student's GPA, first convert each subject's grade into a grade point. The rules are as follows: Grade A is 4 points; Grade B is 3 points; Grade C is 2 points; Grade D is 1 point. If there is a \"+\" suffix, add 0.3 points. For example, B+ is 3.3 points. If there is a \"-\" suffix, subtract 0.3 points. For example, C- is 1.7 points. Next, calculate the average of these scores, rounding to two decimal places to obtain the GPA. Given a character sequence representing Xiao Ai's grades for each course, calculate her GPA. Let n represent the length of the input character sequence, where 1 ≤ n ≤ 1000.",
        "function_declaration": "double calculateGPA(string str)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    string str;\n    cin >> str;\n    // calling start\n    double result = calculateGPA(str);\n    // calling end\n    cout << fixed << setprecision(2) << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"ABAB\", \"output\": \"3.50\"}, {\"input\": \"A+AA-B-BB+C+\", \"output\": \"3.33\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2261,
        "problem_description": "The Kessoku Band has successfully passed the assessment and is now preparing for a live performance. The performance will take place at the livehouse \"STARRY\" owned by Yidizhixingge. Although Yidizhixingge does not charge any additional fees for using the livehouse, the band \"End\" must meet a quota for the number of tickets sold at the livehouse. The quota is m tickets, and since the band has 4 members, each member is responsible for selling $\\frac{m}{4}$ tickets. So far, the Kessoku Band has sold n tickets. Please help to calculate the ticket sales information and determine the completion status of the quota for the 4 members. There are a total of n+1 lines of input. The first line contains two positive integers n and m. The following n lines each contain a string s and a non-negative integer t separated by a space, indicating that member s of the band sold a ticket at time t. For 40% of the data, n and m are both less than or equal to 1000, and the ticket sales information is given in ascending order of time (i.e., t is always greater than or equal to the previous t); for 80% of the data, n and m are both less than or equal to 1000; for 100% of the data, n and m are both less than or equal to 100000, m is a multiple of 4, s is one of \"Nijika\", \"Ryo\", \"Bocchi\", \"Kita\", and t is within the range of int. Output four lines, each line representing the time when Nijika, Ryo, Bocchi, and Kita respectively completed the ticket sales quota. If a corresponding member has not yet completed the ticket sales quota, output -1.",
        "function_declaration": "void process(vector<int> v[], int m)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nmap<string,int> mp;\nstring a[4]={\"Nijika\",\"Ryo\",\"Bocchi\",\"Kita\"};\nvector<int> v[4];\nint n,m;\n\n// function start\n\n// function end\n\nint main(){\n    for(int i=0;i<4;++i) mp[a[i]]=i;\n    cin>>n>>m;\n    m/=4;\n    for(int i=0;i<n;++i){\n        string s;\n        int t;\n        cin>>s>>t;\n        v[mp[s]].push_back(t);\n    }\n    // calling start\n    process(v, m);\n    // calling end\n}",
        "example": "[{\"input\": \"20 20\\nNijika 0\\nNijika 7\\nKita 1\\nKita 6\\nKita 5\\nRyo 8\\nRyo 4\\nNijika 9\\nNijika 6\\nNijika 5\\nBocchi 3\\nBocchi 5\\nBocchi 4\\nKita 6\\nKita 2\\nRyo 9\\nRyo 6\\nRyo 2\\nKita 8\\nKita 7\", \"output\": \"9\\n9\\n-1\\n6\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1597,
        "problem_description": "Define a constant a with a value of 3. Input a number b. Calculate the product of constant a and variable b. When multiplying two variables or constants, use * to connect them. For example, to calculate the product of variable a and constant 2, write it as a * 2.",
        "function_declaration": "int multiply(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    const int a = 3;\n    int b;\n    cin >> b;\n    // calling start\n    int result = multiply(a, b);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"5\", \"output\": \"15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2201,
        "problem_description": "The factorial of $n$ is denoted as $n!$, defined as follows: $$n!=1×2×...×n$$Given two positive integers $n$ and $m$, please calculate the remainder of $n!$ divided by $m$.",
        "function_declaration": "long long calculate_s(int n, int m)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\n\t// calling start\n\tlong long result = calculate_s(n, m);\n\t// calling end\n\n\tcout << result; \n}",
        "example": "[{\"input\": \"5 1000\", \"output\": \"120\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1653,
        "problem_description": "Calculate the sum of all odd numbers between non-negative integers m and n (including m and n), where m is not greater than n and n is not greater than 300. For example, if m = 3 and n = 12, the sum would be: 3 + 5 + 7 + 9 + 11 = 35.",
        "function_declaration": "int calculateSum(int m, int n)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int m, n;\n    cin >> m >> n;\n    // calling start\n    int result = calculateSum(m, n);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"7 15\", \"output\": \"55\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1788,
        "problem_description": "Write a function to perform bubble sort on an integer array using pointers. Bubble sort refers to comparing adjacent elements and swapping them if they do not meet the required order; apply this method repeatedly to all elements in the sequence until all elements are sorted.The input is an integer n in the first line, representing the number of digits in the sequence. The second line of n integers represents the sequence. The output is a line of n integers representing the sorted sequence, separated by spaces, with no space after the last integer.",
        "function_declaration": "void bubble_up(int *ptr, int count)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    int list[100];\n    for (int x = 0; x < n; x++)\n        cin >> list[x];\n    // calling start\n    bubble_up(list, n);\n    // calling end\n    for (int i = 0; i < n; i++)\n        cout << list[i] << \" \";\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n503 87 512 61 908\", \"output\": \"61 87 503 512 908\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1557,
        "problem_description": "Enter a year and determine whether it is a leap year.",
        "function_declaration": "bool isLeapYear(int a)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    bool result = isLeapYear(a);\n    // calling end\n    if(result)\n        cout << \"yes\";\n    else\n        cout << \"no\";\n    return 0;\n}",
        "example": "[{\"input\": \"2021\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2210,
        "problem_description": "In the supermarket, some price tags are inverted, but the numbers surprisingly remain unchanged. Decimal numbers that remain the same after being rotated 180 degrees are called Strobogrammatic Numbers. The following figure shows the inverted appearance of the numbers 0 to 9: Strobogrammatic Numbers refer to decimal positive integers that remain unchanged when rotated 180 degrees along the center. 0, 1, and 8 remain the same after rotation; 6 becomes 9 after rotation, and 9 becomes 6 after rotation; other numbers cannot form valid numbers after rotation. Given a positive integer string s, please determine if s is a Strobogrammatic Number. Note that some inputs may be very large.",
        "function_declaration": "bool isStrobogrammatic(string s)",
        "code_context": "#include<iostream>\n#include<string>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n\tstring s;\n\tcin >> s;\n\t// calling start\n\tbool result = isStrobogrammatic(s);\n\t// calling end\n\tif (result) \n\t   cout << \"Strobogrammatic number\";\n    else \n\t   cout << \"Not a strobogrammatic number\";\n}",
        "example": "[{\"input\": \"18081\", \"output\": \"Strobogrammatic number\"}, {\"input\": \"666\", \"output\": \"Not a strobogrammatic number\"}, {\"input\": \"4287\", \"output\": \"Not a strobogrammatic number\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1694,
        "problem_description": "Given a sequence of length n, find a subsequence in which the numbers are monotonically increasing. What is the maximum length of this subsequence?",
        "function_declaration": "int longestIncreasingSubsequence(int n, vector<int>& nums)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> nums(n);\n    for(int i=0; i<n; i++){\n        cin>>nums[i];\n    }\n    // calling start\n    int result = longestIncreasingSubsequence(n, nums);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"5\\n1 4 3 2 5\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1656,
        "problem_description": "Given a non-negative integer sequence of length n, please calculate the maximum span value of the sequence (maximum span value = maximum value minus minimum value).",
        "function_declaration": "int calculateRange(int n, int arr[])",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int n, x;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n    // calling start\n    int result = calculateRange(n, arr);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n3 0 8 7 5 9\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2344,
        "problem_description": "Given two strings, find out how many times the second string appears in the first string.",
        "function_declaration": "int countSubstrings(char* str, char* sub)",
        "code_context": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int N = 1024;\nchar str[N];\nchar sub[N];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> str >> sub;\n    // calling start\n    int result = countSubstrings(str, sub);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"abababa\\naba\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1849,
        "problem_description": "The Titanic is in danger and has sent out a distress signal. The nearest ship, the Columbia, has received the message. Time is of the essence, and they must reach there as quickly as possible. Through their detection, the Columbia has obtained a sea map. This sea map is divided into n*n units (2 ≤ n ≤ 1000), represented by 1 for land and 0 for ocean. The ship can move from one cell to any of its adjacent four cells. In order to reach the location of the incident as quickly as possible, what is the minimum distance the Columbia ship must travel? Input a matrix of 0s and 1s, representing the ocean map. Input four integers less than n, indicating the coordinates of the Columbia and Titanic ships.",
        "function_declaration": "int minDistance(vector<vector<int>>& grid, int cx, int cy, int tx, int ty)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<vector<int>> grid(n, vector<int>(n));\n\n    // Input grid\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> grid[i][j];\n        }\n    }\n\n    int cx, cy, tx, ty;\n    cin >> cx >> cy >> tx >> ty;\n\n    //calling start\n    int minDist = minDistance(grid, cx - 1, cy - 1, tx - 1, ty - 1);\n    //calling end\n\n    cout << minDist << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n001\\n101\\n100\\n1 1 3 3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1986,
        "problem_description": "I heard that you have already learned the basic operators of C++. The famous educator, Professor Tian from country J, has decided to give you another difficult problem to test you. Now he gives you three numbers and hopes that you can determine whether the sum of the two smaller numbers is equal to the largest number. It is guaranteed that all input numbers are within the range of float, with an absolute value not exceeding 1000, and with a maximum of 3 decimal places. If they are equal, output YES; otherwise, output NO.",
        "function_declaration": "string checkSum(float a, float b, float c)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    float a, b, c;\n    cin>>a>>b>>c;\n    // calling start\n    string result = checkSum(a, b, c);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"3.001 1.09 2.000\", \"output\": \"NO\"}, {\"input\": \"0.10 0.30 0.2\", \"output\": \"YES\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2256,
        "problem_description": "Scarlet recently learned a magical technique involving arrays. She is capable of rotating a square matrix of odd dimensions in a clockwise or counterclockwise direction by 90 degrees. Here's how it works: Scarlet starts by filling a 2D array of size $n\\times n$ with consecutive positive integers from $1$ to $n^2$, arranging them in row-major order. Afterward, she performs a series of magical operations. Notably, Scarlet is not familiar with complex techniques like block partitioning or nested Splay trees. Scarlet now presents her magical operations sequence to you and seeks to obtain the resulting 2D array after performing these operations. You need to provide her with the final arrangement of numbers in the 2D array. The input consists of two integers, $n$ and $m$, representing the size of the square matrix and the number of magical operations, respectively. The matrix denotes the initial 2D array configuration, and the operations list contains $m$ operations. Each operation consists of four integers: $x$, $y$, $r$, and $z$. These values signify that in this particular operation, Scarlet will rotate a $(2r+1)$-sized submatrix centered at the cell in the $x$-th row and $y$-th column. The rotation will be either clockwise ($z=0$) or counterclockwise ($z=1$). Your task is to output an $n\\times n$ grid of integers. Each row should contain $n$ integers separated by spaces, representing the final matrix configuration after executing all the magical operations.",
        "function_declaration": "void applyMagicOperations(int n, int m, vector<vector<int>>& matrix, vector<vector<int>>& operations) ",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to apply magic operations on the matrix\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<vector<int>> matrix(n, vector<int>(n));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            matrix[i][j] = i * n + j + 1;\n        }\n    }\n\n    vector<vector<int>> operations(m, vector<int>(4));\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            cin >> operations[i][j];\n        }\n    }\n\n    //calling start\n    applyMagicOperations(n, m, matrix, operations);\n    //calling end\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"5 4\\n2 2 1 0\\n3 3 1 1\\n4 4 1 0\\n3 3 2 1\", \"output\": \"5 10 3 18 15\\n4 19 8 17 20\\n1 14 23 24 25\\n6 9 2 7 22\\n11 12 13 16 21\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2006,
        "problem_description": "If you already know the input and output of a test point, you can use a simple if statement to make your program give the correct result for that specific input, thus obtaining a score. This behavior is called \"tabulation\". In general, we do not want you to use tabulation to pass the test, because even if you get a score of 100 through tabulation, it does not prove that your program is correct. A correct program should give the correct result for all valid inputs. If you can use tabulation to write a truly correct program, of course, we support it. You can try to solve the following problem using tabulation. Given a positive integer n less than 50, output the value of pi with n decimal places.",
        "function_declaration": "void roundPi(char* s, int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    char s[60]=\"3.14159265358979323846264338327950288419716939937510\";\n    int n;\n    cin>>n;\n    // calling start\n    roundPi(s, n);\n    // calling end\n}",
        "example": "[{\"input\": \"4\", \"output\": \"3.1416\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1723,
        "problem_description": "For a string, define a cyclic shift operation as moving the first character of the string to the end to form a new string. Given two strings s1 and s2, determine whether one string is a substring of the new string formed by several cyclic shift operations of the other string.",
        "function_declaration": "bool isSubString(char* s1, char* s2)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 61;\nchar s1[N], s2[N], x[N], t[N];\nint l1, l2;\n\n//function start\n\n//function end\n\nint main() {\n    scanf(\"%s%s\", s1, s2);\n\n    //calling start\n    bool result = isSubString(s1, s2);\n    //calling end\n\n    if (result) {\n        printf(\"true\\n\");\n    } else {\n        printf(\"false\\n\");\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"AABCD CDAAB\", \"output\": \"true\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2032,
        "problem_description": "Is each type of snack on Xiao Wan's shopping list an even number?",
        "function_declaration": "bool checkAccept(int a, int b, int c, int d)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a = 0, b = 0, c = 0, d = 0;\n    cin >> a >> b >> c >> d;\n    // calling start\n    bool result = checkAccept(a, b, c, d);\n    // calling end\n    if (result)\n        cout << \"accept\";\n    else\n        cout << \"deny\";\n    cout << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"1 1 1 1\\n\", \"output\": \"accept\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 302,
        "problem_description": "Jinjin has started middle school. Mom thinks Jinjin should study harder, so besides going to school, Jinjin also needs to attend various subject review classes that Mom has signed her up for. In addition, Mom will also take her to learn recitation, dance, and piano every week. However, if Jinjin has more than eight hours of classes in a day, she will be unhappy, and the longer she has classes, the unhappier she will be. Assuming Jinjin will not be unhappy due to other reasons, and her unhappiness will not last until the next day. Please help check Jinjin's schedule for next week to see if she will be unhappy; if so, which day she will be the unhappiest. Each set of input data consists of seven lines, representing the schedule from Monday to Sunday. Each line includes two non-negative integers less than 10, separated by a space, representing the time Jinjin has classes at school and the time Mom has arranged for her classes. Each set of output consists of one line, which only contains one number. If she will not be unhappy, output 0; if she will be unhappy, output the day she will be the unhappiest (represented by 1, 2, 3, 4, 5, 6, 7 for Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday). If there are two or more days with equal unhappiness, output the earliest day.",
        "function_declaration": "int unhappiness(int schedule[7][2])",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int schedule[7][2];\n    for(int i=0; i<7; i++){\n        cin>>schedule[i][0]>>schedule[i][1];\n    }\n    // calling start\n    int result = unhappiness(schedule);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"5 3\\n6 2\\n7 2\\n5 3\\n5 4\\n0 4\\n0 6\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 2157,
        "problem_description": "Many competitions, when calculating the average score of participants, will first remove the highest score and then remove the lowest score in order to avoid the influence of extreme values on the average. Given $n$ numbers $a_1,a_2,...,a_n$, representing the scores obtained by a participant, please calculate and return the participant's final score according to the above process, rounding to two decimal places. Note that if there are multiple scores tied for first place, only one highest score will be removed, and the same applies to removing the lowest score.",
        "function_declaration": "double calculateAverage(int n, double* arr)",
        "code_context": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int n;\n  cin >> n;\n  double* arr = new double[n];\n  for (int i = 0; i < n; ++i) {\n  \tcin >> arr[i];\n  }\n  \n  // calling start\n  double avg = calculateAverage(n, arr);\n  // calling end\n  \n  cout << fixed << setprecision(2) << avg; \n  delete[] arr;\n}",
        "example": "[{\"input\": \"5\\n100 1 20 30 40 \", \"output\": \"30.00\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2316,
        "problem_description": "Given a sequence of $n$ integers $a_1,a_2,...,a_n$, please find a subsequence with the maximum sum of its elements. Return the maximum sum of the subsequence. A subsequence is a contiguous and ordered segment of numbers in the original sequence. An empty subsequence or the entire sequence is considered a subsequence of the original sequence.",
        "function_declaration": "int calculateMaxSuffixSum(int n, int arr[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n    // calling start\n    int result = calculateMaxSuffixSum(n, arr);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"5\\n1 2 -10 2 3\", \"output\": \"5\"}, {\"input\": \"3\\n-1 -2 -3\", \"output\": \"0\"}, {\"input\": \"3\\n3 -2 3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1862,
        "problem_description": "The teacher is developing an automatic counter. Input the Chinese scores of 5 students in the class. Calculate the total number of students who have passed (60 points or above).",
        "function_declaration": "int countPassScore(int scores[], int size)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int scores[5];\n    for (int i = 0; i < 5; i++) {\n        cin >> scores[i];\n    }\n    // calling start\n    int cnt = countPassScore(scores, 5);\n    // calling end\n    cout << cnt << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"78 93 42 51 60\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1970,
        "problem_description": "Children, after learning simple operators, I believe you can now learn to use a computer to perform many useful mathematical operations. This time, you need to determine whether three given lengths of sticks can be used to form a triangle.Input three integers a, b, c representing the lengths of three sticks and output \"yes\" (without quotes) if they can be put together to form a triangle, otherwise output \"no\" (without quotes).",
        "function_declaration": "bool isTriangle(int a, int b, int c)",
        "code_context": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    //calling start\n    bool result = isTriangle(a, b, c);\n    //calling end\n    if (result) puts(\"yes\");\n    else puts(\"no\");\n}",
        "example": "[{\"input\": \"1 2 3\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2310,
        "problem_description": "Given $n$ integers $a_1,a_2,...,a_n$, each number is either 0, 1, or 2. Please swap some of the numbers pairwise to make the result in ascending order. How many minimum swaps are needed?",
        "function_declaration": "int calculateCost(int n, int a[])",
        "code_context": "#include<iostream>\nusing namespace std;\nconst int maxn = 1000000;\nint a[maxn];\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\t// calling start\n\tint cost = calculateCost(n, a);\n\t// calling end\n\tcout << cost;\n}",
        "example": "[{\"input\": \"5\\n2 0 1 2 0\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1828,
        "problem_description": "English translation: \nAxiao made a robot named Dila. This robot has a different understanding of numbers compared to ordinary people. It reads numbers in reverse order. For example, when it sees 1234, it understands it as 4321; when it sees 1020, it understands it as 201. Therefore, when it compares the size of two numbers, the result is different from that of ordinary people. For example, when it compares 13 and 21, it thinks it is comparing 31 and 12, so it considers the former to be larger. In the eyes of ordinary people, the comparison result is 13 > 21. Now, given two natural numbers n and m (n < m ≤ n + 10^5), let it sort the numbers in the [n, m] range from small to large, and please output its sorting result.",
        "function_declaration": "void sortArray(int st, int ed, int* a)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int st, ed, n, a[100010];\n    cin >> st >> ed;\n    // calling start\n    sortArray(st, ed, a);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"9 15\", \"output\": \"10 9 11 12 13 14 15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1448,
        "problem_description": "Given an n-digit number, find the number of numbers that satisfy the following conditions: the result of subtracting the digit in the units place from the digit in the thousands place, then subtracting the digit in the hundreds place, and then subtracting the digit in the tens place is greater than zero.",
        "function_declaration": "int calculate_ans(int n)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    int result = calculate_ans(n);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1234 1349 6119 2123 5017\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2228,
        "problem_description": "Output \"hello world\".",
        "function_declaration": "void printHelloWorld()",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    // calling start\n    printHelloWorld();\n    // calling end\n}",
        "example": "[{\"input\": \"（没有输入）\", \"output\": \"hello world\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1497,
        "problem_description": "Find the product of two numbers. Explanation/Hint: The 1st number is not more than 10^2000 and needs to be in high precision. The 2nd number does not exceed 10^8.",
        "function_declaration": "string multiplyStrings(string num1, int num2)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    string num1;\n    int num2;\n    cin >> num1 >> num2;\n    // calling start\n    string result = multiplyStrings(num1, num2);\n    // calling end\n    cout << result;\n}\n",
        "example": "[{\"input\": \"2368 32\", \"output\": \"75776\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2128,
        "problem_description": "Due to frequently buying snacks for Xiao Cheng, one day Xiao Wan suddenly realized that he had spent a lot of money! He wants to find some patterns from the bills, but he is at a loss when faced with many days of bills. Can you help Xiao Wan calculate the day of the week with the highest average spending? Input two positive integers $n$ and $k$ representing the total number of days in the bills and the day of the week on the first day. $7\\le n\\le 10^6$, $1\\le k\\le 7$ (Sunday is considered the 7th day). Input $n$ positive integers, where the $i$-th integer $a_i$ represents the spending on the $i$-th day. Output an integer representing the day of the week with the highest average spending. If there are multiple days with the same average spending, output the one with the smaller number.",
        "function_declaration": "int findMaxAverageDay(int n, int k, vector<int>& expenses)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n\n    vector<int> expenses(n);\n    for (int i = 0; i < n; i++) {\n        cin >> expenses[i];\n    }\n\n    // calling start\n    int result = findMaxAverageDay(n, k, expenses);\n    // calling end\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"7 1\\n1 1 1 2 1 1 1\\n\", \"output\": \"4\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1864,
        "problem_description": "Enter a four-digit integer (1000~9999), return its units digit, tens digit, hundreds digit, and thousands digit.",
        "function_declaration": "vector<int> calculateDigits(int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    vector<int> result = calculateDigits(n);\n    // calling end\n    cout << result[0] << \" \" << result[1] << \" \" << result[2] << \" \" << result[3];\n    return 0;\n}",
        "example": "[{\"input\": \"1234\", \"output\": \"4 3 2 1\"}, {\"input\": \"4762\", \"output\": \"2 6 7 4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2178,
        "problem_description": "Question: Given the initial situation, how many ways can Xiao Wan trigger a \"elimination\" in the first step? (Note: Since Xiao Wan will first consider two consecutive animals and then find the third one, he will consider AABABB as two different ways of operation) Ensure that there are no animals that can be directly eliminated in the initial situation.",
        "function_declaration": "int calculate_ans(int n, int m, int a[maxn][maxn])",
        "code_context": "#include <iostream>\nusing namespace std;\nint const maxn = 503;\n\nint n = 0, m = 0;\nint a[maxn][maxn];\n\n// function start\n\n// function end\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j)\n\t\t\tcin >> a[i][j];\n\t// calling start\n\tint ans = calculate_ans(n, m, a);\n\t// calling end\n\tcout << ans << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"3 6\\n1 1 2 2 1 1 \\n1 1 2 1 2 2\\n2 2 1 1 2 2\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1749,
        "problem_description": "Given an n*n matrix, select n positions such that the sum of these n positions is minimized, and each row has exactly one selected point, and each column has exactly one selected point. Return an integer representing the minimum sum.",
        "function_declaration": "int calculateMinSum(vector<vector<int>>& matrix)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    \n    vector<vector<int>> matrix(n, vector<int>(n));\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            cin>>matrix[i][j];\n        }\n    }\n    \n    // calling start\n    int result = calculateMinSum(matrix);\n    // calling end\n    \n    cout<<result;\n}",
        "example": "[{\"input\": \"3\\n4 2 5\\n2 3 6\\n3 4 5\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1976,
        "problem_description": "The Chinese Remainder Theorem is a very interesting number theory theorem, first mentioned in \"Sunzi Suanjing\": \"There is an unknown quantity, when divided by 3, leaves a remainder of 2; when divided by 5, leaves a remainder of 3; when divided by 7, leaves a remainder of 2. What is the quantity? The answer is '23'.\" Simplifying the problem, we only consider remainders modulo 2 and modulo 5. When the remainders modulo 2 and modulo 5 are determined, please tell me what the original number is. Given two integers a and b, where a is the remainder of x modulo 2, and b is the remainder of x modulo 5.",
        "function_declaration": "int calculateResult(int a, int b)",
        "code_context": "#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+1;\nconst int INF=1e9+7;\n#define test(x) cout<<(x)<<endl;\n\n// function start\n\n// function end\n\nint main()\n{\n    int a,b;\n    cin>>a>>b;\n    // calling start\n    int result = calculateResult(a, b);\n    // calling end\n    cout<<result;\n    return 0;\n}",
        "example": "[{\"input\": \"0 0\", \"output\": \"0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1495,
        "problem_description": "High-precision addition, equivalent to the a+b problem, without considering negative numbers, where a, b ≤ 10^10000. Output the value of a+b.",
        "function_declaration": "string add(string a, string b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    string a, b;\n    cin>>a>>b;\n    // calling start\n    string result = add(a, b);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"1001 9099\", \"output\": \"10100\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2200,
        "problem_description": "Given a positive integer n, output the value of n factorial (i.e., $1 \\times 2 \\times \\dots \\times n$) modulo 1000003.",
        "function_declaration": "long long factorialModulo(long long n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long n;\n    cin>>n;\n    // calling start\n    long long result = factorialModulo(n);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"10\", \"output\": \"628791\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2216,
        "problem_description": "Three times game is a single-player game. The player will receive $n$ integers $a_1,a_2,...,a_n$. The player selects two numbers from these integers and adds them together. If the sum is a multiple of $3$, the two integers can be eliminated. This process is repeated until no more numbers can be eliminated. How many pairs of numbers can the player eliminate at most?",
        "function_declaration": "int calculate(int n, int arr[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int n;\n  cin >> n;  \n  int arr[n];\n  for (int i = 0; i < n; ++i) {\n  \tcin >> arr[i];\n  }\n  // calling start\n  int result = calculate(n, arr);\n  // calling end\n  cout << result;\n}",
        "example": "[{\"input\": \"4\\n1 3 3 2\", \"output\": \"2\"}, {\"input\": \"6\\n1 2 3 4 5 6\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2295,
        "problem_description": "Symbol ⊕ represents the XOR (exclusive OR) operation, with the following rules: when only one bit is involved in the operation, $0⊕0=0$, $0⊕1=1$, $1⊕0=1$, $1⊕1=0$ (0 for the same, 1 for different); when multiple bits are involved in the operation, perform XOR operation on each bit separately, such as $0101⊕1011=1110$. Given a positive integer $n$, find the number of numbers $x$ in the range from $0$ to $2^n-1$ that satisfy the following equation: $$x⊕2x⊕3x=0$$. Since there may be many values of $x$ that satisfy the condition, please take the solution modulo $10^9+9$.",
        "function_declaration": "int calculate(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\nint solve[1000001];\n\n// function start\n\n// function end\n\nint main() {\n  int n;\n  cin >> n;\n  // calling start\n  int result = calculate(n);\n  // calling end\n  cout << result;                          \n}",
        "example": "[{\"input\": \"3\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2030,
        "problem_description": "\"Is it intentional or accidental?\" \"It is intentional.\" Intention and accident always scatter in every corner of life. Indeed, we often care whether something is done intentionally or unintentionally. However, whether it is intentional or accidental, in any case, the event has already happened. Therefore, it is not always necessary to dig into the intention of doing things, but it is more important to discover the underlying principles. Here, a number is considered intentional if and only if its digit count is odd and each digit is odd. Now please determine whether a number is an intentional number. Return 1 if it is an intentional number, and return 0 if it is not an intentional number.",
        "function_declaration": "int checkNumber(int n)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n = 0;\n    cin >> n;\n    //calling start\n    int result = checkNumber(n);\n    //calling end\n    cout << (result? \"Yes\":\"No\") << '\\n';\n    return 0;\n}",
        "example": "[{\"input\": \"1\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1932,
        "problem_description": "Xiao Ai is participating in a level-based game where levels are divided into two categories: literary and sports. Each category has n levels, and they must be completed in sequential order. This means that Xiao Ai must complete the previous level of a category before challenging the next level in that category. Xiao Ai has a limited amount of time for challenges, denoted as t. Each level has a different completion time. There are n integers $a_1, a_2,...,a_n$, representing the completion times for the literary levels, and n integers $b_1, b_2,...,b_n$, representing the completion times for the sports levels. She can freely switch between the categories of levels. The question is, how many levels can she complete at most within the given time limit? Return the maximum number of levels she can complete within the time constraint. For 30% of the data, 1 ≤ n ≤ 20. For 60% of the data, 1 ≤ n ≤ 1000. For 100% of the data, 1 ≤ n ≤ 100000, 1 ≤ t ≤ 1000000000, 1 ≤ $a_i$, $b_i$ ≤ 10000.",
        "function_declaration": "int calculateMax(int n, int t, int a[], int b[])",
        "code_context": "#include <bits/stdc++.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint n, t, a[100010], b[100010], ans;\n\n// function start\n\n// function end\n\nint main()\n{\n    cin >> n >> t;\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n        if (i > 0) a[i] += a[i - 1];\n    }\n    for (int i = 0; i < n; i++) {\n        cin >> b[i];\n        if (i > 0) b[i] += b[i - 1];\n    }\n\n    // calling start\n    ans = calculateMax(n, t, a, b);\n    // calling end\n\n    cout << ans;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4 22\\n6 8 10 7\\n7 11 9 9\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1606,
        "problem_description": "Please use the while syntax to implement: Enter an integer less than 10000, and determine whether it is a prime number.",
        "function_declaration": "bool isPrime(int n)",
        "code_context": "#include <iostream>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    bool result = isPrime(n);\n    // calling end\n    if (result) {\n        cout << \"yes\" << endl;\n    } else {\n        cout << \"no\" << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"5\", \"output\": \"yes\"}, {\"input\": \"10\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2292,
        "problem_description": "In a Cartesian coordinate system, there are $n$ mountain-like patterns. Each mountain is a right-angled isosceles triangle, with their bases aligned with the X-axis of the coordinate system. The coordinates of the peak of the $i$-th mountain are $(x_i, y_i)$. If the peak of one mountain is inside another mountain or exactly on the boundary of a mountain, then that mountain is considered to be obscured. Given the coordinates of each mountain peak, please calculate the number of mountains that can be seen.",
        "function_declaration": "int countVisiblePeaks(vector<pair<int, int>>& peaks) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n\n// Function to count the number of visible peaks\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<pair<int, int>> peaks(n);\n    for (int i = 0; i < n; i++) {\n        int x, y;\n        cin >> x >> y;\n        peaks[i] = make_pair(x, y);\n    }\n\n    // Sort the peaks by their x-coordinate in ascending order\n    sort(peaks.begin(), peaks.end());\n    //calling start\n    int visiblePeaks = countVisiblePeaks(peaks);\n    //calling end\n    cout << visiblePeaks << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n1 1\\n2 2\\n4 1\\n4 2\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1773,
        "problem_description": "Given an unordered sequence, please find the smallest ten numbers in it and output these ten numbers in ascending order.",
        "function_declaration": "void findMinAndPrint(int n, int a[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint a[1010];\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    // calling start\n    findMinAndPrint(n, a);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"11\\n1 2 3 4 5 6 7 8 9 10 11\", \"output\": \"1 2 3 4 5 6 7 8 9 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2130,
        "problem_description": "Please find the number with the highest frequency in a set of data. If there are multiple numbers with the highest frequency, return the first one that appears.",
        "function_declaration": "int findMostFrequentNumber(vector<int>& nums)",
        "code_context": "#include <iostream>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // calling start\n    int result = findMostFrequentNumber(nums);\n    cout << result << endl; // calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"7\\n1\\n1\\n2\\n2\\n2\\n3\\n3\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1910,
        "problem_description": "Please use recursion to implement: output each number from 1 to 10, with spaces between the numbers.",
        "function_declaration": "void printN(int N)",
        "code_context": "#include <iostream> \nusing namespace std;\n\n// function start\n\n// function end\nint main(){     \n    printN(10); \n}               ",
        "example": "[{\"input\": \" \", \"output\": \"1 2 3 4 5 6 7 8 9 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1941,
        "problem_description": "Read in a character, an integer, a single-precision floating-point number, a double-precision floating-point number, and then output them in order, with a space separating them. When outputting the floating-point numbers, keep 6 decimal places.",
        "function_declaration": "void printValues(char a, int b, float c, double d)",
        "code_context": "#include <iostream> \nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){\n    char a;\n    int b;\n    float c;\n    double d;\n\n    cin >> a >> b >> c >> d;\n    //calling start\n    printValues(a, b, c, d);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"a\\n12\\n2.3\\n3.2\", \"output\": \"a 12 2.300000 3.200000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2018,
        "problem_description": "Now I give you an integer t. She wants to know how many times the numbers 0, 1, and 2 appear in the ternary representation of this number. The number of occurrences is represented by a, b, c. Can you help her?",
        "function_declaration": "void countNumbers(unsigned long long t, int& a, int& b, int& c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int a = 0,b = 0,c = 0;\n    unsigned long long t;\n    cin >> t;\n    // calling start\n    countNumbers(t, a, b, c);\n    // calling end\n    cout << a << ' ' << b << ' ' << c;\n    return 0;\n}",
        "example": "[{\"input\": \"10\", \"output\": \"1 2 0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2150,
        "problem_description": "On Arbor Day, Xiao Ai planted $a$ trees, Xiao Ai planted $b$ trees, and Xiao Ai planted $c$ trees. The teacher is preparing to help the students plant some trees to make the number of trees planted by the three of them equal. How many trees should the teacher plant at least to make the number of trees planted by the three of them consistent?",
        "function_declaration": "int calculateMaxDifference(int a, int b, int c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n   int a, b, c;\n   cin >> a >> b >> c;\n   \n   // calling start\n   int result = calculateMaxDifference(a, b, c);\n   // calling end\n   \n   cout << result;\n}",
        "example": "[{\"input\": \"2 1 3\", \"output\": \"3\"}, {\"input\": \"4 4 2\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1725,
        "problem_description": "Input one line of sentence (no more than 200 words, each word length not exceeding 100), only containing letters and spaces. Words are composed of at least one continuous letter, and spaces are the intervals between words, with only one space between two words. Try to output the first longest word and the first shortest word.",
        "function_declaration": "pair<string, string> findMinMaxWord(string s)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main()\n{\n    string s;\n    getline(cin, s);\n    //calling start\n    pair<string, string> result = findMinMaxWord(s);\n    //calling end\n    cout << result.first << endl;\n    cout << result.second << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"I am studying Programming language C in Peking University\", \"output\": \"Programming\\nI\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2312,
        "problem_description": "The result of tossing a coin $n$ times can be represented by a sequence of $0/1$. Given $n$, please count the number of coin tossing results that do not contain three consecutive $0$ or three consecutive $1$. When $n$ is large, the answer may be large, so output the remainder of the answer modulo 1,000,000,007.",
        "function_declaration": "long long calculate(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\nlong long HH[1000001];\nlong long HT[1000001];\nlong long TH[1000001];\nlong long TT[1000001];\nconst int mod = 1000000007;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\t// calling start\n\tlong long result = calculate(n);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2075,
        "problem_description": "Dark Professor heard that you have learned arrays and has decided to test your basic application. Now, Dark Professor gives you a series of numbers and wants you to output them in reverse order. For example, if she gives you the six numbers 1 2 3 4 6 5, you need to output 5 6 4 3 2 1. Input an integer n to represent the number of digits. Array a contains n integers. The output should be n integers separated by a space.",
        "function_declaration": "void printReverse(int n, int a[])",
        "code_context": "#include <iostream>\nusing namespace std;\nconst int N = 10000;\nint a[N];\n\n// function start\n\n// function end\n\nsigned main() {\n    int n;\n    cin >> n;\n    for(int i = 0 ; i < n ; ++i) cin >> a[i];\n    // calling start\n    printReverse(n, a);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"7\\n0 1 8 9 1 9 1\", \"output\": \"1 9 1 9 8 1 0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1718,
        "problem_description": "Light problem, there are n lights, numbered from 1 to n. The first person turns on all the lights, the second person presses the switches for all multiples of 2 (these lights will be turned off), the third person presses the switches for all multiples of 3 (the lights that are turned off will be turned on, and the lights that are on will be turned off), and so on. There are a total of k people, asking which lights are on in the end? Input n and k, output the numbers of the lights that are on. (k<=n<=1000), separate the numbers with spaces, representing the numbers of the lights that are on.",
        "function_declaration": "void processArray(int n, int k, bool a[])",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool a[1010];\n\n// function start\n\n// function end\n\nint main ( ) {\n    memset(a, true, sizeof(a));\n    int n, k;\n    cin >> n >> k;\n    // calling start\n    processArray(n, k, a);\n    // calling end\n    return 0; \n}",
        "example": "[{\"input\": \"7 3\", \"output\": \"1 5 6 7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2291,
        "problem_description": "English translation: \n\nLittle Ai is participating in a running race, and the race route is divided into $n$ segments. The score for the $i$-th segment is $a_i$. On each segment, Little Ai can choose to run, sprint, or walk. Each choice has a different score, following these rules: if Little Ai chooses to run on a segment, they can score $a_i$ points; if they choose to sprint on a segment, the score will double to $2a_i$ points, but they can only walk on the next segment; if they choose to walk on a segment, the score is $0$. How should Little Ai choose on each segment to maximize the total score? Output the maximum score.",
        "function_declaration": "int calculateMax(int n, int* arr)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint* arr = new int[n];\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> arr[i];\n\t}\n\t// calling start\n\tint result = calculateMax(n, arr);\n\t// calling end\n\tcout << result;\n\tdelete[] arr;\n}",
        "example": "[{\"input\": \"4\\n1 2 3 4\", \"output\": \"14\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1636,
        "problem_description": "Given two sequences, pushed and popped, with values ranging from 1 to n (1 ≤ n ≤ 10^5). It is known that the pushed sequence is 1 2 3 ... n. If the popped sequence is possible, output Yes; otherwise, output No. Input an integer n to represent the length of the sequence; n integers represent the popped sequence. If possible, output Yes; otherwise, output No.",
        "function_declaration": "string checkPopedSequence(int n, vector<int>& poped)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int q;\n    cin>>q;\n    while(q--){\n        int n;\n        cin>>n;\n        vector<int> poped(n);\n        for(int i=0; i<n; i++){\n            cin>>poped[i];\n        }\n        // calling start\n        string result = checkPopedSequence(n, poped);\n        // calling end\n        cout<<result<<endl;\n    }\n}",
        "example": "[{\"input\": \"2\\n5\\n5 4 3 2 1\\n4\\n2 4 1 3\", \"output\": \"Yes\\nNo\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2129,
        "problem_description": "Hastin and DarkSharpless's duel is still ongoing. They are not satisfied with determining the winner through a single game of rock-paper-scissors. Therefore, they have engaged in n rounds of rock-paper-scissors matches, and the one who wins more rounds will win the final victory. Please determine who the ultimate winner is! N pairs of numbers represent the moves made by Hastin and DarkSharpless, respectively, where: -0 represents rock, -1 represents scissors, and -2 represents paper. The rules are the traditional rock-paper-scissors rules, where rock beats scissors, scissors beats paper, and paper beats rock. Output the name of the final winner. If both players have an equal number of victories, output \"draw\" (without quotation marks).",
        "function_declaration": "string findWinner(vector<int>& hastin_moves, vector<int>& darksharpless_moves)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> hastin_moves(n);\n    vector<int> darksharpless_moves(n);\n\n    for (int i = 0; i < n; i++) {\n        cin >> hastin_moves[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        cin >> darksharpless_moves[i];\n    }\n\n    // calling start\n    string winner = findWinner(hastin_moves, darksharpless_moves);\n     // calling end\n    cout << winner << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n1 0\\n0 2\\n2 1\", \"output\": \"DarkSharpless\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2327,
        "problem_description": "There are n slides, numbered from 1 to n, with one of them being the \"slide that cannot be touched at all\". Sitting on one slide may slide to another slide. If sitting on a slide may slide to the \"slide that cannot be touched at all\", then that slide is also a slide that cannot be touched. Now you need to determine how many slides cannot be touched in total. The input contains two positive integers n and x, representing the number of slides and the number of the \"slide that cannot be touched at all\" respectively. It contains n integers between 1 and n, where the kth number represents the number of the next slide that can be slid to when sitting on slide k. In particular, if the kth number is equal to k, it means that sitting on slide k will not slide to another slide. Output a number representing the number of slides that cannot be touched.",
        "function_declaration": "int countUntouchableSlides(int n, int x, vector<int>& nextSlide)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\n// Function to calculate the number of untouchable slides\n//function start\n\n//function end\n\nint main() {\n    // Input the number of slides and the untouchable slide number\n    int n, x;\n    cin >> n >> x;\n\n    // Input the next slide for each slide\n    vector<int> nextSlide(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nextSlide[i];\n    }\n\n    // Calling the function to count the untouchable slides\n    //calling start\n    int untouchableSlides = countUntouchableSlides(n, x, nextSlide);\n    //calling end\n\n    // Output the result\n    cout << untouchableSlides << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"8 4\\n2 1 4 6 5 3 5 7\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1818,
        "problem_description": "Given a sequence, which consists of n integers in ascending order. Given a number x, discard all the numbers in the sequence that are greater than or equal to x. How many numbers are left in the sequence?",
        "function_declaration": "int findLowerBound(int a[], int n, int x)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, x;\n    cin >> n >> x;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    // calling start\n    int result = findLowerBound(a, n, x);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"10 7\\n1 2 2 2 3 5 7 7 10 20\", \"output\": \"6\"}, {\"input\": \"10 2\\n1 2 2 2 3 5 7 7 10 20\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2005,
        "problem_description": "Little A and Little B each have two cards. Little A's cards are denoted as a1, a2, and Little B's cards are denoted as b1, b2. According to the following rules, who has the bigger cards? Use 1, 2, ..., 10, 11, 12, 13 to represent the cards A, 2, ..., 10, J, Q, K respectively. The order of cards from largest to smallest is A, K, Q, J, 10, ..., 3, 2. A pair (two cards of the same value) is bigger than two different cards. For example, in the given example, Little B's cards 22 are bigger than Little A's cards AK. When comparing two different cards, first compare the larger card of each player. If they are the same, then compare the other card. If they are still the same, it is a tie.",
        "function_declaration": "int calculateScore(int a1, int a2, int b1, int b2)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tint a1,a2,b1,b2,a,b;\n\tcin>>a1>>a2>>b1>>b2;\n\t// calling start\n\tint result = calculateScore(a1, a2, b1, b2);\n\t// calling end\n\tif(result == -1) cout<<\"B\";\n\tif(result == 1) cout<<\"A\";\n\tif(result == 0) cout<<\"Draw\";\n}",
        "example": "[{\"input\": \"1 13\\n2 2\", \"output\": \"B\"}, {\"input\": \"4 6\\n6 4\", \"output\": \"Draw\"}, {\"input\": \"1 12\\n1 10\", \"output\": \"A\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1637,
        "problem_description": "Assuming an expression consists of lowercase English letters, operators + - * /, and left and right parentheses (round brackets), with @ as the end symbol of the expression. Please write a program to check if the left and right parentheses in the expression are matched. If they are matched, return 0; otherwise, return something else. The length of the expression is less than 255, and there are fewer than 20 left parentheses.",
        "function_declaration": "int checkParentheses(char* s)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nchar s[1010];\n\n// function start\n\n// function end\n\nint main() {\n    scanf(\"%s\", s);\n    // calling start\n    int result = checkParentheses(s);\n    // calling end\n    if (result == 0)\n        printf(\"YES\");\n    else\n        printf(\"NO\");\n    return 0; \n}",
        "example": "[{\"input\": \"2*(x+y)/(1-x)@\", \"output\": \"YES\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2031,
        "problem_description": "The English translation of the Chinese question is as follows:\n\nLittle Wan has a cute little dog. Little Wan gives him some bones and then gives either L or R as instructions. The dog is very smart, and Little Wan hopes that when he gives L, the dog will run to the right; when he gives R, the dog will run to the left. Today, the dog has been playing with Little Wan for a long time. It will show through its actions that if it cannot be given more bones than yesterday (excluding equal amounts), it will stop playing and stay in place. The input is the number of bones given by Little Wan yesterday (int), the number of bones given today (int), and Little Wan's instruction (char). The number of bones is guaranteed to be within the int range, and the instruction will only be one character, either L or R. Output a line of string. If the dog does nothing, output \"nothing\". If it runs to the left, output \"left\". If it runs to the right, output \"right\".",
        "function_declaration": "string mainLogic(int a, int b, char c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a = 0, b = 0;\n    char c = 0;\n    cin >> a >> b >> c;\n    \n    // calling start\n    string result = mainLogic(a, b, c);\n    // calling end\n    \n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"1 0 L\", \"output\": \"nothing\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2141,
        "problem_description": "Little Ai is building a square cabin hospital, which is located in a rectangular site. The length of the site is $a$ and the width is $b$. The site needs to accommodate as many beds as possible. Each bed needs to occupy a square area with a length of $c×c$, and the edges of the square are parallel to the boundaries of the site. How many beds can be placed at most?",
        "function_declaration": "int calculate(int a, int b, int c)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n  int a, b, c;\n  cin >> a >> b >> c;\n  \n  // calling start\n  int result = calculate(a, b, c);\n  // calling end\n  \n  cout << result;\n}",
        "example": "[{\"input\": \"7 5\\n2\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1582,
        "problem_description": "The time between January 1, 2001 and December 31, 2100 is called the 21st century. Enter a year and output all the leap years from the beginning of the 21st century until that year. Enter an integer representing a year in the 21st century. Output each leap year that satisfies the condition on a separate line. If the input year does not belong to the 21st century, output \"Invalid year!\". If there are no leap years, output \"None\".",
        "function_declaration": "void printLeapYears(int year)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int year;\n    cin>>year;\n    // calling start\n    printLeapYears(year);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2005\", \"output\": \"2004\"}, {\"input\": \"2000\", \"output\": \"Invalid year!\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2101,
        "problem_description": "Little Wan loves the number 8 because he knows that when it is turned sideways, it represents infinity. Little Orange asks, \"Little Wan, do you really understand 8?\" Little Wan looks at Little Orange with a disdainful expression. Little Orange continues, \"Do you know how many 8s there are in the numbers from 1 to 100?\" Immediately, Little Wan looks dejected and uneasy, his face turns gray, and he mutters some words; this time, they are all 8, 18, 28... and so on, some of which he doesn't understand. At this moment, everyone bursts into laughter: the classroom is filled with a joyful atmosphere. Please help Little Wan out of this situation! He will definitely be very grateful to you. In plain language, the question is: Given a range of numbers from 1 to n, how many times does the digit 8 appear? (For example, 18 and 81 count as one occurrence, while 88 counts as two occurrences.)",
        "function_declaration": "int countEights(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n = 0;\n\tcin >> n;\n\t// calling start\n\tint result = countEights(n);\n\t// calling end\n\tcout << result << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"88\\n\", \"output\": \"18\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2071,
        "problem_description": "Xiao Orange asked Xiao Wan for help in buying snacks. Xiao Orange only wants to eat one type of snack today, so she knows that Xiao Wan will buy at most two types of snacks (the other one is what Xiao Wan wants to eat). Unless Xiao Wan is also helping someone else buy snacks. Come and check if there are only up to two types of snacks! Input an integer $n$, representing the number of snacks Xiao Wan is buying, followed by $n$ integers representing the type of each snack.",
        "function_declaration": "bool checkNumbers(int n, int numbers[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n = 0;\n\tcin >> n;\n\tint numbers[n];\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> numbers[i];\n\t}\n\t// calling start\n\tbool result = checkNumbers(n, numbers);\n\t// calling end\n\tif (result) cout << \"yes\" << endl;\n\telse cout << \"no\" << endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \"4\\n1 1 2 2\\n\", \"output\": \"yes\\n\"}, {\"input\": \"3\\n1 2 3\\n\", \"output\": \"no\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2113,
        "problem_description": "The number of factors of a positive integer is defined as the number of positive integers b that divide the positive integer a without leaving a remainder. If a*b=c (where a, b, and c are all positive integers), then a and b are factors of c. Given a positive integer, output the number of factors it has. Input a positive integer a. For 40% of the data, $a \\le 10000$; for 100% of the data, $a \\le 10^{12}$.",
        "function_declaration": "long long calculateDivisors(long long a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tlong long a;\n\tcin>>a;\n\t// calling start\n\tlong long result = calculateDivisors(a);\n\t// calling end\n\tcout<<result;\n}",
        "example": "[{\"input\": \"17\", \"output\": \"2\"}, {\"input\": \"63\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2341,
        "problem_description": "How many levels can Xiao Ai pass at most? Xiao Ai is participating in a game with two types of levels: artistic and sports. Each type of game has n levels, and they must be cleared in order. That is, Xiao Ai must first pass the previous level of a certain type of game before challenging the next level of that type. Xiao Ai has limited challenge time, denoted as t. Each level has a different clearance time. There are n integers a1, a2, ..., an, representing the clearance time for artistic levels, and n integers b1, b2, ..., bn, representing the clearance time for sports levels. Xiao Ai can freely switch between the types of levels.",
        "function_declaration": "int calculateMax(int n, int tim, int a[], int b[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint a[100010], b[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, t, tim;\n    cin >> n >> tim;\n    for (int i = 1; i <= n; i++) {\n        cin >> t;\n        a[i] = a[i - 1] + t;\n    }\n    for (int i = 1; i <= n; i++) {\n        cin >> t;\n        b[i] = b[i - 1] + t;\n    }\n\n    // calling start\n    int result = calculateMax(n, tim, a, b);\n    // calling end\n\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"4 22\\n6 8 10 7\\n7 11 9 9\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2319,
        "problem_description": "TV will broadcast $n$ programs. The $i$-th program starts at time $s_i$ and ends at time $t_i$, without replay. Xia Ai has two video recorders, each of which can only record one program at a time. How many complete programs can Xia Ai record at most? If the end time of one program is equal to the start time of another program, then these two programs can be recorded with one video recorder.",
        "function_declaration": "int maxCompletePrograms(int n, vector<pair<int, int>>& programs)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Function to find the maximum number of complete programs that can be recorded\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<pair<int, int>> programs(n);\n    for (int i = 0; i < n; i++) {\n        cin >> programs[i].first >> programs[i].second;\n    }\n\n    // Calling the function to find the maximum number of complete programs that can be recorded\n    //calling start\n    int result = maxCompletePrograms(n, programs);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 5\\n2 6\\n8 10\\n3 9\\n5 10\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1632,
        "problem_description": "You have several empty integer sequences that need the following operations: If the command is 1 x y, it means you need to insert the integer y at the end of the x-th sequence. If the command is 2 x, it means you need to delete a number from the end of the x-th sequence, ensuring that the sequence is not empty before deletion. If the command is 3, it means you need to query the elements contained in all the current sequences. Each sequence should be output on a separate line, and the sequences should be output in the order they were input. It is guaranteed that there will be at most 2 commands of type 3. Input two integers n m, representing the number of sequences and the number of operations. It is guaranteed that n ≤ 10^5 and m ≤ 5 * 10^5. Input m commands as described in the problem. Return the sequences after executing the m commands.",
        "function_declaration": "vector<vector<int>> operateSequences(int n, int m, vector<vector<int>>& commands)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    vector<vector<int>> commands(m, vector<int>(3));\n    for(int i=0; i<m; i++){\n        for(int j=0; j<3; j++){\n            cin>>commands[i][j];\n        }\n    }\n    // calling start\n    vector<vector<int>> result = operateSequences(n, m, commands);\n    // calling end\n    for(int i=0; i<n; i++){\n        if(result[i].empty()){\n            cout<<\"none\"<<endl;\n        }\n        else{\n            for(int j=0; j<result[i].size(); j++){\n                cout<<result[i][j]<<\" \";\n            }\n            cout<<endl;\n        }\n    }\n}",
        "example": "[{\"input\": \"2 7\\n1 1 3\\n3\\n1 1 4\\n1 2 1\\n1 2 2\\n2 1\\n3\", \"output\": \"3\\nnone\\n3\\n1 2\"}]",
        "time_limit": 5000,
        "memory_limit": 256
    },
    {
        "id": 1759,
        "problem_description": "Suppose we have a set {1,2,3......n}, output the number of subsets that satisfy the condition that the sum of all numbers in the set is a multiple of 5. For example, when n=4, the number of subsets in the set {1,2,3,4} that have a sum of multiples of 5 is 4, which are: {1 4}, {2 3}, {1 2 3 4}, {}. Please calculate the number of subsets that meet the requirements for different values of n.",
        "function_declaration": "int calculate_ans(int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    int ans = calculate_ans(n);\n    // calling end\n    cout << ans;\n    return 0;\n}",
        "example": "[{\"input\": \"4\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1977,
        "problem_description": "As is well known, the distribution of remainders of $x^n$ modulo a fixed number $m$ follows a pattern, which is called the orbit of $x$ in the modulo $m$ field in algebra. Taking a simple example, for $3^1,3^2,3^3,\\cdots$ modulo 7, the remainders are: $$(3,2,6,4,5,1),(3,2,6,4,5,1),\\ldots$$ It can be seen that the remainders modulo 7 repeat in a cycle. So, can you find the pattern in this? To simplify the problem, we only consider the cycle when modulo 11. Given an integer $n$, can you output the remainder of $3^n$ modulo 11? The input is an integer $n$ ($0\\leq n\\leq 10^9+1$), and the output is $3^n\\%11$.",
        "function_declaration": "int calculateModulo(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    // calling start\n    int result = calculateModulo(n);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"0\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1741,
        "problem_description": "There are n points on a number line, and now it's necessary to place m markers in order to minimize the sum of distances between each point and its nearest marker. You're required to calculate the minimum sum of distances. In this context, markers can coincide with the points on the number line. If they do coincide, the distance from that point to the marker can be considered as zero. The input consists of two integers, n and m (1 ≤ m ≤ n ≤ 200), representing the number of points and the number of markers, respectively. The Distances array contains n - 1 integers, indicating the distances between consecutive points on the number line, denoted as d (1 ≤ d ≤ 100). Your task is to return an integer representing the minimum sum of distances.",
        "function_declaration": "int calculateMinDistanceSum(int n, int m, vector<int>& distances) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the minimum distance sum\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> distances(n - 1);\n    for (int i = 0; i < n - 1; ++i) {\n        cin >> distances[i];\n    }\n\n    // Calling the function to calculate the minimum distance sum\n    //calling start\n    int minSum = calculateMinDistanceSum(n, m, distances);\n    //calling end\n\n    cout << minSum << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"10 2\\n3 1 3 1 1 1 1 1 3\", \"output\": \"18\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1865,
        "problem_description": "In the class, there are several students. Given the height (in meters, as decimals) of each student, find the maximum and minimum height among all the students in the class, rounded to one decimal place.",
        "function_declaration": "pair<float, float> findMinMax(int n, vector<float> heights)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;//人数 \n    vector<float> heights(n);\n    for (int i = 0; i < n; i++) {\n        cin >> heights[i];\n    }\n    // calling start\n    pair<float, float> result = findMinMax(n, heights);\n    // calling end\n    printf(\"%.1f\\n%.1f\", result.first, result.second);\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1.6\\n1.4\\n1.8\\n1.7\\n1.5\", \"output\": \"1.8\\n1.4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2328,
        "problem_description": "Given n non-negative integers, output the largest number. Little A thinks this question is too simple, so he decides to increase the difficulty a bit. Little A will give you q inquiries, each time giving two positive integers l and r, indicating the largest number inquiring from the l-th to the r-th numbers.",
        "function_declaration": "vector<int> answerQueries(int n, vector<int>& numbers, int q, vector<pair<int, int>>& queries) ",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<int> numbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> numbers[i];\n    }\n\n    vector<pair<int, int>> queries(q);\n    for (int i = 0; i < q; i++) {\n        cin >> queries[i].first >> queries[i].second;\n    }\n\n    // Calling the function to answer the queries\n    //calling start\n    vector<int> result = answerQueries(n, numbers, q, queries);\n    //calling end\n\n    // Outputting the results\n    for (int i = 0; i < q; i++) {\n        cout << result[i] << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"10 3\\n1 8 3 4 8 0 7 1 9 3\\n1 6\\n6 8\\n10 10\", \"output\": \"8\\n7\\n3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2262,
        "problem_description": "As the summer vacation is coming to an end, the members of the band \"Ending Ensemble\" realized that they haven't gone on a trip together yet. Therefore, the group decided to visit Enoshima Island. The current date is August 25th, and everyone hopes to plan this trip between the 25th and 31st of August as early as possible. However, each member has their own schedule, and they need to find a time slot when everyone is available. The trip must be scheduled within a continuous time period from 8 AM to 8 PM on a single day, and the duration must be at least 6 hours. You are given the schedules of the four band members. For each member, a schedule is described by a string s and three integers t, a, b. Here, s represents the band member's name (\"Nijika\", \"Ryo\", \"Bocchi\", or \"Kita\"), t is the day of August, and a and b are the starting and ending hours of their commitment. For 20% of the data, $b \\le 12$; and for 100% of the data, $n \\le 100$, s is one of \"Nijika\", \"Ryo\", \"Bocchi\", \"Kita\", $25 \\le t \\le 31$, and $8 \\le a < b \\le 20$. Your task is to return an integer between 25 and 31, indicating the earliest possible date for arranging the summer trip. If everyone is too busy and there is no suitable date, return -1.",
        "function_declaration": "int findEarliestDate(int n, vector<string> names, vector<int> days, vector<int> startTimes, vector<int> endTimes)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<string> names(n);\n    vector<int> days(n);\n    vector<int> startTimes(n);\n    vector<int> endTimes(n);\n    for(int i=0; i<n; i++){\n        cin>>names[i]>>days[i]>>startTimes[i]>>endTimes[i];\n    }\n    // calling start\n    int result = findEarliestDate(n, names, days, startTimes, endTimes);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"7\\nNijika 26 8 10\\nKita 25 13 16\\nNijika 27 11 12\\nRyo 27 18 20\\nRyo 31 18 20\\nKita 28 10 15\\nKita 26 14 18\", \"output\": \"27\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1925,
        "problem_description": "Threefold Game is a single-player game. The player will receive n integers $a_1$, $a_2$, ..., $a_n$. The player needs to pair these numbers in pairs, so as to maximize the number of pairs whose sum is a multiple of 3. Please design a pairing scheme and output the maximum number of pairs whose sum is a multiple of 3. 1 ≤ $a_i$ ≤ 1,000,000; for 50% of the data, 1 ≤ n ≤ 1000; for 100% of the data, 1 ≤ n ≤ 100000.",
        "function_declaration": "int findMaxPairs(vector<int>& nums)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> nums[i];\n    }\n    //calling start\n    int result = findMaxPairs(nums);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"4\\n1 3 3 2\", \"output\": \"2\"}, {\"input\": \"6\\n1 2 3 4 5 6\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1830,
        "problem_description": "DNA is the main chemical component of chromosomes and also the material that makes up the genome. Its important components are: G Guanine, C Cytosine, A Adenine, and T Thymine. As a powerful assistant to the scientist Dr. Xiao, you need to sort the given multiple DNA fragments in descending order of their orderliness. We can view a fragment as a string (composed of A, C, G, T in order), and the orderliness of each fragment is represented by the number of gene pairs that are not in order. For example, in the gene sequence \"1AACTG\", there is only one pair \"T G\" that is not in order; while in the gene sequence \"2CGTA\", \"CA\", \"GA\", and \"TA\" are all not in order, totaling three pairs. Therefore, we consider the gene sequence \"1\" to be more orderly than the gene sequence \"2\". However, there might be multiple gene sequences with the same level of orderliness. In such cases, we sort them in ascending order of length. If the lengths are the same, we arrange them in lexicographical order and output. Given an array of gene sequences \"genes\", please sort it according to the requirements of the problem.",
        "function_declaration": "void sortGenes(vector<string>& genes)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int N;\n    cin >> N;\n\n    for (int i = 0; i < N; i++) {\n        int k;\n        cin >> k;\n        vector<string> genes(k);\n\n        for (int j = 0; j < k; j++) {\n            cin >> genes[j];\n        }\n\n        //calling start\n        sortGenes(genes);\n        //calling end\n\n        for (int j = 0; j < k; j++) {\n            cout << genes[j] << endl;\n        }\n\n        // Print an empty line between each group of data\n        if (i < N - 1) {\n            cout << endl;\n        }\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"2\\n6\\nAACATGAAGG\\nTTTTGGCCAA\\nTTTGGCCAAA\\nGATCAGATTT\\nCCCGGGGGGA\\nATCGATGCAT\\n3\\nCA\\nGC\\nACG\", \"output\": \"CCCGGGGGGA\\nAACATGAAGG\\nGATCAGATTT\\nATCGATGCAT\\nTTTTGGCCAA\\nTTTGGCCAAA\\n\\nACG\\nCA\\nGC\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1617,
        "problem_description": "$A_1, A_2, ..., A_n$ is an array consisting of $n$ natural numbers (non-negative integers). On this basis, we use the array $B_1, ..., B_n$ to represent the prefix maximum values of $A$. $B_i = \\max{A_1, A_2, ..., A_i}$ is defined as the maximum value of the first $i$ numbers in array $A$. According to this definition, it is easy to see that $A_1 = B_1$, and as $i$ increases, $B_i$ is non-decreasing. Additionally, we use $sum = A_1 + A_2 + ... + A_n$ to represent the sum of the $n$ numbers in array $A$. Given the array $B$, we want to deduce the possible values of array $A$ based on the values of $B$. Clearly, for a given $B$, the values of $A$ may not be unique. Try to calculate the maximum and minimum values of $sum$ among all possible values of array $A$. Input contains a positive integer $n$ and $n$ natural numbers $B_1, B_2, ..., B_n$. 50% of the test data satisfy that the array $B$ is monotonically increasing, i.e., $0 < B_1 < B_2 < ... < B_n < 10^5$; all the test data satisfy $n \\leq 100$ and the array $B$ is monotonically non-decreasing, i.e., $0 \\leq B_1 \\leq B_2 \\leq ... \\leq B_n \\leq 10^5$. Output two lines. The first line outputs an integer representing the maximum value of $sum$. The second line outputs an integer representing the minimum value of $sum$.",
        "function_declaration": "void calculateSumMinMax(int n, vector<int>& B)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> B(n);\n    for(int i=0; i<n; i++){\n        cin>>B[i];\n    }\n    // calling start\n    calculateSumMinMax(n, B);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n0 0 5 5 10 10\", \"output\": \"30\\n15\"}, {\"input\": \"7\\n10 20 30 40 50 60 75\", \"output\": \"285\\n285\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2050,
        "problem_description": "DarkSharpness, also known as Professor Dark, is a famous mathematician in Country C. Now, she has four numbers in front of her. As a mathematician, she can immediately determine whether the average of these four numbers is positive or negative. Now, she wants to test you. She will give you four numbers, and you need to determine whether their average is positive or negative. In simple terms, if the average of the four integers is greater than 0, output \"Larger than 0\". If the average of the four integers is exactly 0, output \"Exactly 0\". If the average of the four integers is smaller than 0, output \"Smaller than 0\".",
        "function_declaration": "string calculateSum(int a, int b, int c, int d)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int a,b,c,d;\n    cin >> a >> b >> c >> d;\n    // calling start\n    string result = calculateSum(a, b, c, d);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"1 2 3 -2\", \"output\": \"Larger than 0\"}, {\"input\": \"11 4 -5 -14\", \"output\": \"Smaller than 0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2077,
        "problem_description": "Mr. Chayso has a string of characters in front of him. Out of curiosity, he wants to know how many uppercase letters and how many lowercase letters are in this string. Please write a program to help him solve this problem. Specifically, please do not use character arrays. The first integer represents the number of lowercase letters, and the second integer represents the number of uppercase letters.",
        "function_declaration": "pair<int, int> countLetters(int n, char c[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    char c[100];\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        cin >> c[i];\n    }\n    // calling start\n    pair<int, int> result = countLetters(n, c);\n    // calling end\n    cout << result.first << '\\n' << result.second;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\nABcd0\", \"output\": \"2\\n2\"}]",
        "time_limit": 1000,
        "memory_limit": 8
    },
    {
        "id": 2302,
        "problem_description": "Given $n$ numbers, it is known that the order in which these numbers are pushed into the stack is $1,2,...,n$. Given an order of popping out $a_1,a_2,...,a_n$, please determine if it is a valid popping order. For example, if the popping order is 4 5 3 2 1, the corresponding stack operations are as follows: 1 push into stack, 2 push into stack, 3 push into stack, 4 push into stack, 4 pop out of stack, 5 push into stack, 5 pop out of stack, 3 pop out of stack, 2 pop out of stack, 1 pop out of stack.",
        "function_declaration": "bool checkStackSequence(int n, int sequence[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint sequence[100000];\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> sequence[i];\n\t}\n\t// calling start\n\tbool result = checkStackSequence(n, sequence);\n\t// calling end\n\tif (result) cout << \"Valid\";\n\telse cout << \"Invalid\";\n}",
        "example": "[{\"input\": \"5\\n4 5 3 2 1\", \"output\": \"Valid\"}, {\"input\": \"2\\n1 1\", \"output\": \"Invalid\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1893,
        "problem_description": "When a player fails or encounters an embarrassing situation in the game, there is usually a crow flying by and making the sound \"ah ah ah ah ah ah\". Please use a while loop to output the following effect: ah\nah\nah\nah\nah\nah",
        "function_declaration": "void printAh(int times)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int times = 6;\n    // calling start\n    printAh(times);\n    // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"啊\\n啊\\n啊\\n啊\\n啊\\n啊\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1700,
        "problem_description": "There is a wall with a size of 2*a. Now it needs to be covered with two types of tiles, with dimensions of 2 * 1 and 2 * 2 respectively. Please calculate the total number of possible tiling methods.",
        "function_declaration": "int calculateF(int a)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint f[50];\n\n// function start\n\n// function end\n\nint main(){\n    int a, t;\n    cin >> t;\n    // calling start\n    while (t--) {\n        cin >> a;\n        cout << calculateF(a) << endl;\n    }\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n2\\n8\\n12\", \"output\": \"3\\n171\\n2731\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1845,
        "problem_description": "Given the preorder traversal and inorder traversal of a binary tree, find its postorder traversal. Input two strings, both with a length n less than or equal to 26. The first line is the preorder traversal, and the second line is the inorder traversal. The node names in the binary tree are represented by uppercase letters: A, B, C... up to a maximum of 26 nodes.",
        "function_declaration": "void doit(char *pre, char *in, int length)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main()\n{\n    char pre[30], in[30];\n    int length;\n    while (scanf(\"%s%s\", pre, in) != EOF) {\n        length = strlen(pre);\n  //calling start\n        doit(pre, in, length);\n  //calling end\n        cout << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"ABC\\nCBA\\nABCDEFG\\nDCBAEFG\", \"output\": \"CBA\\nDCBGFEA\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1654,
        "problem_description": "Given k (1<k<100) positive integers, each of which is greater than or equal to 1 and less than or equal to 10. Write a program to calculate the number of times 1, 5, and 10 appear among the given k positive integers. Input k positive integers, with each pair of positive integers separated by a space. Output three lines, the first line is the number of times 1 appears, the second line is the number of times 5 appears, and the third line is the number of times 10 appears.",
        "function_declaration": "void countOccurrences(int k)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int k;\n    cin >> k;\n    //calling start\n    countOccurrences(k);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 5 8 10 5\", \"output\": \"1\\n2\\n1\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2182,
        "problem_description": "English translation: \nThere are n books, and the price of the i-th book is a_i. Xiaoi wants to buy all these books and bring them home. Currently, there is a buy-two-get-one-free promotion, which means that for every two books purchased, one can be taken for free, as long as the price of the free book does not exceed the price of any of the two paid books. How much money is needed at least to buy all n books and bring them home?",
        "function_declaration": "int calculateSum(int a[], int n)",
        "code_context": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint n, ans, a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    // calling start\n    ans = calculateSum(a, n);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n1 3 2 4 5 6\", \"output\": \"16\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2233,
        "problem_description": "Given n integers and q queries, each query provides a number a. Ask if it is possible to select 3 repeatable numbers from the n numbers, such that their sum is a.",
        "function_declaration": "vector<string> canSumToA(int n, int q, vector<int>& numbers, vector<int>& queries)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, q;\n    cin >> n >> q;\n\n    vector<int> numbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> numbers[i];\n    }\n\n    vector<int> queries(q);\n    for (int i = 0; i < q; i++) {\n        cin >> queries[i];\n    }\n    //calling start\n    vector<string> result = canSumToA(n, q, numbers, queries);\n    //calling end\n\n    for (const string& answer : result) {\n        cout << answer << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"2 3\\n-1 10\\n-3\\n8\\n20\", \"output\": \"Yes\\nYes\\nNo\"}]",
        "time_limit": 2000,
        "memory_limit": 512
    },
    {
        "id": 1765,
        "problem_description": "Given two strings, we need to insert the second string exactly in the middle of the first string. The length of the first string is always even. Please output the resulting string after insertion.",
        "function_declaration": "void insertString(char* a, char* b)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nchar a[110], b[60];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> a >> b;\n    // calling start\n    insertString(a, b);\n    // calling end\n    cout << a;\n    return 0;\n}",
        "example": "[{\"input\": \"ABCD\\nqwe\", \"output\": \"ABqweCD\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2257,
        "problem_description": "Professor Dark heard that you have studied arrays and decided to test you with a related question. She will now give you a sequence of n integers. Next, she will provide m operations. Each operation will input two integers x and y, indicating that the values of the first x elements should be increased by y. After m operations, she wants to know what the final sequence becomes. Can you tell her? Input n integers, representing the sequence, and input m lines, each line containing two integers x and y representing one operation. Ensure that all input integers have an absolute value not exceeding 1000 and are valid.",
        "function_declaration": "vector<int> finalSequence(int n, int m, vector<int>& nums, vector<pair<int, int>>& operations)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to perform the operations on the sequence\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    vector<pair<int, int>> operations(m);\n    for (int i = 0; i < m; i++) {\n        int x, y;\n        cin >> x >> y;\n        operations[i] = make_pair(x, y);\n    }\n\n    // Calling the function to perform operations on the sequence\n    //calling start\n    vector<int> result = finalSequence(n, m, nums, operations);\n    //calling end\n\n    for (int i = 0; i < n; i++) {\n        cout << result[i] << endl;\n    }\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"5 3\\n0 0 0 1 0\\n1 -1\\n2 3\\n5 2\", \"output\": \"4\\n5\\n2\\n3\\n2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2037,
        "problem_description": "Question: Xiao Wan has some apples and wants to share them with Xiao Cheng and another classmate. When the apples cannot be divided equally, if there is only one extra apple, Xiao Wan will give it to Xiao Cheng. If there are two extra apples, Xiao Wan will buy one more. Given N apples, how many apples will Xiao Wan, Xiao Cheng, and the other classmate each get? Output three integers in one line, separated by spaces.",
        "function_declaration": "void shareApples(int n) ",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    //calling start\n    shareApples(n);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n\", \"output\": \"1 1 1\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1658,
        "problem_description": "Every officially published book has an associated ISBN number. An ISBN consists of 9 digits, a single checksum digit, and three hyphens, following the specified format 'x-xxx-xxxxx-x'. The hyphen symbol '-' serves as a separator (the minus key on the keyboard), and the last digit is the checksum. For example, 0-670-82162-4 is a standard ISBN. The first digit of the ISBN represents the language of the publication, with 0 indicating English. The three digits after the first hyphen represent the publishing house, where 670 corresponds to the Viking Publishing House. The five digits after the second hyphen represent the book's number within the publishing house. The last digit is the checksum. The checksum is calculated as follows: Multiply the first digit by 1, add the second digit multiplied by 2, and so on. Calculate the sum using these weights, and then take the result modulo 11. The remainder obtained is the checksum. If the remainder is 10, the checksum is represented as the capital letter 'X'. For example, the checksum 4 for the ISBN 0-670-82162-4 is calculated as follows: Consider the sequence 067082162, multiply each digit by its position (1 through 9), and sum the results: 0×1 + 6×2 + ... + 2×9 = 158. Taking 158 modulo 11 gives a remainder of 4, which becomes the checksum. Your task is to write a program that calculates the checksum. The input is a character sequence representing an ISBN number (guaranteed to conform to the ISBN format requirements). Return the calculated checksum。\n\n\n\n\n\n",
        "function_declaration": "int calculateCode(char* str)",
        "code_context": "#include <bits/stdc++.h> \nusing namespace std;  \nchar str[20];  \n\n// function start\n\n// function end\n\nint main() {  \n    scanf(\"%s\", str);  \n\n    // calling start\n    int tmp = calculateCode(str);\n    // calling end\n\n    char c = tmp == 10 ? 'X' : tmp + '0';  // 计算识别码  \n    if (str[strlen(str) - 1] == c) \n        printf(\"Right\");  \n    else {  \n        str[strlen(str) - 1] = c;  \n        printf(\"%s\", str);  \n    }  \n    return 0;  \n}",
        "example": "[{\"input\": \"0-670-82162-4\", \"output\": \"Right\"}, {\"input\": \"0-670-82162-0\", \"output\": \"0-670-82162-4\"}]",
        "time_limit": 1000,
        "memory_limit": 50
    },
    {
        "id": 1762,
        "problem_description": "The final exam is over. A total of 5 subjects were tested, and a total of 10 people failed. Assuming the number of failures for these 10 people is: 1, 2, 2, 2, 1, 3, 4, 1, 2, 3. The number of people who failed 1 subject to 4 subjects can be counted as: 3, 4, 2, 1. The failure situation of these 10 people, in ascending order, is: 1 1 1 2 2 2 2 3 3 4. Now, input 10 integers representing the number of failures for these 10 people, and please output these 10 data in ascending order.",
        "function_declaration": "void sortScores(vector<int>& scores)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    vector<int> scores(10);\n    for(int i=0; i<10; i++){\n        cin>>scores[i];\n    }\n    // calling start\n    sortScores(scores);\n    // calling end\n}",
        "example": "[{\"input\": \"2 1 3 4 2 2 3 1 1 2\", \"output\": \"1 1 1 2 2 2 2 3 3 4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2000,
        "problem_description": "English translation: Xiao Ai has obtained $a$ gold medals. The number of silver medals she has obtained is $b$ more than the number of gold medals, and the number of bronze medals she has obtained is $c$ more than the number of silver medals. How many medals did she obtain in total?",
        "function_declaration": "int calculateSum(int a, int b, int c)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int a, b, c;\n  cin >> a >> b >> c;\n  \n  // calling start\n  int result = calculateSum(a, b, c);\n  // calling end\n  \n  cout << result;\n}",
        "example": "[{\"input\": \"1\\n2\\n3\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2299,
        "problem_description": "Given a sequence of length $n$: $a_1,a_2,...,a_n$, and each element satisfies $1≤a_i≤k$. Please find a sequence in which each element is also not greater than $k$ and not less than 1, and the new sequence is not a subsequence of the original sequence (a subsequence refers to a sequence formed by some elements in the original sequence, and these elements do not have to be consecutive in the original sequence). Please output the shortest length of the new sequence.",
        "function_declaration": "int calculateLength(int n, int k, int arr[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n    int n, k;\n    cin >> n >> k;\n    int arr[n];\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n    // calling start\n    int result = calculateLength(n, k, arr);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"5 2\\n2 2 1 1 2\", \"output\": \"3\"}, {\"input\": \"9 3\\n1 2 3 1 2 3 1 2 3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1631,
        "problem_description": "There is an empty integer sequence. You need to perform the following operations: If the command is 1 x, it means you need to insert the integer x at the end of the sequence. If the command is 2 x, it means you need to delete the xth number from the front to the back. It is guaranteed that x is always less than or equal to the current number of integers in the sequence. If the command is 3 x, it means you need to output the xth number from the front to the back. It is guaranteed that x is always less than or equal to the current number of integers in the sequence. The first line of input is an integer m, indicating the number of operations. It is guaranteed that m ≤ 10^3. The next m lines each contain two integers, the first number represents the type of operation, and the second number x represents the parameter of this operation, as described in the question. Output a line of several integers, which are the numbers output by command 3, separated by spaces.",
        "function_declaration": "vector<int> operateSequence(int m, vector<pair<int, int>>& operations)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int m;\n    cin>>m;\n    vector<pair<int, int>> operations;\n    for(int i=0; i<m; i++){\n        int type, x;\n        cin>>type>>x;\n        operations.push_back(make_pair(type, x));\n    }\n    // calling start\n    vector<int> result = operateSequence(m, operations);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n1 1\\n1 2\\n1 3\\n2 2\\n3 1\\n3 2\", \"output\": \"1 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1634,
        "problem_description": "Given an integer sequence, find a continuous segment in it such that the sum of this continuous subsequence is maximum. If all the numbers in the integer sequence are negative, the answer is zero.",
        "function_declaration": "int calculateMaxSum(int n, int a[], int sum[])",
        "code_context": "#include <iostream>\n\n#define N 2010\n\nusing namespace std;\n\nint a[N], sum[N];\n\n// function start\n\n// function end\n\nint main() {\n    int n, ans = 0;\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    // calling start\n    ans = calculateMaxSum(n, a, sum);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n2 -1 3 -4 3\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1859,
        "problem_description": "Given a grid map, where 0 represents passable areas and 1 represents impassable areas, and we can only move horizontally and vertically. Given a starting point and a target point, please find a path that minimizes the number of turns and calculate the minimum number of turns. Input a two-dimensional array describing the map, with 0 indicating passable areas and 1 indicating impassable areas. Input the starting position and the target position. Return an integer indicating the minimum number of directional changes.",
        "function_declaration": "int calculateMinTurns(vector<vector<int>>& grid, pair<int, int> start, pair<int, int> target)",
        "code_context": "   #include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    \n    vector<vector<int>> grid(n, vector<int>(m));\n    for(int i=0; i<n; i++){\n        for(int j=0; j<m; j++){\n            cin>>grid[i][j];\n        }\n    }\n    \n    pair<int, int> start, target;\n    cin>>start.first>>start.second;\n    cin>>target.first>>target.second;\n    \n    // calling start\n    int result = calculateMinTurns(grid, start, target);\n    // calling end\n    \n    cout<<result;\n}",
        "example": "[{\"input\": \"5 7\\n1 0 0 0 0 1 0 \\n0 0 1 0 1 0 0 \\n0 0 0 0 1 0 1 \\n0 1 1 0 0 0 0 \\n0 0 0 0 1 1 0\\n1 3\\n1 7\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2214,
        "problem_description": "Nine-grid input method is suitable for use on mobile phones. Its layout on the screen is as follows: 1 2abc 3def 4ghi 5jkl 6mno 7pqrs 8tuv 9wxyz 0. To type an \"x\", you need to press 9 twice. The first press of the 9 key will display \"w\", and the second press will change \"w\" to \"x\". Note that the 0 key is used to type a space. Given a character sequence consisting only of lowercase letters and spaces, please calculate the total number of key presses required using the nine-grid input method.",
        "function_declaration": "int calculateKeyPresses(const string& input)",
        "code_context": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n//function start\n//function end\n\nint main() {\n    string input;\n    getline(cin, input);\n    //calling start\n    int totalKeyPresses = calculateKeyPresses(input);\n    //calling end\n    cout << totalKeyPresses << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"hello world\", \"output\": \"25\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1563,
        "problem_description": "Please input n numbers in order, and output these n numbers in reverse order. For example, if the input is 3 numbers: 1 3 5, please output 5 3 1. Where 1 <= n <= 100.",
        "function_declaration": "void reversePrint(int n, int nums[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    int nums[101];\n    \n    cin >> n;\n    \n    for (int i=0; i<n; i++)\n        cin >> nums[i];\n    \n    // calling start\n    reversePrint(n, nums);\n    // calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"3\\n2 1 3\", \"output\": \"3 1 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1647,
        "problem_description": "Given a sequence of length n (1 ≤ n ≤ 10^5) where elements are guaranteed to be unique, we want to determine if certain numbers appear in this sequence. The array \"nums\" contains n integers, representing the elements of the sequence. The array \"Queries\" contains m integers, indicating the numbers we want to query. Please note that the numbers could potentially exceed the storage range of an integer. Your task is to return m strings, corresponding to the results of the queries. If the queried number is present in the sequence, return \"yes\"; otherwise, return \"no\".",
        "function_declaration": "vector<string> checkNumbers(vector<int> nums, vector<int> queries)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    vector<int> nums(n);\n    for(int i=0; i<n; i++){\n        cin>>nums[i];\n    }\n    vector<int> queries(m);\n    for(int i=0; i<m; i++){\n        cin>>queries[i];\n    }\n    // calling start\n    vector<string> result = checkNumbers(nums, queries);\n    // calling end\n    for(int i=0; i<result.size(); i++){\n        cout<<result[i]<<endl;\n    }\n}",
        "example": "[{\"input\": \"3 2\\n1 2 3\\n1 10\", \"output\": \"yes\\nno\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1943,
        "problem_description": "Read in three integers, output them right-aligned with a width of 8 characters for each integer, separated by a space.",
        "function_declaration": "void printFormatted(int a, int b, int c)",
        "code_context": "#include <iostream> \nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a, b, c;\n    cin >> a >> b >> c;\n\n    // calling start\n    printFormatted(a, b, c);\n    // calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"123456789 0 -1\", \"output\": \"123456789        0       -1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2083,
        "problem_description": "The Spring Kindergarten held its annual \"Building Blocks Competition\". The content of this year's competition is to build a building with a width of $n$. The building can be seen as composed of $n$ blocks of width $1$, and the final height of the $i$-th block needs to be $h_i$. Before the construction begins, there are no blocks (which can be seen as $n$ blocks with a height of $0$). In each subsequent operation, the children can choose a continuous interval $[l, r]$, and then increase the height of all blocks between the $L$-th and $R$-th blocks (including the $L$-th and $R$-th blocks) by $1$. Little M is a clever child and quickly came up with the best strategy to build the building with the fewest number of operations. However, she is not a child who is diligent in doing things, so she would like to ask for your help in implementing this strategy and finding the minimum number of operations required. The input contains an integer $n$, representing the width of the building, and an array containing $n$ integers. The $i$-th integer is $h_i$. Output the minimum number of operations required to build the building.",
        "function_declaration": "int minimumOperations(int n, vector<int>& heights)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> heights(n);\n    for (int i = 0; i < n; i++) {\n        cin >> heights[i];\n    }\n\n    //calling start\n    int minOperations = minimumOperations(n, heights);\n    cout << minOperations << endl;\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n2 3 4 1 2\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2275,
        "problem_description": "Given an integer array of length n, find a continuous segment of numbers (at least 1) with the maximum sum. Return an integer representing the sum of the continuous segment of numbers you found.",
        "function_declaration": "long long findMaxSubarraySum(int n, vector<long long>& arr)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tint n;\n\tcin >> n;\n\tvector<long long> arr(n);\n\tfor(int i = 0; i < n; ++i){\n\t\tcin >> arr[i];\n\t}\n\t// calling start\n\tlong long ans = findMaxSubarraySum(n, arr);\n\t// calling end\n\tcout << ans;\n}",
        "example": "[{\"input\": \"9\\n-1 8 3 -7 5 3 -9 2 6\", \"output\": \"12\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1559,
        "problem_description": "The English translations of Monday to Sunday are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday. Input an integer from 1 to 7, and if the input is 1, output Monday; if the input is 2, output Tuesday; ... if the input is 7, output Sunday; (Please use a switch statement to complete).",
        "function_declaration": "string getDay(int a)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    string day = getDay(a);\n    // calling end\n    cout << day;\n    return 0;\n}",
        "example": "[{\"input\": \"1\", \"output\": \"monday\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2144,
        "problem_description": "How many pieces can a round cake be divided into at most after cutting it with $n$ knives? For example, when $n=3$, it can be divided into a maximum of $7$ pieces.",
        "function_declaration": "int calculate_sum(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n   int n;\n   cin >> n;\n   // calling start\n   cout << calculate_sum(n) << \"\\n\";  \n   // calling end\n}",
        "example": "[{\"input\": \"1\", \"output\": \"2\"}, {\"input\": \"3\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1659,
        "problem_description": "English translation: Spring is the season of flowers, and daffodils are the most charming representatives. In mathematics, there is a concept called \"daffodil number,\" which is defined as follows: A \"daffodil number\" is a three-digit number where the sum of the cubes of its digits is equal to the number itself. For example, 153 = 1^3 + 5^3 + 3^3. Now, we need to output all the daffodil numbers within the range of m and n. If there are multiple numbers, they should be arranged in ascending order and separated by a space. If there are no daffodil numbers within the given range, output \"no\".",
        "function_declaration": "void findNarcissisticNumber(int m, int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int m, n;\n    cin>>m>>n;\n    // calling start\n    findNarcissisticNumber(m, n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"100 120\\n\", \"output\": \"no\\n\"}, {\"input\": \"300 380\", \"output\": \"370 371\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1822,
        "problem_description": "Given a sequence of numbers and a number C, calculate the number of pairs A-B=C (different positions of the same number are considered different pairs). Input n integers and c, output the number of pairs in the n integers that satisfy A-B=c.",
        "function_declaration": "long long  calculate_ans(int n, int c, int b[])",
        "code_context": "#include <cstdio> \n#include <cstring> \n#include <iostream> \n#include <algorithm> \n#define N 200005 \nusing namespace std; \n\nint n, c, b[N]; \n\n// function start\n\n// function end\n\nint main() { \n    scanf(\"%d%d\", &n, &c); \n    for (int i = 0; i < n; ++i) scanf(\"%d\", &b[i]); \n\n    // calong long ing start\n    long long  ans = calculate_ans(n, c, b);\n    // calong long ing end\n     \n    printf(\"%lld\\n\", ans); \n    return 0; \n}",
        "example": "[{\"input\": \"4 1\\n1 1 2 3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1701,
        "problem_description": "Given the equation 2x^3 - 4x^2 + 3x - 6 = 0, use the bisection method to find the root of this equation within the interval (l, r). The data guarantees that there is a root within the input interval. Calculate until the error is less than 10^-6.",
        "function_declaration": "double calculateMid(double l, double r)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n// function start\n\n\n// function end\n\nint main(){\n    double l, r, mid;\n    cin >> l >> r;\n    // calling start\n    mid = calculateMid(l, r);\n    // calling end\n    printf(\"%.6lf\\n\", mid);\n    return 0;\n}",
        "example": "[{\"input\": \"-10 10\", \"output\": \"2.000000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1945,
        "problem_description": "Given the dividend and divisor, find the integer quotient and remainder.",
        "function_declaration": "int calculate(int a, int b, int &div, int &mod)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int a,b;\n    int div, mod;\n    scanf(\"%d%d\",&a,&b);\n    // calling start\n    calculate(a, b, div, mod);\n    // calling end\n    printf(\"%d %d\",div,mod);\n}",
        "example": "[{\"input\": \"10 3\", \"output\": \"3 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1942,
        "problem_description": "Read in a double-precision floating-point number, preserving 12 decimal places, and output this floating-point number.",
        "function_declaration": "double process(double a)",
        "code_context": "#include <iostream> \nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    double a;\n    cin >> a;\n    // calling start\n    double result = process(a);\n    // calling end\n    printf(\"%.12f\", result);\n\n    return 0;\n}",
        "example": "[{\"input\": \"3.1415926535798932\", \"output\": \"3.141592653580\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2115,
        "problem_description": "Given n integers, select three of them to maximize their product.",
        "function_declaration": "long long findMaxProduct(long long arr[], long long n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nlong long n,a[2000];\n\n// function start\n\n// function end\n\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;++i) cin>>a[i];\n\t\n    // calling start\n\tlong long result = findMaxProduct(a, n);\n    // calling end\n\n\tcout<<result;\n}",
        "example": "[{\"input\": \"10\\n-3 4 3 0 4 1 -9 7 8 -1\", \"output\": \"224\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1731,
        "problem_description": "Translate the following Chinese question into English, preserving symbols and mathematical formulas. Please directly return the translated English without adding any extra words.\nChinese question: Use a recursive algorithm to convert a decimal number n into any base k (k<=16). For example, converting 17 into binary is: 10001, and converting 17 into hexadecimal is: 11. Hexadecimal numbers are represented using 0-9 and A-F.",
        "function_declaration": "string t(int n, int k)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\nchar d[16] = {'0','1', '2','3', '4','5', '6', '7', '8','9', 'A','B', 'C','D', 'E','F'};\n// function start\n\n\n// function end\n\nint main () {\n    int x, m;\n    cin >> x >> m;\n    // calling start\n    string res = t(x, m);\n    // calling end\n    cout << res << endl;\n    return 0; \n}",
        "example": "[{\"input\": \"17 2\", \"output\": \"10001\"}, {\"input\": \"17 16\", \"output\": \"11\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1697,
        "problem_description": "Output the Pascal's triangle with a height of n (1 ≤ n ≤ 36).【The leftmost and rightmost numbers of each row are 1, and each other number is the sum of the two numbers above it】.",
        "function_declaration": "void calculate(int n)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint f[60][60];\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    // calling start\n    calculate(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"5\", \"output\": \"1\\n1 1\\n1 2 1\\n1 3 3 1\\n1 4 6 4 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2339,
        "problem_description": "Professor Dark heard that you have learned recursive functions and she has come up with a difficult problem. Now, in front of you, there are several steps. Each time, you can jump up $a_1$ or $a_2$ or... or $a_m$ steps, which means there are m different ways to jump. Now, you need to answer how many ways there are to jump up to n steps in total. For example, when $n = 3$, $m = 2$, $a_1 = 2$, $a_2 = 1$. In this case, you can either jump 1 step three times in a row, or jump 2 steps first and then 1 step, or jump 1 step first and then 2 steps. So there are a total of three ways to jump.",
        "function_declaration": "int countWaysToReachN(int n, const vector<int>& stepSizes)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> stepSizes(m);\n    for (int i = 0; i < m; i++) {\n        cin >> stepSizes[i];\n    }\n\n    //calling start\n    int ways = countWaysToReachN(n, stepSizes);\n    //calling end\n\n    cout << ways << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"4 2\\n1 2\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2219,
        "problem_description": "In an algorithm competition, there are $n$ programs submitted to the competition platform. Testing each program requires two steps: compilation and execution. The competition platform has two servers, one dedicated to compilation and the other dedicated to execution. The compilation time for the $i$-th program is $a_i$, and the execution time for the $i$-th program is $b_i$. The servers must process tasks in the order of submission, which means the first program must be processed first and the $n$-th program must be processed last. Each server can only handle one task at a time. How much time does the platform need to test all the programs?",
        "function_declaration": "int calculateRunTime(int n, int arr[][2])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint arr[n][2];\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> arr[i][0] >> arr[i][1];\n\t}\n\t// calling start\n\tint result = calculateRunTime(n, arr);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"3\\n10 5\\n20 30\\n5 50\", \"output\": \"110\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2033,
        "problem_description": "Xiao Wan invited Xiao Cheng to listen to music together. A piece of music can be represented by $n$ musical notes, and each musical note can be represented by a number. Xiao Cheng likes changing music. Xiao Wan wants to know the length of the longest continuously changing consecutive section of musical notes in a song, as well as the length of the longest continuously unchanging consecutive section of musical notes.",
        "function_declaration": "pair<int, int> calculateMaxChangeAndContinual(int n, int* arr)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n = 0;\n\tcin >> n;\n\tint* arr = new int[n];\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> arr[i];\n\t}\n\t// calling start\n\tpair<int, int> result = calculateMaxChangeAndContinual(n, arr);\n\t// calling end\n\tcout << result.first << endl << result.second << endl;\n\tdelete[] arr;\n\treturn 0;\n}",
        "example": "[{\"input\": \"6\\n1 2 3 4 4 4 \\n\", \"output\": \"4\\n3\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1693,
        "problem_description": "Given a pyramid with n (n <= 200) layers, find a path from the top to any point on the bottom layer that maximizes the sum of the numbers along the path.",
        "function_declaration": "int calculateMaxSum(int n)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[210][210], f[210][210];\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= i; j++)\n            cin >> a[i][j];\n    // calling start\n    int ans = calculateMaxSum(n);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"6\\n2\\n96 30\\n83 52 60\\n21 65 44 61\\n8 79 50 41 21\\n61 41 50 38 79 10\", \"output\": \"375\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1548,
        "problem_description": "Output a sentence: This is my second program.",
        "function_declaration": "void printMessage()",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    printMessage();\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"This is my second program.\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2076,
        "problem_description": "The mode of a sequence is defined as the number that appears most frequently in the sequence. For example, in the sequence 1,2,1,3,4,5,6,2, the numbers 1 and 2 appear most frequently, so the mode of the sequence is 1 and 2. Now, given a sequence, find its mode. If there are multiple modes, output the largest one.",
        "function_declaration": "int findMaxCount(int n, int arr[])",
        "code_context": "#include <iostream>\nusing namespace std;\nconst int M = 101;\nint cnt[M];\n\n// function start\n\n// function end\n\nsigned main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n ; ++i) {\n        cin >> arr[i];\n    }\n    // calling start\n    int result = findMaxCount(n, arr);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"8\\n0 1 8 9 1 9 1 9\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2102,
        "problem_description": "This day, Xiao Wan and Xiao Cheng were playing a game in the grid square. There are a total of $n$ squares on the ground, numbered sequentially as $0,1,2,..., n-1$, forming a circle, which means that the right side of square $n-1$ is $0$. Let $a$ and $b$ be two given integers. Before each action, Xiao Wan stands at position $x$, and then he needs to move $a\\times x + b$ steps to the right. At the beginning, Xiao Cheng and Xiao Wan are standing together at square $A$. Then Xiao Wan starts to move. Xiao Wan wants to know, after how many actions he can stop at square $A$.",
        "function_declaration": "long long findIndex(long long n, long long a, long long b, long long A)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    long long n = 0, a = 0, b = 0, A = 0;\n    cin >> n >> a >> b >> A;\n    // calling start\n    long long index = findIndex(n, a, b, A);\n    // calling end\n    cout << index << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3 1 1 0\\n\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2132,
        "problem_description": "Enter an even number $N$, verify whether all even numbers of $4~N$ satisfy the Goldbach Conjecture: any even number greater than $2$ can be written as the sum of two prime numbers. If a number has more than one way of being expressed, output the solution with the smallest first addend compared to other solutions. For example, for $10$, $10=3+7=5+5$, so $10=5+5$ is the incorrect answer. Output $\\dfrac{N-2}{2}$ lines. For the $i$-th line: first output the positive even number $2i+2$, then output an equal sign, followed by the two prime numbers whose sum is $2i+2$ and the first addend is the smallest, separated by a plus sign.",
        "function_declaration": "void verifyGoldbachConjecture(int N)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int N;\n    cin >> N;\n    //calling start\n    verifyGoldbachConjecture(N);\n    //calling end\n    return 0;\n}\n",
        "example": "[{\"input\": \"10\", \"output\": \"4=2+2\\n6=3+3\\n8=3+5\\n10=3+7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1593,
        "problem_description": "When every digit of an n-digit number k is the same digit a, we call k an n-fold number of a. For example, 666 is called a three-fold number of 6. Now given a and n, find the n-fold number k of a. For 100% of the data, 1 ≤ k ≤ 10^11.",
        "function_declaration": "long long calculateNum(int a, int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int t, a, n;\n    cin >> t;\n    for (int i = 0; i < t; i++) {\n        cin >> a >> n;\n        // calling start\n        long long num = calculateNum(a, n);\n        // calling end\n        cout << num << endl;\n    }\n    \n    return 0;\n}",
        "example": "[{\"input\": \"2\\n1 2\\n6 3\", \"output\": \"11\\n666\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2347,
        "problem_description": "Given two positive integers n and m, input n numbers and output the mth number.",
        "function_declaration": "int get_element(int a[],int index)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nint a[101];\n\n// function start\n\n// function end\n\nint main(){\n int n,m;\n cin>>n;\n for(int i=1;i<=n;++i) cin>>a[i];\n cin>>m;\n \n // calling start\n int result = get_element(a,m);\n // calling end\n \n cout<<result;\n}",
        "example": "[{\"input\": \"5 \\n5 4 3 2 1\\n4\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2176,
        "problem_description": "Little A wrote a recursive program as follows: #include<bits/stdc++.h>\nusing namespace std;\nint f(int x){\n    if(x==1) return 1;\n    return f(x-1)%7+f(x-1)%9;\n}\nint main(){\n    int n;\n    cin>>n;\n    cout<<f(n);\n    return 0;\n}\nGiven the input x, please calculate how many times the function f is called during the entire process of the program.",
        "function_declaration": "int countFunctionCalls(int x)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    int totalCalls = countFunctionCalls(n);\n    //calling end\n    cout << totalCalls << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2224,
        "problem_description": "Assuming: Chinese class has an exam every $a$ days; math class has an exam every $b$ days; English class has an exam every $c$ days. Also assuming that yesterday, all three classes had exams at the same time. So, starting from today, in the next $t$ days, how many days will there be no exams?",
        "function_declaration": "long long calculate(long long t, long long a, long long b, long long c)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tlong long t, a, b, c;\n\tcin >> t >> a >> b >> c;\n\t// calling start\n\tlong long result = calculate(t, a, b, c);\n\t// calling end\n\tcout << result;\t           \n}",
        "example": "[{\"input\": \"20\\n3 5 7\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2155,
        "problem_description": "The monkey found a pile of peaches. In the following $n$ days, it repeats the following operations: in the morning of each day, the monkey eats half of the peaches. The input data guarantees that the number of peaches in the morning of each day is always even and there will be no indivisible situation. In the afternoon of each day, the monkey finds 1 new peach from the forest and adds it to the pile of peaches. If there are still $a$ peaches left on the evening of the $n$th day, how many peaches did the monkey find at the beginning?",
        "function_declaration": "int calculate(int n, int a)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n  int n, a;\n  cin >> n >> a;\n  // calling start\n  a = calculate(n, a);\n  // calling end\n  cout << a;\n}",
        "example": "[{\"input\": \"3 5\", \"output\": \"26\"}, {\"input\": \"5 10\", \"output\": \"258\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1907,
        "problem_description": "Student 1 says, \"I scored 5 points more than student 2.\" Student 2 says, \"I scored 5 points more than student 3.\" Student 3 says, \"I scored 5 points more than student 4.\" Student 4 says, \"I scored 5 points more than student 5.\" Student 5 says, \"I scored 62 points.\" Given a student number, please use recursion to calculate the score of this student.",
        "function_declaration": "int score(int stuNum)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){\n    //calling start\n    cout <<\"2号同学的分数是：\" << score(2);\n    //calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"2号同学的分数是：77\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2203,
        "problem_description": "The Four Squares Theorem is a famous theorem in number theory, which states that any natural number can be expressed as the sum of four squares. For example: $$25=1^2 + 2^2 + 2^2 + 4^2$$ For the number 25, there are other possible solutions: $$25=0^2 + 0^2 + 3^2 + 4^2$$ and $$25=0^2 + 0^2 + 0^2 + 5^2$$ Given a natural number $n$, please output all the possible four-square decompositions of $n$. Output multiple lines: each line consists of four natural numbers in ascending order, representing one decomposition. If there are multiple solutions, output the one with the smaller first term. If the first terms are the same, output the one with the smaller second term, and so on.",
        "function_declaration": "void findSquares(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n    int n;\n    cin >> n;\n    // calling start\n    findSquares(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"25\", \"output\": \"0 0 0 5\\n0 0 3 4\\n1 2 2 4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2323,
        "problem_description": "Given two positive integers, find their greatest common divisor.",
        "function_declaration": "int calculateGCD(int a, int b)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a,b;\n    cin>>a>>b;\n    // calling start\n    int result = calculateGCD(a, b);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"9 6\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2272,
        "problem_description": "Given a date in 2023, determine if it is a Crazy Thursday (i.e., Thursday). The input is a single line containing two positive integers m and d, representing the given date in 2023 as month m and day d. For 100% of the data, it is guaranteed that the date m/d in 2023 is a valid date. If it is a Crazy Thursday, output \"V50\"; if not, output \"No\".",
        "function_declaration": "string checkDate(int m, int d)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nint a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\n\n// function start\n\n// function end\n\nint main(){\n    int m,d;\n    cin>>m>>d;\n    // calling start\n    string result = checkDate(m, d);\n    // calling end\n    cout<<result;\n    return 0;\n}",
        "example": "[{\"input\": \"6 1\", \"output\": \"V50\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1640,
        "problem_description": "There are m groups and n elements, each element belongs to and only belongs to one group. The following operations are supported: push x: Insert element x into the queue. If there are elements from the same group as x in front, x will be placed right after the last element of its own group; otherwise, x will be placed at the end of the entire queue. pop: Dequeue and output the element at the front of the queue. Dequeuing follows the same rule as a regular queue, where the element at the front of the queue is dequeued first. For all test data, it's guaranteed that 1 ≤ n ≤ 10^5, 1 ≤ m ≤ 300, and T ≤ 10^5. The input operations are guaranteed to be valid. Input consists of two positive integers n and m, representing the number of elements and groups respectively. Elements and groups are numbered starting from 0. Groups contain n non-negative integers Ai, representing the group to which element i belongs. A positive integer T represents the number of operations. Read T lines, each line representing an operation. For each dequeue operation, output the dequeued element on a separate line.",
        "function_declaration": "void groupQueueOperations(int n, int m, vector<int>& groups, int T)",
        "code_context": "#include <iostream>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\n// Function to perform group-specific queue operations\n//function start\n\n//function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<int> groups(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> groups[i];\n    }\n\n    int T;\n    cin >> T;\n\n    //calling start\n    groupQueueOperations(n, m, groups, T);\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"4 2\\n0 0 1 1\\n6\\npush 2\\npush 0\\npush 3\\npop\\npop\\npop\", \"output\": \"2\\n3\\n0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1821,
        "problem_description": "Given $$n$$ integers, input them in ascending order. Return the number of times $$x$$ appears in the array.",
        "function_declaration": "int countOccurrences(int arr[], int n, int x)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, m, x;\n    cin >> n >> m;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    // calling start\n    while (m--) {\n        cin >> x;\n        cout << countOccurrences(a, n, x) << \" \";\n    }\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"10 3\\n1 2 2 2 3 5 7 7 10 20\\n2 3 11\", \"output\": \"3 1 0 \"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2304,
        "problem_description": "Given $n$ integers $a_1,a_2,...,a_n$, and it is guaranteed that $a_1<a_2<...<a_n$, and given a target value $t$, please determine whether it is possible to select two distinct numbers $a_i$ and $a_j$ from the sequence such that $a_i+a_j=t$.",
        "function_declaration": "bool findPair(int a[], int n, int t)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint a[1000000];\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n    int t;\n    cin >> t;\n\n    // calling start\n    bool result = findPair(a, n, t);\n    // calling end\n\n    if (!result) cout << \"No\";\n    else cout << \"Yes\";\n}",
        "example": "[{\"input\": \"4\\n1 3 5 7\\n8\", \"output\": \"Yes\"}, {\"input\": \"4\\n2 4 6 8\\n11\", \"output\": \"No\"}, {\"input\": \"3\\n1 2 5\\n2\", \"output\": \"No\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 304,
        "problem_description": "We can categorize strings composed of \"0\" and \"1\" into three types: a string consisting of all \"0\"s is called a \"B-string,\" a string consisting of all \"1\"s is called an \"I-string,\" and a string containing both \"0\"s and \"1\"s is termed an \"F-string.\" An FBI tree is a binary tree where each node can be of three types: F-node, B-node, or I-node. Given a binary string S of length 2N, we can construct an FBI tree T using a recursive construction method as follows: The root node R of T has the same type as the type of the string S. If the length of S is greater than 1, split S into two equal-length substrings S1 and S2. Construct the left subtree T1 of R using S1 and the right subtree T2 of R using S2. Now, you are given a binary string of length 2N. Use the aforementioned construction method to build an FBI tree and output its postorder traversal sequence.\nInput:An integer N (0 <= N <= 10) followed by a binary string of length 2^N. Data limits: For 40% of the data, N <= 2; for all data, N <= 10.\nOutput:A string representing the postorder traversal sequence of the FBI tree.",
        "function_declaration": "string constructFBITree(int N, string S)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int N;\n    string S;\n    cin>>N>>S;\n    // calling start\n    string result = constructFBITree(N, S);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"3\\n10001011\", \"output\": \"IBFBBBFIBFIIIFF\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 2307,
        "problem_description": "Given a bracket sequence consisting only of (,), [, and ], please determine if it is balanced. The definition of balanced is as follows: an empty sequence is balanced; if a bracket sequence s is balanced, then [s] and (s) are also balanced; if two bracket sequences s and t are both balanced, then st is also balanced.",
        "function_declaration": "bool isBalanced(string& brackets)",
        "code_context": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\n// Function to check if the given bracket sequence is balanced\n//function start\n\n//function end\n\nint main() {\n    string brackets;\n    cin >> brackets;\n\n    // Calling the function to check if the bracket sequence is balanced\n    //calling start\n    bool balanced = isBalanced(brackets);\n    //calling end\n\n    if (balanced) {\n        cout << \"Balanced\" << endl;\n    } else {\n        cout << \"Unbalanced\" << endl;\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"[(])\", \"output\": \"Unbalanced\"}, {\"input\": \"[()][()()]()\", \"output\": \"Balanced\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2145,
        "problem_description": "The total time Xiao Ai spends on studying is $n$ seconds. Please convert it into a time format consisting of hours, minutes, and seconds, separated by colons (:). For example, if $n=3600$, the output should be 1:0:0, because 3600 seconds is exactly one hour.",
        "function_declaration": "string convertToTimeFormat(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// Function to convert seconds to time format\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    string timeFormat = convertToTimeFormat(n);\n    //calling end\n    cout << timeFormat << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"100\", \"output\": \"0:1:40\"}, {\"input\": \"3601\", \"output\": \"1:0:1\"}, {\"input\": \"35999999\", \"output\": \"9999:59:59\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2241,
        "problem_description": "Please calculate the value of the combination number $C_n^m$. Since the result may be large, you only need to output the value mod 19260817.",
        "function_declaration": "int calculate(int n, int m)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\nint n, m;\nint c[3010][3010];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> n >> m;    \n    // calling start\n    int result = calculate(n, m);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"514 114\", \"output\": \"12230097\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2127,
        "problem_description": "Today, classmate Xiao Wan is helping classmate Xiao Orange buy snacks again! Xiao Orange gave him a list, which he reads from the beginning to the end. Whenever he reads a type of snack, Xiao Wan wants to know how many times he has seen that type of snack before. Formally, let the type of the $i$-th snack be denoted as $a_i$. For $i=1,2,\\dots,n$, Xiao Wan wants to know how many $0\\le j\\le i$ satisfy the condition $a_j=a_i$. Return, for each occurrence of a type of snack during the reading, the count of times that particular snack has been seen.",
        "function_declaration": "vector<int> countSnacks(vector<int>& snacks)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> snacks(n);\n    for (int i = 0; i < n; i++) {\n        cin >> snacks[i];\n    }\n\n     //calling start\n    vector<int> result = countSnacks(snacks);\n   //calling end\n    for (int i = 0; i < n; i++) {\n        cout << result[i] << '\\n';\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2 1 2 1\\n\", \"output\": \"1\\n1\\n2\\n2\\n3\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1797,
        "problem_description": "Write a function char *substr(char *s, int begin, int end) to obtain the substring from position begin to position end (excluding the character at position end) in the string s. The length of the string does not exceed 30 characters.",
        "function_declaration": "char *substring(const char *s, int begin, int end)",
        "code_context": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char s[35];\n    int b, e;\n    cin >> s >> b >> e;\n    // calling start\n    char* result = substring(s, b, e);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"1234567890\\n1 5\", \"output\": \"2345\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2206,
        "problem_description": "Given the birth dates of $n$ individuals, please find the person with the oldest age and output their birth date. The format of the birth date is as follows: first, a four-digit number $y$ representing the year; next, a two-digit number $m$ representing the month; finally, a two-digit number $d$ representing the day. The year, month, and day are separated by a hyphen $-$. The data range is as follows: for 50% of the data, 1≤n≤1,000; for 100% of the data, 1≤n≤1,000,000; 1900≤y≤2020; it is guaranteed that the month and day are both two-digit numbers and valid dates. Return a single string: representing the earliest birth date, in the same format as the input.",
        "function_declaration": "string findEldest(int n, vector<string> dates) ",
        "code_context": "#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n int n;\n cin >> n;\n vector<string> dates(n);\n for(int i = 0; i < n; ++i) {\n  cin >> dates[i];\n }\n // calling start\n string eldest = findEldest(n, dates);\n // calling end\n cout << eldest;\n}",
        "example": "[{\"input\": \"4\\n2008-08-08\\n1953-06-15\\n1949-10-01\\n1926-08-18\", \"output\": \"1926-08-18\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1764,
        "problem_description": "Given two sequences, check if the numbers in the second sequence appear in the first sequence. Return the numbers that appear in both sequences, sorted in ascending order.",
        "function_declaration": "vector<int> findCommonElements(vector<int>& nums1, vector<int>& nums2)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> nums1(n), nums2(m);\n    for (int i = 0; i < n; i++) {\n        cin >> nums1[i];\n    }\n    for (int i = 0; i < m; i++) {\n        cin >> nums2[i];\n    }\n    // calling start\n    vector<int> result = findCommonElements(nums1, nums2);\n    // calling end\n    for (int num : result) {\n        cout << num << \" \";\n    }\n}",
        "example": "[{\"input\": \"4 5\\n1 10 6 7\\n2 3 6 10 1\", \"output\": \"1 6 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2086,
        "problem_description": "Little A hopes you can help him solve a difficult problem: input a number, output itself.",
        "function_declaration": "string process_string(string a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    string a;\n    cin>>a;\n    // calling start\n    string result = process_string(a);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"7\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2020,
        "problem_description": "Now there are n (n <= 1000) judges scoring the players, with scores ranging from 0 to 10. We need to remove the highest score and the lowest score (if there are multiple highest or lowest scores, only one needs to be removed), and the average of the remaining scores is the player's final score. Now input the number of judges and their scores, please output the player's final score, accurate to 2 decimal places.",
        "function_declaration": "double calculateAverage(int n, int arr[])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main()\n{\n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; ++i)\n    {\n        cin >> arr[i];\n    }\n    //calling start\n    double result = calculateAverage(n, arr);\n    //calling end\n    printf(\"%.2lf\\n\", result);\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n9 5 6 8 9\", \"output\": \"7.67\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1777,
        "problem_description": "The Four-Square Theorem, also known as Lagrange's Theorem, states that every positive integer can be expressed as the sum of at most 4 perfect squares. If we include 0, then it can be expressed as the sum of exactly 4 squares. For example: For a given positive integer n, it can be expressed as: You need to find the lexicographically smallest set of solutions a, b, c, d. Lexicographical order: Compare from left to right, if they are the same, compare the next item, until one item is different. The smaller one has a smaller lexicographical order, and vice versa. If all items are the same, then the lexicographical order of the two is the same.",
        "function_declaration": "vector<int> findNumbers(long long N)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nlong long N;\nint a, b, c, d;\n\n// function start\n\n// function end\n\nint main(){\n    cin >> N;\n    // calling start\n    vector<int> result = findNumbers(N);\n    // calling end\n    if (!result.empty()) {\n        for (int i = 0; i < result.size(); ++i) {\n            cout << result[i] << \" \";\n        }\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"5\", \"output\": \"0 0 1 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1730,
        "problem_description": "Given a positive integer a, it is required to decompose it into the product of several positive integers, that is, a = a1 * a2 * a3 * ... * an, and 1 < a1 <= a2 <= a3 <= ... <= an. How many ways are there to decompose it like this, noting that a = a is also a kind of decomposition.",
        "function_declaration": "int calculateDecomposition(int a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    while(n--){\n        int a;\n        cin>>a;\n        // calling start\n        int result = calculateDecomposition(a);\n        // calling end\n        cout<<result<<endl;\n    }\n}",
        "example": "[{\"input\": \"2\\n2\\n20\", \"output\": \"1\\n4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2021,
        "problem_description": "Dark Professor from Country C visited China! This time, he heard that you have learned about loops and decided to give you another difficult problem to test your thinking ability. The Fibonacci sequence is a sequence in which each term is the sum of the two preceding terms. By giving the first two terms, any term in the sequence can be determined. For example, assuming the first two terms are 1 and 2, the sequence will be: 1, 2, 3, 5, 8, 13, 21... To add some interest, Dark Professor added a special rule: even terms are the sum of the previous two terms plus one, while odd terms remain the same as the sum of the previous two terms. For example, assuming the first two terms are 1 and 2, the sequence will be: 1, 2, 3, 6, 9, 16, 25... Now, Dark Professor asks you to find the value of a specific term. Can you complete his challenge? Input three integers, representing the first two terms of the sequence a and b, and the specific term number n. Make sure the absolute values of a and b do not exceed the range of int, and n does not exceed 10000.",
        "function_declaration": "long long calculate_sequence(long long a, long long b, long long n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    long long a,b,n;\n    cin >> a >> b >> n;\n    // calling start\n    long long result = calculate_sequence(a, b, n);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"1 2 7\", \"output\": \"25\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2185,
        "problem_description": "Given a positive integer n, find the smallest prime number that is not less than n.",
        "function_declaration": "long long findNextPrime(long long n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long n;\n    cin>>n;\n    // calling start\n    long long result = findNextPrime(n);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"10000\", \"output\": \"10007\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2311,
        "problem_description": "In a social chat software, there are $n$ users. Initially, there are no friend relationships between any users. Then there are $m$ operation records about the users: the first type of record is + x y, which means that users $x$ and $y$ become friends; the second type of record is - x y, which means that users $x$ and $y$ end their friendship; the third type of record is ! x, which means that user $x$ sends a photo to all their friends. If someone becomes friends with $x$ after the photo is sent, they will not receive the photo. After these operations, please count and output the number of photos received by each user. To simplify the problem, it's ensured that when the input record contains \"+ x y\", it means that $x$ and $y$ are not already friends. When the input record contains \"- x y\", it indicates that $x$ and $y$ are already friends. In other words, these two types of records are never redundant.\n\n\n\n\n\n",
        "function_declaration": "vector<int> countPhotos(int n, vector<pair<char, pair<int, int>>>& operations)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\n// Function to find the number of photos received by each user\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    vector<pair<char, pair<int, int>>> operations(m);\n    for (int i = 0; i < m; i++) {\n        cin >> operations[i].first >> operations[i].second.first >> operations[i].second.second;\n    }\n\n    // Calling the function to find the number of photos received by each user\n    // calling start\n    vector<int> receivedPhotos = countPhotos(n, operations);\n    // calling end\n\n    for (int i = 0; i < n; i++) {\n        cout << receivedPhotos[i] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3 5\\n+ 1 2\\n! 1\\n- 1 2\\n! 1\\n! 3\", \"output\": \"0 1 0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1785,
        "problem_description": "Given a non-negative integer x (0 ≤ x ≤ 2^31 - 1), calculate and return the integer part of the arithmetic square root of x. Note: Do not use any built-in exponentiation functions or operators, such as pow(x, 0.5) or x ** 0.5.",
        "function_declaration": "int mySqrt(int x)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a;\n    cin >> a;\n    // calling start\n    int result = mySqrt(a);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"x = 4\", \"output\": \"2\"}, {\"input\": \"x = 8\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1556,
        "problem_description": "Input three integers, representing the lengths of the three sides of a triangle. Please output the type of the triangle. Explanation: Output \"right\" for a right triangle (including isosceles right triangles); output \"isosceles\" for an isosceles triangle; output \"equilateral\" for an equilateral triangle; output \"normal\" for a triangle with no special shape; output \"no\" if it is not possible to form a triangle.",
        "function_declaration": "void checkTriangle(int a, int b, int c)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // calling start\n    checkTriangle(a, b, c);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2 3 4\", \"output\": \"normal\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1908,
        "problem_description": "The monkey picked some peaches on the first day, ate half of them immediately, still not satisfied, and ate one more. On the second day, the monkey ate half of the remaining peaches, still not satisfied, and ate one more. From then on, the monkey ate half of the remaining peaches from the previous day plus one more each day. On the 10th day, when the monkey wanted to eat again, there was only one peach left. How many peaches did the monkey pick on the first day? Please use recursion to find out the number of peaches picked on the first day.",
        "function_declaration": "int peachDay(int day)",
        "code_context": "#include <iostream> \nusing namespace std; \n\n//function start\n\n//function end\n\nint main(){\n    //calling start\n    cout << peachDay(1);\n    //calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"1534\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1750,
        "problem_description": "There is a sequence composed of numbers from 1 to N in order. We can freely fill in plus or minus signs in the blank spaces. If no sign is filled, the two numbers will form a new number according to their order. Please find the number of solutions that result in zero. Input an integer N (3 ≤ N ≤ 9). Output several lines, each line representing a solution. If no sign is needed, there must be a space. If there are multiple solutions, sort them in lexicographical order of '+' > '-' > ' '.",
        "function_declaration": "void findZeroEquation(int N)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int N;\n    cin >> N;\n    // calling start\n    findZeroEquation(N);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"7\", \"output\": \"1+2-3+4-5-6+7\\n1+2-3-4+5+6-7\\n1-2 3+4+5+6+7\\n1-2 3-4 5+6 7\\n1-2+3+4-5+6-7\\n1-2-3-4-5+6+7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2205,
        "problem_description": "IP address is a 32-bit binary sequence with a fixed length. Given an IP address, please convert it to dotted decimal notation and output it. The conversion method for dotted decimal notation is as follows: first, divide the IP address into four equal-length binary numbers (each binary number has a length of 8), then represent these numbers in decimal notation, separated by periods. For example, if an IP address is 11000000101010000000000101100100, then 11000000 corresponds to the decimal number 192, 10101000 corresponds to the decimal number 168, 00000001 corresponds to the decimal number 1, and 101100100 corresponds to the decimal number 100. The dotted decimal representation of this IP address is 192.168.1.100.",
        "function_declaration": "string binaryToDecimalIP(const string& binaryIP)",
        "code_context": "#include <iostream>\n#include <bitset>\n#include <sstream>\n#include <string>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    string binaryIP;\n    cin >> binaryIP;\n    // calling start\n    string decimalIP = binaryToDecimalIP(binaryIP);\n    // calling end\n    cout << decimalIP << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"11000000101010000000000101100100\", \"output\": \"192.168.1.100\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1968,
        "problem_description": "After learning simple operators, I believe you can now learn to use a computer to perform many useful mathematical operations. This time, you need to determine whether a quadratic equation has solutions. Input three integers a, b, c, representing the quadratic equation ax^2 + bx + c = 0. If there are two solutions, please return 2. If there is only one solution, please return 1. If there is no solution, please return 0.",
        "function_declaration": "int calculateSolutions(int a, int b, int c)",
        "code_context": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n\tint a, b, c;\n\tcin>>a>>b>>c;\n\t// calling start\n\tint result = calculateSolutions(a, b, c);\n\t// calling end\n\tif(result == 1)\n\t\tcout<<\"Only one solution\"<<endl;\n\telse if(result == 0)\n\t\tcout<<\"No solution\"<<endl;\n\telse cout<<\"Two solutions\"<<endl;\n\treturn 0;\n}",
        "example": "[{\"input\": \" 1 2 1\", \"output\": \" Only one solution\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1690,
        "problem_description": "Given an integer N (1 ≤ N ≤ 10). Return the list of all permutations with repetition of the first N uppercase letters.",
        "function_declaration": "vector<string> getPermutations(int N) ",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n// function start\n\n// function end\n\nint main() {\n    int N;\n    cin >> N;\n    // calling start\n    vector<string> permutations = getPermutations(N);\n    // calling end\n    for (string permutation : permutations) {\n        cout << permutation << endl;\n    }\n}",
        "example": "[{\"input\": \"2\", \"output\": \"AA\\nAB\\nBA\\nBB\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1753,
        "problem_description": "Given an undirected graph, please start from the known starting point and traverse the graph using the breadth-first search method. For the successors of the same node, prioritize the ones with smaller labels. Please return the traversal result, which is a sequence of integers representing the search order. The graph is guaranteed to be connected.",
        "function_declaration": "vector<int> bfs(vector<vector<int>>& graph, int start)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, m, s;\n    cin>>n>>m>>s;\n    vector<vector<int>> graph(n+1);\n    for(int i=0; i<m; i++){\n        int u, v;\n        cin>>u>>v;\n        graph[u].push_back(v);\n        graph[v].push_back(u);\n    }\n    // calling start\n    vector<int> result = bfs(graph, s);\n    // calling end\n    for(int i=0; i<result.size(); i++){\n        cout<<result[i]<<\" \";\n    }\n}",
        "example": "[{\"input\": \"4 5 1\\n1 2\\n1 4\\n2 3\\n2 4\\n3 4\", \"output\": \"1 2 4 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1679,
        "problem_description": "In an ordered sequence (starting from index 1), find a given value x and return the position of its first occurrence. If x exists in the sequence, return the index of its first occurrence; otherwise, return -1.",
        "function_declaration": "int findFirstOccurrence(vector<int>& nums, int target)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n, m;\n    cin>>n>>m;\n    vector<int> nums(n);\n    for(int i=0; i<n; i++){\n        cin>>nums[i];\n    }\n    vector<int> targets(m);\n    for(int i=0; i<m; i++){\n        cin>>targets[i];\n    }\n    // calling start\n    for(int i=0; i<m; i++){\n        int result = findFirstOccurrence(nums, targets[i]);\n        cout<<result<<endl;\n    }\n    // calling end\n}",
        "example": "[{\"input\": \"5 1\\n2 3 5 6 7 \\n3\", \"output\": \"2\"}]",
        "time_limit": 5000,
        "memory_limit": 256
    },
    {
        "id": 294,
        "problem_description": "The International Table Tennis Federation (ITTF) President, Shalala, has been committed to implementing a series of reforms since taking office, in order to promote the popularity of table tennis worldwide. The 11-point system reform has caused great controversy, and some players have chosen to retire because they cannot adapt to the new rules. Huahua is one of them. After retiring, he embarked on table tennis research, intending to understand the different impacts of the 11-point system and the 21-point system on players. Before conducting his research, he needs to analyze the statistical data of his years of matches, so he needs your help. Huahua analyzes the data in the following way: first, he lists the wins and losses of each ball in a table, and then calculates the results of the matches for both the 11-point system and the 21-point system (up to the end of the record). For example, there is a record like this (where W represents Huahua winning a point, L represents Huahua's opponent winning a point): WWWWWWWWWWWWWWWWWWWWWLW. Under the 11-point system, the current result is that Huahua won the first game 11-0, won the second game 11-0, and is currently playing the third game with a score of 1-1. Under the 21-point system, the current result is that Huahua won the first game 21-0, and is currently playing the second game with a score of 2-1. If a game has just started, the score is 0-0. Your program should take a series of game information inputs (in the form of WL) and output the correct results. The input contains several lines of strings (each line has at most 20 letters), with uppercase W, L, and E. E indicates the end of the game information, and the program should ignore everything after E. win_mark=11 indicates the 11-point system, and win_mark=21 indicates the 21-point system.",
        "function_declaration": "void match(int win_mark, char line[2510][30], int n)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#define N 7510\nusing namespace std;\n\nint n;\nchar line[2510][30];\n\n// function start\n\n// function end\n\nint main() {\n    for (n = 0; scanf(\"%s\", line[n]) != EOF; ++n);\n    // calling start\n    match(11, line, n);\n    puts(\"\");\n    match(21, line, n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"WWWWWWWWWWWWWWWWWWWW\\nWWLWE\", \"output\": \"11:0\\n11:0\\n1:1\\n\\n21:0\\n2:1\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 1946,
        "problem_description": "Find the value of 1+2+3+...+N",
        "function_declaration": "int calculateSum(int N)",
        "code_context": "#include<cstdio>\n\n// function start\n\n// function end\n\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    \n    // calling start\n    int result = calculateSum(N);\n    // calling end\n    \n    printf(\"%d\",result);\n}",
        "example": "[{\"input\": \"3\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2085,
        "problem_description": "Is mental arithmetic a calculation technique that uses mental simulation of abacus changes to perform rapid calculations? Mental arithmetic training can develop intelligence and bring many conveniences to daily life, so it has been popularized in many schools. A certain school's mental arithmetic teacher uses a fast test method to assess students' addition ability in mental arithmetic. He randomly generates a set of positive integers, each of which is different, and then asks the students to answer: how many numbers in the set are exactly equal to the sum of two other (different) numbers in the set? Recently, the teacher has given some test questions. Please help to find the answers.",
        "function_declaration": "int countSumEqualsTwoOthers(vector<int>& nums) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    //calling start\n    int count = countSumEqualsTwoOthers(nums);\n    cout << count << endl;\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n1 2 3 4\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1847,
        "problem_description": "In an orchard, Duo Duo has already picked all the fruits and divided them into different piles according to their types. Duo Duo decides to merge all the fruits into one pile. Each time when merging, Duo Duo can merge two piles of fruits together, and the energy consumed is equal to the sum of the weights of the two piles of fruits. It can be seen that after n-1 merges, there will be only one pile left. The total energy consumed by Duo Duo in merging the fruits is equal to the sum of the energy consumed in each merge. Because it takes a lot of effort to move these fruits back home, Duo Duo wants to save energy as much as possible when merging the fruits. Assuming that the weight of each fruit is 1, and the number of each type of fruit is known, your task is to design a merging order scheme to minimize the energy consumed by Duo Duo, and output the minimum energy consumption value. For example, if there are 3 types of fruits, with quantities of 1, 2, and 9 respectively. You can first merge piles 1 and 2, resulting in a new pile with a quantity of 3, and an energy consumption of 3. Then, merge the new pile with the original pile 3, resulting in a new pile with a quantity of 12, and an energy consumption of 12. Therefore, the total energy consumed by Duo Duo is 3 + 12 = 15. It can be proven that 15 is the minimum energy consumption value. Two lines in total. Input an integer n (1 ≤ n ≤ 10000), representing the number of types of fruits. Input n integers, where the i-th integer a_i (1 ≤ a_i ≤ 20000) represents the quantity of the i-th type of fruit. For all the data, it is guaranteed that n < 10000. Return an integer, which is the minimum energy consumption value. The input data guarantees that this value is less than 2^31.",
        "function_declaration": "int mergeFruits(int n, vector<int>& fruits)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> fruits(n);\n    for(int i=0; i<n; i++){\n        cin>>fruits[i];\n    }\n    // calling start\n    int result = mergeFruits(n, fruits);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"3 \\n1 2 9\", \"output\": \"15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2137,
        "problem_description": "Given n non-negative integers (n is an odd number), output the median (i.e., the number located in the middle position after sorting).",
        "function_declaration": "void sortAndPrintMedian(int a[], int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nint a[1000];\n\n// function start\n\n// function end\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;++i) cin>>a[i];\n    \n    // calling start\n    sortAndPrintMedian(a, n);\n    // calling end\n}",
        "example": "[{\"input\": \"5\\n3 4 7 0 7\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1825,
        "problem_description": "There is a type of rabbit that can grow up after one month of birth. Then, after another month, it becomes an adult rabbit. At the third month, a pair of adult rabbits can give birth to a pair of baby rabbits. From then on, every month, they can continue to give birth to a pair of baby rabbits. Each pair of baby rabbits will become adult rabbits and give birth to more baby rabbits at the third month. Now, we have a pair of newborn rabbits of this type. So, how many pairs of rabbits will we have in the nth month? (Assuming that all rabbits will not die)",
        "function_declaration": "long long fibonacci(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\nlong long a[60];\n\n// function start\n\n// function end\n\nint main() { \n    int n;\n    cin >> n;\n    // calling start\n    long long result = fibonacci(n);\n    // calling end\n    cout << result;\n    return 0; \n}",
        "example": "[{\"input\": \"5\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1999,
        "problem_description": "Given n non-negative integers, output the largest number.",
        "function_declaration": "int findMax(int n, vector<int> arr)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int n, b;\n    cin>>n;\n    vector<int> arr(n);\n    for(int i=0; i<n; i++){\n        cin>>arr[i];\n    }\n    // calling start\n    int max = findMax(n, arr);\n    // calling end\n    cout<<max;\n}",
        "example": "[{\"input\": \"4\\n16 27 23 19 \", \"output\": \"27\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2133,
        "problem_description": "Enter two integers, swap their values and output (require real swapping instead of just changing the output order, and use a custom function, i.e. do not use std::swap or swap in the main function).",
        "function_declaration": "void my_swap(int &a, int &b)",
        "code_context": "#include<iostream>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint a, b;\n\tcin >> a >> b;\n\t// calling start\n\tmy_swap(a, b);\n\t// calling end\n\tcout << a << ' ' << b;\n}",
        "example": "[{\"input\": \"114514 1919810\", \"output\": \"1919810 114514\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2123,
        "problem_description": "Enter an integer n (n>=1), output the number of moves for the Hanoi Tower at that level.",
        "function_declaration": "long long calculate(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    // calling start\n    long long result = calculate(n);\n    // calling end\n    cout << result;\n\n    return 0;\n}",
        "example": "[{\"input\": \"7\", \"output\": \"127\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1644,
        "problem_description": "The pharmaceutical company Lutetia is recruiting operators. The operator in charge of recruitment, Skadi Tower, marks the priority of each operator's resume. The higher the number, the higher the priority. However, due to limited demand at Lutetia, operators with higher priority will be recruited first. You are Ayrafaya, the Human Resources Liaison Officer. You will receive instructions from Skadi Tower to assist in the recruitment process. Skadi Tower has two types of actions: Handing you a resume with a marked priority. You need to place this resume on your desk. Instructing you to recruit an operator. In this case, you need to find the resume with the highest priority on your desk, hand it out, and record its priority. Input an integer m (1 ≤ m ≤ 10^5), representing the number of actions from Skadi Tower. Read m lines, each line representing an action from Skadi Tower. If the action is \"1 x\", it means Skadi Tower hands you a resume with a priority of x. If the action is \"2\", it means to recruit an operator. Output several lines, each line containing an integer representing the priority of the resume handed out. If there are no resumes, output \"0\".",
        "function_declaration": "void manageRecruitment(int m)",
        "code_context": "#include <iostream>\n#include <queue>\n\nusing namespace std;\n\n// Function to manage recruitment and resumes\n//function start\n\n//function end\n\nint main() {\n    int m;\n    cin >> m;\n\n    //calling start\n    manageRecruitment(m);\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"5\\n1 1\\n1 10\\n1 2\\n2\\n2\", \"output\": \"10\\n2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1920,
        "problem_description": "Given a sequence $a_1$, $a_2$, ..., $a_n$, if there is an interval [l,r] such that $a_l + a_{l+1} +...+ a_{r-1} + a_r$ is a multiple of k, then [l,r] is called a multiple interval of k. Given k, please count how many intervals in the given sequence are multiple intervals of k. For 30% of the data, n ≤ 200; for 60% of the data, n ≤ 5000; for 100% of the data, 1 ≤ n ≤ 200000; 1 ≤ k ≤ 100000, 0 ≤ $a_i$ ≤ 10000.",
        "function_declaration": "long long calculate_ans(int n, int k, int t[]) ",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint cnt[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    int t[n+1];\n    for (int i = 0; i < n; i++) {\n        cin >> t[i];\n    }\n    // calling start\n    long long ans = calculate_ans(n, k, t);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"4 20\\n30 20 40 10\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2343,
        "problem_description": "Dark Professor heard that you have learned about strings, and she decided to give you a question to test your understanding. Now, in front of you, there is a random string that contains some number strings, representing positive integers (i.e., no need to handle negative signs). You need to output these numbers one by one, and finally output the string after deleting all the number strings. The output format is one positive integer per line, corresponding to each number in the original string. Finally, output the string after deleting all the number strings.",
        "function_declaration": "void processStr(char* str)",
        "code_context": "#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int N = 1024;\nchar str[N];\n\n// function start\n\n// function end\n\nsigned main() {\n    scanf(\"%s\",str);\n    // calling start\n    processStr(str);\n    // calling end\n    puts(str);\n    return 0;\n}",
        "example": "[{\"input\": \"1DarkSharpness123.github456.io789\\n\", \"output\": \"1\\n123\\n456\\n789\\nDarkSharpness.github.io\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2314,
        "problem_description": "Given an integer $n$, please count how many times the digit 0 appears in the decimal representation of all integers from 1 to $n$. For example, when $n=100$, the following numbers from 1 to 100 contain the digit 0: $$10, 20, 30, 40, 50, 60, 70, 80, 90, 100$$ So the total count is 11.",
        "function_declaration": "long long calculateSum(long long n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n\tlong long n;\n\tcin >> n;\n\t// calling start\n\tlong long result = calculateSum(n);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"100\", \"output\": \"11\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2247,
        "problem_description": "Minesweeper is a classic casual game. The game rules are very simple: there are many squares on the chessboard, and some mines are randomly distributed in the squares. Your goal is to avoid the mines and open all the other squares. A number in a non-mine square indicates the number of mines in its adjacent 8 squares. You can use this information to deduce the positions of safe squares and mines. You can use the right mouse button to flag the squares you think are mines. You can use the left mouse button to open safe squares. Opening a mine with the left mouse button will result in failure. When all the safe squares are opened, the game is won. Now, given the size of the chessboard and the positions of all the mines, please draw the chessboard when the game is won. Output n rows and m columns (n rows, each row outputs m characters and then a line break), representing the chessboard when the game is won. For each position, if it is a mine, output the uppercase letter P; otherwise, output a number between 0 and 8, indicating the number of mines in the adjacent 8 squares.",
        "function_declaration": "void processGrid(int n, int m, bool s[110][110])",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\nbool s[110][110];\n\n// function start\n\n// function end\n\nint main(){\n    int n,m,k,x,y;\n    cin>>n>>m>>k;\n    while(k--) cin>>x>>y, s[x][y]=true;\n\n    // calling start\n    processGrid(n, m, s);\n    // calling end\n}",
        "example": "[{\"input\": \"5 8 3\\n1 3\\n2 3\\n3 5\", \"output\": \"02P20000\\n02P31100\\n0112P100\\n00011100\\n00000000\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1975,
        "problem_description": "Caesar cipher is the simplest and most well-known encryption technique. It is a substitution cipher where each letter in the plaintext is replaced by a letter a fixed number of positions down the alphabet. Specifically, we define that the letter after Z (or z) is A (or a), and the letter before A (or a) is Z (or z). Uppercase letters are replaced with uppercase letters, and lowercase letters are replaced with lowercase letters. For example, with an offset of 3, all the letters A will be replaced with D, B will be replaced with E, and z will be replaced with c, and so on. This encryption method was originally used by the ancient Roman military commander Gaius Julius Caesar to transmit encrypted messages, hence the name Caesar cipher. In this question, you need to implement a Caesar cipher translator, which takes the ciphertext and the offset as input and translates it into plaintext. The input contains a letter c (uppercase or lowercase), representing the ciphertext, and an integer x, representing the offset for translating plaintext to ciphertext. When x is positive, it indicates a forward offset of x positions; when x is negative, it indicates a backward offset of -x positions.",
        "function_declaration": "int calculatePosition(char c, int x)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\nchar c;\nint x;\n\n// function start\n\n// function end\n\nint main()\n{\n\tcin >> c >> x;\n\t// calling start\n\tchar result = calculatePosition(c, x);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"a\\n2\", \"output\": \"y\"}, {\"input\": \"K\\n-1000\", \"output\": \"W\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1850,
        "problem_description": "A sequence composed of pairs of numbers, each pair consisting of two integers Ai and Bi, where Ai represents the weight of the pair and Bi represents the value of the pair. Now, we need to recalculate the value of each pair while keeping the weight unchanged. The calculation rule is as follows: for each pair, the initial value Bi will be accumulated to the first pair on both sides that has a higher weight than itself (there may be pairs on both sides with higher weights, there may be only one side, or there may be no pairs with higher weights), and the initial value Bi will be cleared. According to the above rules, please calculate the highest value in the pairs after the recalculation.",
        "function_declaration": "int getMaxValue(vector<pair<int, int>>& pairs)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<pair<int, int>> pairs(n);\n\n    // Input weight-value pairs\n    for (int i = 0; i < n; i++) {\n        cin >> pairs[i].first >> pairs[i].second;\n    }\n\n    //calling start\n    int maxVal = getMaxValue(pairs);\n    //calling end\n\n    cout << maxVal << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"3\\n10 1\\n1 5\\n2 5\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2019,
        "problem_description": "Calculate S = 1! + 2! + 3! + ... + n! (n <= 20). Where `!` represents factorial, defined as n! = n * (n-1) * (n-2) * ... * 1. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120.",
        "function_declaration": "long long calculateSum(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\t// calling start\n\tlong long result = calculateSum(n);\n\t// calling end\n\tcout << result;\n\treturn 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"9\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1589,
        "problem_description": "Given a sequence of length N, first swap the minimum value in the input series of integers with the first number, then swap the maximum value with the last number, and finally output the swapped sequence. (Ensure that the maximum and minimum values are unique.) Output the swapped sequence in one line, with each integer followed by a space.",
        "function_declaration": "void swapMinMax(int n, int nums[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    int nums[1001];\n    \n    cin >> n;\n    for (int i=0; i<n; i++)\n        cin >> nums[i];\n    \n    // calling start\n    swapMinMax(n, nums);\n    // calling end\n    \n    return 0;\n}",
        "example": "[{\"input\": \"5\\n8 2 5 1 4\", \"output\": \"1 2 5 4 8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1897,
        "problem_description": "Little Bo is ready to start saving money. He plans to set a small goal and save for 5 days! Little Bo has a piggy bank, which is initially empty. On the first day, he puts in 1 yuan, on the second day, he puts in 2 yuan, on the third day, he puts in 3 yuan... Please output how much money is in the piggy bank for each of the first 5 days, with each day's amount on a separate line, represented by an integer.",
        "function_declaration": "void calculateSavings()",
        "code_context": "#include <iostream>\n\n//function start\n\n//function end\n\nint main() {\n    //calling start\n    calculateSavings();\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"1\\n3\\n6\\n10\\n15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1747,
        "problem_description": "There is an equation: S = a0 + a1 + a2 + ... + an (n ≥ 1), where a1 = k1 * a0, a2 = k2 * a1, ..., an = kn * a[n-1] (2 ≤ k ≤ 7) and so on. Now given S, please freely determine the values of a0 and all k, so that the above equation holds and n is as small as possible. Input an integer S (10 ≤ S ≤ 10^8). Output an integer representing the smallest n; if not found, return -1.",
        "function_declaration": "int calculateN(int S)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int S;\n    cin>>S;\n    // calling start\n    int result = calculateN(S);\n    // calling end\n    if(result == -1){\n        cout<<\"Tomimi\";\n    }else{\n        cout<<result;\n    }\n}",
        "example": "[{\"input\": \"10\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2082,
        "problem_description": "Usually, people are accustomed to arranging all $n$-bit binary strings in lexicographic order. For example, all 2-bit binary strings are arranged in lexicographic order from smallest to largest: 00, 01, 10, 11. Gray Code is a special arrangement method for $n$-bit binary strings, which requires that there is exactly one different bit between adjacent binary strings, and the first string and the last string are also considered adjacent. An example of arranging 2-bit binary strings in Gray Code is: 00, 01, 11, 10. There is more than one $n$-bit Gray Code, and here is an algorithm to generate one of them: 1. 1-bit Gray Code consists of two 1-bit binary strings in the order: 0, 1. 2. The first $2^n$ binary strings of $n+1$-bit Gray Code can be obtained by arranging the $n$-bit Gray Code generated by this algorithm (a total of $2^n$ $n$-bit binary strings) in **order**, and then adding a prefix 0 to each string. 3. The last $2^n$ binary strings of $n+1$-bit Gray Code can be obtained by arranging the $n$-bit Gray Code generated by this algorithm (a total of $2^n$ $n$-bit binary strings) in **reverse order**, and then adding a prefix 1 to each string. In summary, $n+1$-bit Gray Code is composed of $2^n$ $n$-bit binary strings of Gray Code arranged in order with a prefix 0, and $2^n$ $n$-bit binary strings of Gray Code arranged in reverse order with a prefix 1, totaling $2^{n+1}$ binary strings. In addition, for the $2^n$ binary strings in the $n$-bit Gray Code, we number them from $0$ to $2^n - 1$ according to the above algorithm. According to this algorithm, 2-bit Gray Code can be derived as follows: 1. Given that the 1-bit Gray Code is 0, 1. 2. The first two Gray Codes are 00, 01. The last two Gray Codes are 11, 10. Combine them to get 00, 01, 11, 10, numbered from 0 to 3. Similarly, 3-bit Gray Code can be derived as follows: 1. Given that the 2-bit Gray Code is: 00, 01, 11, 10. 2. The first four Gray Codes are: 000, 001, 011, 010. The last four Gray Codes are: 110, 111, 101, 100. Combine them to get: 000, 001, 011, 010, 110, 111, 101, 100, numbered from 0 to 7. Now, given $n$ and $k$, please find and output the $k$-th binary string in the $n$-bit Gray Code generated by the above algorithm.",
        "function_declaration": "void dg(int n, unsigned long long k)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\nint n;\nunsigned long long k, pow2[65];\n\n// function start\n\n// function end\n\nint main()\n{\n pow2[0] = 1;\n for (int i = 1; i <= 64; ++i) pow2[i] = pow2[i-1] * 2;\n cin >> n >> k;\n // calling start\n dg(n, k);\n // calling end\n}",
        "example": "[{\"input\": \"2 3\", \"output\": \"10\"}, {\"input\": \"3 5\", \"output\": \"111\"}, {\"input\": \"44 1145141919810\", \"output\": \"00011000111111010000001001001000000001100011\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2315,
        "problem_description": "Given a sequence $a_1, ..., a_n$, Xiaoi can modify this sequence. Each modification can only change one number and can only increase or decrease the number by one unit. How many minimum steps are needed to adjust the sequence into an ascending and continuous integer sequence? The so-called ascending and continuous means that each number is exactly one unit larger than the previous number.",
        "function_declaration": "long long calculateCost(long long a[], int n)",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    long long a[500000];\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    // calling start\n    long long cost = calculateCost(a, n);\n    // calling end\n    cout << cost;\n}",
        "example": "[{\"input\": \"5\\n2 3 3 3 3\", \"output\": \"5\"}, {\"input\": \"5\\n-3 3 0 2 4\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2106,
        "problem_description": "Catalan numbers are a sequence that frequently appears in various counting problems in combinatorial mathematics. They are also known as Catalan numbers or Eulerian numbers, named after the Belgian mathematician Eugène Charles Catalan (1814–1894). In history, the Qing Dynasty mathematician Ming Antu (1692–1763) first invented this counting method in his book \"The Quick Method for Cutting Circles\", long before Catalan. For example, we have the following problem: > There are 2n people lined up to enter a theater. The admission fee is 5 yuan. Among them, only n people have a 5 yuan banknote, while the other n people only have a 10 yuan banknote. The theater has no other banknotes. How many ways are there to ensure that whenever a person with a 10 yuan banknote buys a ticket, the ticket office has a 5 yuan banknote for change? The answer sequence is denoted as $H_n$, which represents the Catalan numbers. The first few terms of the Catalan numbers are $H_0=1, H_1=1, H_2=2, H_3=5, H_4=14, H_5=42$. One method to calculate the Catalan numbers is as follows: $H_n=\\sum_{i=1}^{n}H_{i-1}H_{n-i}$, which can be written as $H_n=H_0*H_{n-1}+H_1*H_{n-2}+\\cdots+H_{n-1}*H_0$; for example, the calculation of $H_4$ is $H_4=H_0*H_3+H_1*H_2+H_2*H_1+H_3*H_0=1*5+1*2+2*1+5*1=14$. Now please find the nth term of the Catalan numbers, denoted as $H_n$. Since the value of $H_n$ can be large, **you only need to output its result modulo $998244353$**.",
        "function_declaration": "long long calculate_h(int n)",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst long long mod = 998244353;\n\nint n;\nlong long h[3010];\n\n// function start\n\n// function end\n\nint main(){\n    cin >> n;\n    // calling start\n    long long result = calculate_h(n);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"6\", \"output\": \"132\"}, {\"input\": \"1000\", \"output\": \"346517073\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2084,
        "problem_description": "The question is asking for the number of trees remaining on a road after removing certain areas. The road is represented as a number line, with one end at position 0 and the other end at position $l$. Each integer point on the number line, including 0 and $l$, has a tree. The areas to be removed are represented by their starting and ending coordinates on the number line. The coordinates are integers and there may be overlapping areas. The task is to calculate the number of trees remaining on the road after removing all the trees in these areas, including the trees at the endpoints of the areas. The input consists of the length of the road $l$, the number of areas $m$, and arrays $a$ and $b$ representing the starting and ending coordinates of each area. The output is an integer representing the number of trees remaining on the road after removing all the trees in these areas.",
        "function_declaration": "int calculate(int l, int m, int a[], int b[])",
        "code_context": "#include<iostream>\nusing namespace std;\nint x[10001];\n\n// function start\n\n// function end\n\nint main(){\n    int n,a[10001],b[10001],l,m,s=0;\n    cin>>l>>m;\n    for(int z=1;z<=m;z++){\n        cin>>a[z]>>b[z];\n    }\n    // calling start\n    s = calculate(l, m, a, b);\n    // calling end\n    cout<<s;\n}",
        "example": "[{\"input\": \"500 3\\n150 300\\n100 200\\n470 471\", \"output\": \"298\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1861,
        "problem_description": "The conditions for running for class monitor are: in the three subjects of Chinese, Mathematics, and English, at least two scores are greater than or equal to 90, and the score for ideological and moral character cannot be lower than 85. Given Xiao Ai's scores in Chinese, Mathematics, English, and ideological and moral character, can she run for class monitor? Let integer a represent the score in Chinese; integer b represent the score in Mathematics; integer c represent the score in English; integer d represent the score in ideological and moral character. If she can run for class monitor, output Qualified; otherwise, output Not qualified.",
        "function_declaration": "string qualification(int a, int b, int c, int d)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    // calling start\n    string result = qualification(a, b, c, d);\n    // calling end\n    cout << result << \"\\n\";\n    return 0;\n}",
        "example": "[{\"input\": \"91\\n96\\n99\\n89\", \"output\": \"Qualified\"}, {\"input\": \"84\\n91\\n85\\n95\", \"output\": \"Not qualified\"}, {\"input\": \"94\\n98\\n97\\n80\", \"output\": \"Not qualified\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2211,
        "problem_description": "Xiao Ai is writing a question module for a Minesweeper game. The input of this module is a map that marks the location of each mine, with * representing a mine and . representing an empty space. The output of this module is a table that counts the number of mines in the eight squares surrounding each empty space. For example, given an initial map: *.*\n...\n*..\nthe output should be: *2*\n231\n*10\nPlease help Xiao Ai complete this program. The input is a map represented by $n×m$ characters, and the output is $n×m$ characters representing the mine count information around each square. If there is already a mine at that position, output *.",
        "function_declaration": "void processGrid(int n, int m, char a[100][100])",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    char a[100][100];\n    for (int i = 0; i < n; ++i)\n        for (int j = 0; j < m; ++j) \n            cin >> a[i][j];\n\n    // calling start\n    processGrid(n, m, a);\n    // calling end\n}",
        "example": "[{\"input\": \"3 4\\n*..*\\n.**.\\n.*.*\", \"output\": \"*33*\\n3**3\\n2*4*\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1569,
        "problem_description": "Input the information of n students, including name, gender, and age, and then output the information of the student with the maximum age. (Ensure that the maximum age is not repeated) 1 <= n <= 10 The length of the name is less than or equal to 20. The gender is either M or F. Input the first line with an integer n, followed by n lines, which are the name, gender, and age of the students in order. Output one line, which is the name, gender, and age separated by spaces.",
        "function_declaration": "void findOldestStudent(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    // calling start\n    findOldestStudent(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2\\nKal'tsit F 1000\\nAmiya F 14\", \"output\": \"Kal'tsit F 1000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2222,
        "problem_description": "If a decimal integer can be divided by each of its non-zero digits, it is called a clever number. For example, 102 is a clever number because it can be divided by 1 and 2, while 2021 is not because it cannot be divided by 2. Given an $n$, please determine if it is a clever number.",
        "function_declaration": "bool isCleverNumber(int n)",
        "code_context": "#include <iostream>\n#include <string>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    bool clever=isCleverNumber(n);\n    //calling end\n    if (clever)\n   cout << \"clever\";\n else\n   cout << \"not clever\";\n}",
        "example": "[{\"input\": \"102\", \"output\": \"clever\"}, {\"input\": \"2050\", \"output\": \"clever\"}, {\"input\": \"13\", \"output\": \"not clever\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1774,
        "problem_description": "Given a sequence of length n, we need to rearrange it according to the following rules: odd numbers come before even numbers; odd numbers are arranged in ascending order; even numbers are arranged in descending order. Please return the rearranged array.",
        "function_declaration": "void sortArray(int a[], int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint n, a[100010];\n\n// function start\n\n\n// function end\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    // calling start\n    sortArray(a, n);\n    // calling end\n    for (int i = 0; i < n; i++)\n        cout << a[i] << ' ';\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2 3 4 5\", \"output\": \"1 3 5 4 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1755,
        "problem_description": "Given n integers, input them in ascending order. Count the number of times x appears in the array.",
        "function_declaration": "int countX(int a[], int n, int x)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define N 1000005\nusing namespace std;\nint a[N]; \n\n//function start\n\n//function end\n\nint main() {\n    int n, x, cnt;\n    cin >> n >> x;\n    for (int i = 0; i < n; ++i) \n        cin >> a[i];\n    //calling start\n    cnt = countX(a, n, x);\n    //calling end\n    cout << cnt;\n    \n    return 0;\n}",
        "example": "[{\"input\": \"1?0 2\\n1 2 2 2 3 5 7 7 10 20\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2303,
        "problem_description": "Given a decimal positive integer $n$, how many different substrings can be extracted from $n$ such that the digits of the substring form a multiple of $3$? For example, when $n=1234$, there are exactly four substrings that are multiples of $3$, which are $3, 12, 123, 234$.",
        "function_declaration": "int countSubstringsDivisibleBy3(int n)",
        "code_context": "#include <iostream>\n#include <string>\nusing namespace std;\n\n\n// Function to count the number of substrings divisible by 3\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    // Calling the function to count the number of substrings divisible by 3\n    //calling start\n    int result = countSubstringsDivisibleBy3(n);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"95764\", \"output\": \"6\"}, {\"input\": \"1111\", \"output\": \"2\"}]",
        "time_limit": 4000,
        "memory_limit": 256
    },
    {
        "id": 2168,
        "problem_description": "Given positive integers $s$ and $t$, we want to use the operations of incrementing and doubling to transform $s$ into $t$. One increment increases the number by one, and one doubling doubles the number. What is the minimum number of operations needed to transform $s$ into $t$? It is guaranteed that $s<t$.",
        "function_declaration": "int calculateSteps(int s, int t)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int s, t;\n    cin >> s >> t;\n    // calling start\n    int result = calculateSteps(s, t);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"1 4\", \"output\": \"2\"}, {\"input\": \"2 10\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1692,
        "problem_description": "A special one-way street has a car station every kilometer. Customers pay based on the number of kilometers they travel by car. Each car only travels an integer number of kilometers and the maximum is not more than 10. The amount required for different distances traveled is also different (note that these amounts have no actual economic significance, i.e. the cost of traveling 10 kilometers may be less than traveling one kilometer). Now Xiao plans to travel n kilometers by car. Of course, he can complete the journey by changing cars an unlimited number of times. Please help calculate the minimum cost to complete the journey.",
        "function_declaration": "int calculateMinCost(int n)",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[20], f[101];\n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    // calling start\n    int result = calculateMinCost(n);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"12 21 31 40 49 58 69 79 90 101\\n15\", \"output\": \"147\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1829,
        "problem_description": "In the restaurant opened by Xiaoxiao, there are n customers waiting for their delicious dinner. Each person's cooking time for their ordered dish is different, but Xiaoxiao can decide who to cook for first. Please help her find a reasonable cooking order that minimizes the total waiting time for all customers, and calculate this shortest time. A customer's waiting time is from the beginning until their dinner is cooked.",
        "function_declaration": "long long calculateSum(long long n, long long a[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nlong long n, ans, a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    // calling start\n    ans = calculateSum(n, a);\n    // calling end\n    cout << ans << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n100 1 2\", \"output\": \"107\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1751,
        "problem_description": "On the grid, given the target point (a, b), starting from (1, 1), how many minimum steps are needed to reach the target point by moving in the shape of a cross or a plus sign?",
        "function_declaration": "int calculate(int a, int b)",
        "code_context": "#include <bits/stdc++.h>\n#define N 1010\nusing namespace std;\n\nint vis[N][N], movx[12] = {-2, -2, -1, -1, 1, 1, 2, 2, -2, -2, 2, 2}, movy[12] = {1, -1, 2, -2, 2, -2, 1, -1, 2, -2, 2, -2};\nqueue<int> x, y;\n\n//function start\n\n//function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    //calling start\n    int result = calculate(a, b);\n    //calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"12 16\", \"output\": \"8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2318,
        "problem_description": "Given $n$ closed intervals on a number line, please count how many pairs of intervals have non-empty intersections.",
        "function_declaration": "int countIntersections(int n, vector<pair<int, int>>& intervals)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Function to count the number of non-empty intersections between intervals\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<pair<int, int>> intervals(n);\n    for (int i = 0; i < n; i++) {\n        cin >> intervals[i].first >> intervals[i].second;\n    }\n\n    // Calling the function to count the number of non-empty intersections between intervals\n    //calling start\n    int result = countIntersections(n, intervals);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\n1 10\\n1 4 \\n5 12\", \"output\": \"2\"}, {\"input\": \"2\\n1 2\\n2 3\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1928,
        "problem_description": "Little Ai has n apples, each with its own shelf life. The shelf life of the i-th apple is $a_i$. If $a_i$ = 0, it means it must be eaten on the same day, otherwise it will spoil. If $a_i$ > 0, it means it can be stored for $a_i$ days, and it will spoil if it exceeds this period. Little Ai can only eat one apple per day at most. How should she arrange the order of eating apples to eat the most apples? For 30% of the data, 1 ≤ n ≤ 10; for 60% of the data, 1 ≤ n ≤ 1,000; for 100% of the data, 1 ≤ n ≤ 1,000,000, 0 ≤ $a_i$ < n.",
        "function_declaration": "int calculateDays(int n, int apples[])",
        "code_context": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint n, apples[1000010];\n\n// function start\n\n// function end\n\nint main()\n{\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> apples[i];\n    }\n    \n    // calling start\n    int result = calculateDays(n, apples);\n    // calling end\n\n    cout << result;\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n4 1 0 2 1\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1592,
        "problem_description": "Given an integer, find its factorial.",
        "function_declaration": "long long factorial(int num)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, num;\n    cin >> n;\n    \n    // calling start\n    for (int i=0; i<n; i++) {\n        cin >> num;\n        cout << factorial(num) << endl;\n    }\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"2\\n2\\n3\", \"output\": \"2\\n6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2346,
        "problem_description": "On this day, Xiao Wan learned about the common format for accepting parameters in the Unix system: program -a AAAA -d EEEE -b BBBB. This is a command that calls a program named \"program\" and sets three options. The value of option -a is AAAA, the value of option -b is BBBB, and the value of option -d is EEEE. To simplify, the letter \"x\" in option -x is a lowercase English letter and will not appear more than once. The value of options only contains visible characters. The command can have no options. There is only one space between the option name and its value. Xiao Cheng asks Xiao Wan to imitate a computer. Xiao Cheng will give Xiao Wan a command, and Xiao Wan is responsible for parsing the command and telling Xiao Cheng the program name and option values. Please output several lines. The first line is the program name. Each following line first outputs the option name, followed by its value, separated by a space. The option names should be sorted in ascending order.",
        "function_declaration": "void parseCommand(const string& command) ",
        "code_context": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <sstream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    string command;\n    getline(cin, command);\n\n    //calling start\n    parseCommand(command);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"add_user -u Xiao-Cheng -c Xiao-Wan\\n\", \"output\": \"add_user\\n-c Xiao-Wan\\n-u Xiao-Cheng\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2061,
        "problem_description": "In recent years, the survival status and labor rights protection of food delivery riders have attracted the attention of Huang Chao, a deputy general manager of Guangxi Forestry Group Co., Ltd. Huang Chao believes that the main reason why food delivery riders work overloaded and exhaust themselves every day is that the prices of food delivery orders are still good, which leads to the riders ignoring their physical exhaustion and trying to take more orders to earn more money. Therefore, at the recently concluded National People's Congress, Huang Chao proposed the following suggestion: after the food delivery rider arrives at the corresponding order, reduce the price of the order. This way, the food delivery rider will feel that it is not worth spending time to take more orders as they won't get much benefit, so they simply won't take more orders. This can fundamentally solve the problem of food delivery riders working overloaded. Xiao A is a food delivery rider who needs to earn m yuan every month to support his family's daily expenses. He can earn a yuan for delivering one order. If Huang Chao's proposal is adopted, the rider will only be able to earn c yuan (c<a) for each order after delivering b orders. Xiao A was very moved after seeing Huang Chao's proposal and thought that someone finally represented him. Xiao A would like you to help him calculate how much workload he can reduce each month if Huang Chao's proposal is adopted (i.e., how many fewer orders he needs to deliver each month). The input contains four positive integers m, a, b, c. For 100% of the data, $m,a,b,c \\le 10^9$. Output an integer, representing how many fewer orders Xiao A can deliver each month compared to before.",
        "function_declaration": "long long calculateResult(long long m, long long a, long long b, long long c)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    long long m, a, b, c;\n    cin >> m >> a >> b >> c;\n    // calling start\n    long long result = calculateResult(m, a, b, c);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"10000 7 1000 5\", \"output\": \"-171\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1591,
        "problem_description": "Insert a given integer x into the originally sorted integer sequence nums, so that the resulting sequence remains sorted.",
        "function_declaration": "void insertNum(int n, int x, int nums[])",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, x;\n    int nums[1001];\n    \n    cin >> n;\n    for (int i=0; i<n; i++)\n        cin >> nums[i];\n    cin >> x;\n    \n    // calling start\n    insertNum(n, x, nums);\n    // calling end\n    \n    for (int i=0; i<(n+1); i++)\n        cout << nums[i] << \" \";\n    \n    return 0;\n}",
        "example": "[{\"input\": \"3\\n1 3 4\\n2\", \"output\": \"1 2 3 4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1894,
        "problem_description": "Print all even numbers between 1 and 10 (including 1 and 10), separated by spaces. Input: none. Output: 2 4 6 8 10.",
        "function_declaration": "void printEvenNumbers()",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    // calling start\n    printEvenNumbers();\n    // calling end\n}",
        "example": "[{\"input\": \" \", \"output\": \"2 4 6 8 10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2138,
        "problem_description": "In a class, there are $a$ more boys than girls. After $b$ boys and girls are transferred simultaneously, the number of boys is twice the number of girls. Find the original number of boys and girls. Output the first line: an integer representing the original number of boys; the second line: an integer representing the original number of girls.",
        "function_declaration": "void findOriginalNumbers(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// Function to find the original numbers of boys and girls in the class\n//function start\n\n//function end\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n\n    // Call the function to find the original numbers of boys and girls\n    //calling start\n    findOriginalNumbers(a, b);\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"1\\n1\", \"output\": \"3\\n2\"}, {\"input\": \"7\\n5\", \"output\": \"19\\n12\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2184,
        "problem_description": "Given a non-negative integer a, determine whether a is a multiple of 9.",
        "function_declaration": "bool isDivisibleByNine(string a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int t;\n    cin >> t;\n    while(t--){\n        string a;\n        cin >> a;\n        // calling start\n        bool result = isDivisibleByNine(a);\n        // calling end\n        cout << (result ? \"Yes\" : \"No\") << endl;\n    }\n}",
        "example": "[{\"input\": \"3\\n0\\n1000000000000\\n999999999999999999999999999999999999999\", \"output\": \"Yes\\nNo\\nYes\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2103,
        "problem_description": "Darksharpless, after learning about loop structures, showed off his skills in front of Hastin. He was able to easily decompose a number n into all its prime factors using his code. Hastin was very envious after seeing this. Can you help him? Output a line of several numbers, which are all the prime factors of n after decomposition (arranged in ascending order, separated by spaces).",
        "function_declaration": "void primeFactors(int &n)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n = 0;\n    cin >> n;\n    // calling start\n    primeFactors(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"60\", \"output\": \"2 2 3 5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2057,
        "problem_description": "The start of the school year is approaching, and Professor Dark has decided to visit the children's homes for home visits. Now, she already knows the distances between the children's addresses and her own address. In order to plan a reasonable route and allocate time, she needs to know the two farthest distances, the two closest distances, and the sum of all the distances. In simple terms, she will give you some numbers, and you need to find the two largest numbers, the two smallest numbers, and the sum of all the numbers. Output the first line with two numbers, the farthest distance and the second farthest distance, separated by a space. The second line has two numbers, the closest distance and the second closest distance, separated by a space. The third line has one number, representing the sum of the distances.",
        "function_declaration": "void calculateDistances(const vector<int>& distances)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> distances(n);\n    for (int i = 0; i < n; i++) {\n        cin >> distances[i];\n    }\n\n    //calling start\n    calculateDistances(distances);\n    //calling end\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2 3 5 5\", \"output\": \"5 5\\n1 2\\n16\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1867,
        "problem_description": "A frog can jump up 1 step or 2 steps at a time. Input an integer n, and calculate the total number of ways the frog can jump up an n-step staircase.",
        "function_declaration": "int fun(int n)",
        "code_context": "#include <iostream>  \nusing namespace std; \n\n// function start\n\n// function end\n\nint main(){\n    int n;\n    cin >> n;\n    // calling start\n    cout << fun(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2289,
        "problem_description": "There is a dairy farm that produces milk every day. On the $i$th day, the milk production is $p_i$. The produced milk can be sold in the market, and the market demand on the $i$th day is $c_i$. If the market demand is not high and the milk cannot be sold, the excess milk will be stored in the cold storage. Milk has a shelf life, and if it exceeds $m$ days ($m$ is a given integer), it must be discarded. When selling milk, the milk with longer refrigeration time should be sold first. Given the number of days $n$ and the daily production and purchase quantity, find out how much milk the dairy farm can sell in total.",
        "function_declaration": "int calculate(int n, int m, int arr[][2])",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn = 100000;\nint q[maxn]; \n\n// function start\n\n// function end\n\nint main() \n{\n    int n, m;\n    cin >> n >> m;\n    int arr[n][2];\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i][0] >> arr[i][1];\n    }\n    // calling start\n    int result = calculate(n, m, arr);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"5 2\\n50 0\\n100 0\\n250 0\\n300 0\\n1000 5000\", \"output\": \"1550\"}, {\"input\": \"5 5\\n0 2\\n2 3\\n5 0\\n3 0\\n2 0\", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1926,
        "problem_description": "In a country with various cities, the transportation of food is required between them. Given an integer n, which represents the number of cities in this country, and a sequence of integers $a_1$, $a_2$, ..., $a_n$, where each value indicates the quantity of food produced or consumed by the corresponding city: positive values represent cities that produce food, with their absolute values indicating the production quantity, while negative values represent cities that consume food, with their absolute values indicating the consumption quantity. The input data ensures that the total production and consumption quantities are equal. The cities in this country are connected by a straight road network, and only adjacent cities are directly connected by roads. Transporting one unit of food to an adjacent city requires one unit of work. For example, to transport 3 units of food from city 4 to city 6, it would require 3 × (6 - 4) = 6 units of work. Your task is to design a plan that satisfies the needs of all consuming cities while minimizing the total amount of work required for transportation. Return the minimum total amount of work produced by the optimal transportation plan. 100,000 ≤ $a_i$ ≤ 100,000 For 30% of the data, 1 ≤ n ≤ 10 For 60% of the data, 1 ≤ n ≤ 100 For 100% of the data, 1 ≤ n ≤ 100,000",
        "function_declaration": "long long findMinWork(int n, vector<int>& cities)",
        "code_context": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> cities(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> cities[i];\n    }\n    //calling start\n    long long result = findMinWork(n, cities);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"4\\n-10 10 20 -20\", \"output\": \"30\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1903,
        "problem_description": "Check if the length restriction of the user's input for username and password is between 6 and 16.",
        "function_declaration": "bool checkLength(char userName[], char passWord[])",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  char userName[30];\n  char passWord[30];\n\n  printf (\"请输入你的用户名\\n\");\n  scanf (\"%s\", userName);\n  printf (\"请输入你的密码\\n\");\n  scanf (\"%s\", passWord);\n\n  // calling start\n  if(!checkLength(userName, passWord)) {\n    printf (\"用户名或密码长度必须在6～16之间\");\n  }\n  // calling end\n  return 0;\n}",
        "example": "[{\"input\": \"Akatsuki\\n123456789\", \"output\": \"请输入你的用户名\\n请输入你的密码\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2207,
        "problem_description": "Starting from 2017, the Shanghai college entrance examination (gaokao) officially changed from a 3+1 mode to a 3+3 mode. This means that Chinese, mathematics, and foreign language are compulsory subjects, and any three out of physics, chemistry, biology, history, geography, and politics can be chosen for the exam. There is no longer a distinction between arts and sciences. Based on the recent exam scores, Xiao Ai, who is about to face the subject selection, has received scores of $a$ in physics, $b$ in chemistry, $c$ in biology, $d$ in history, $e$ in geography, and $f$ in politics. According to these scores, what is the highest score Xiao Ai can achieve by selecting three subjects for the college entrance examination?",
        "function_declaration": "int getMaxTotalScore(int a, int b, int c, int d, int e, int f)",
        "code_context": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n//function start\n//function end\n\nint main() {\n    int a, b, c, d, e, f;\n    cin >> a >> b >> c >> d >> e >> f;\n    //calling start\n    int maxTotalScore = getMaxTotalScore(a, b, c, d, e, f);\n    //calling end\n    cout<<maxTotalScore;\n    return 0;\n}",
        "example": "[{\"input\": \"90 88 85 93 75 87\", \"output\": \"271\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 256,
        "problem_description": "In the various competitions we participate in, it is common to encounter a ranking method that allows for ties. For example, if there are four players with scores of 50, 80, 50, and 30 respectively, the player with a score of 80 is ranked first, the two players with scores of 50 are both ranked second, and the player with a score of 30 is ranked fourth. Please write a program to calculate the ranking of a player under this ranking method (with higher scores ranked higher). An integer n represents the number of players participating. n integers represent the scores of each player, and an integer x represents the score of the player whose ranking is to be queried.",
        "function_declaration": "int count_greater(int n, int a[], int x)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main () {\n    int n = 0;\n    int a[105] = {0};\n    cin >> n;\n    for (int i = 1; i <= n; ++i) cin >>a[i];\n    int x = 0;\n    cin >> x;\n    // calling start\n    int result = count_greater(n, a, x);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"4\\n50 80 50 30\\n50\", \"output\": \"2\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 128
    },
    {
        "id": 2165,
        "problem_description": "If a decimal number with an even number of digits is a palindrome, it is called an even-digit palindrome number. For example, 1221 is an even-digit palindrome number, while 121 and 1234 are not, because the former is a palindrome but not even-digit, and the latter is even-digit but not a palindrome. Given an integer $n$, please find the first $n$ even-digit palindrome numbers in positive integers, calculate and output their sum.",
        "function_declaration": "long long calculateSum(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tint n;\n\tcin >> n;\n\t// calling start\n\tlong long result = calculateSum(n);\n\t// calling end\n\tcout << result;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"33\"}, {\"input\": \"5\", \"output\": \"165\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1985,
        "problem_description": "In the year 60 AD, the ancient Greek mathematician, Hero, discovered a formula for calculating the area of a triangle. Assuming the lengths of the triangle's sides are $a, b, c$, the area $A$ of the triangle can be calculated using the following formula: $$A =\\sqrt{s(s-a)(s-b)(s-c)}$$where $s =\\frac{a + b + c}{2}$. The formula discovered by Hero is equivalent to the formula discovered by the Chinese mathematician Qin Jiushao during the late Southern Song Dynasty. The formula is as follows: $$A =\\sqrt{\\frac{1}{4}[a^2c^2- (\\frac{a^2+ c^2- b^2}{2})^2]}$$where $a\\geqb\\geqc$. Below, I will provide you with the lengths of the sides of a triangle, $a, b, c$, and you need to calculate the area of this triangle and output it (rounded to 1 decimal place).",
        "function_declaration": "double calculateArea(double a, double b, double c)",
        "code_context": "#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble a, b, c, p, ans;\n\n//function start\n\n//function end\n\nint main(){\n    //freopen(\"5.in\", \"r\", stdin);\n    //freopen(\"5.out\", \"w\", stdout);\n    cin >> a >> b >> c;\n    //calling start\n    ans = calculateArea(a, b, c);\n    //calling end\n    printf(\"%.1lf\", ans);\n    return 0;\n}",
        "example": "[{\"input\": \"3 4 5\", \"output\": \"6.0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1590,
        "problem_description": "Find the given X from the input of N integers. If found, output the first occurrence position of X (counting from 1); Input is a positive integer N (≤100), representing the total number of integers. Provide N integers. The numbers are all within the range of long integers. Input an integer, representing the integer X to be searched. Output the position of X if found (i.e., the order in the sequence), otherwise return -1.",
        "function_declaration": "int findXPosition(int N, vector<int> nums, int X)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int N;\n    cin>>N;\n    vector<int> nums(N);\n    for(int i=0; i<N; i++){\n        cin>>nums[i];\n    }\n    int X;\n    cin>>X;\n    // calling start\n    int result = findXPosition(N, nums, X);\n    // calling end\n    if(result == -1){\n        cout<<\"Not Found\";\n    }else{\n        cout<<result;\n    }\n}",
        "example": "[{\"input\": \"5\\n1 4 2 3 5\\n3\", \"output\": \"4\"}, {\"input\": \"5\\n1 2 3 4 5\\n6\", \"output\": \"Not Found\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1703,
        "problem_description": "Given a sequence of length n (1 ≤ n ≤ 10000) that is sorted in ascending order, find the position of the number x in the sequence.",
        "function_declaration": "int findPosition(int n, int x, int a[])",
        "code_context": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint a[100010];\n\n// function start\n\n// function end\n\nint main() {\n    int n, x;\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    cin >> x;\n    // calling start\n    int pos = findPosition(n, x, a);\n    // calling end\n    if (a[pos] != x)\n        cout << \"not find\" << endl;\n    else\n        cout << pos << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1\\n2\\n3\\n4\\n5\\n3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2306,
        "problem_description": "Given a circular sequence $a_1, a_2, ..., a_n$ of length $n$, where \"circular\" means that $a_1$ and $a_n$ are considered neighbors. Each position in the sequence has a pile of resources, and each number on the sequence represents the quantity of resources in that pile. We want to select a position from the $n$ positions such that all the resources can be gathered together, and the total shipping cost is minimized. Resources can only be moved along adjacent positions, and each unit of resource moved one unit of distance incurs a shipping cost of one unit. How can we choose a gathering point to minimize the total shipping cost? Output the minimum total shipping cost to move all the resources together.",
        "function_declaration": "int findMinTransportationCost(vector<int>& nums) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\n// Function to find the minimum transportation cost\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Calling the function to find the minimum transportation cost\n    //calling start\n    int result = findMinTransportationCost(nums);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n1 2 3 4 5\", \"output\": \"14\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2169,
        "problem_description": "The induction door will automatically open when someone passes by and automatically close after cooling for $d$ seconds. If someone passes through the induction door while it is open, the cooling time will be reset, and it will close again after cooling for $d$ seconds. During a period of time, $n$ people have passed through the induction door, and the time points at which they passed through the induction door are $t_1, t_2, ..., t_n$. Please calculate how long the induction door was open in total.",
        "function_declaration": "int calculateSum(int n, int d, int* arr)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() \n{\n  int n, d;\n  cin >> n >> d;  \n  int* arr = new int[n];\n  for (int i = 0; i < n; ++i) {\n  \t cin >> arr[i];\n  }\n  // calling start\n  int sum = calculateSum(n, d, arr);\n  // calling end\n  cout << sum;\n  delete[] arr;\n}",
        "example": "[{\"input\": \"7 3\\n1 2 7 10 15 17 22\", \"output\": \"18\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1726,
        "problem_description": "Given a string composed of O and X, calculate the score. Each O scores the number of consecutive O's that have appeared so far, and X scores 0. For example, the score of OOXXOXXOOO is 1+2+0+0+1+0+0+1+2+3=10.",
        "function_declaration": "int calculateScore(char s[])",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nchar s[85];\nint main() {\n    scanf(\"%s\", s);\n    // calling start\n    int score = calculateScore(s);\n    // calling end\n    printf(\"%d\\n\", score);\n    return 0;\n}",
        "example": "[{\"input\": \"OOXXOXXOOO\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2336,
        "problem_description": "Given three long and thin cylinders $A$, $B$, and $C$, there are $n$ discs with holes in the middle placed on cylinder $A$. The size of the discs increases from top to bottom. Now, all the discs need to be moved to cylinder $C$, and they can be temporarily stored on cylinder $B$ during the process. Requirements: (1) Only one disc can be moved at a time; (2) The order of the discs on cylinders $A$, $B$, and $C$ must be maintained with smaller discs on top and larger discs on bottom. Now, please output the optimal solution for the movement, using $A->C$ to indicate moving from $A$ to $C$.",
        "function_declaration": "void movePillars(int n, char a, char c, char b)",
        "code_context": "#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n    int n;\n    cin >> n;\n    // calling start\n    movePillars(n, 'A', 'C', 'B');\n    // calling end\n}",
        "example": "[{\"input\": \"1\", \"output\": \"A->C\"}, {\"input\": \"3\", \"output\": \"A->C\\nA->B\\nC->B\\nA->C\\nB->A\\nB->C\\nA->C\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1616,
        "problem_description": "$A_1, A_2, ..., A_n$ is an array composed of $n$ natural numbers (non-negative integers). We call $A_i, ..., A_j$ a non-zero segment within it if and only if the following conditions are satisfied simultaneously: $1 \\leq i \\leq j \\leq n$; for any integer $k$, if $i \\leq k \\leq j$, then $A_k > 0$; $i = 1$ or $A_{i-1} = 0$; $j = n$ or $A_{j+1} = 0$. Here are a few simple examples: In the array $A=[3,1,2,0,0,2,0,4,5,0,2]$, the four non-zero segments are $[3,1,2]$, $[2]$, $[4,5]$, and $[2]$; In the array $A=[2,3,1,4,5]$, there is only one non-zero segment; In the array $A=[0,0,0]$, there are no non-zero segments (meaning the count of non-zero segments is 0). Now, we can perform the following operation on the array $A$: Choose a positive integer $p$, and then set all elements in $A$ that are less than $p$ to 0. Attempt to select a suitable $p$ in order to maximize the count of non-zero segments in the array $A$. If the count of non-zero segments in the input $A$ has already reached the maximum value, you can choose $p=1$, which means no modification will be made to $A$. The input consists of a positive integer $n$ and $n$ natural numbers $A_1, A_2, ..., A_n$ separated by spaces. 70% of the test data satisfies $n \\leq 1000$; all test data satisfies $n \\leq 5 \\times 10^5$, and each number in the array $A$ does not exceed $10^4$. Output only one integer, representing the maximum count of non-zero segments that can be achieved after performing operations on the array $A$.",
        "function_declaration": "int calculateMaxSegments(int n, vector<int>& A)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> A(n);\n    for(int i=0; i<n; i++){\n        cin>>A[i];\n    }\n    // calling start\n    int result = calculateMaxSegments(n, A);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"11\\n3 1 2 0 0 2 0 4 5 0 2\", \"output\": \"5\"}, {\"input\": \"14\\n5 1 20 10 10 10 10 15 10 20 1 5 10 15\", \"output\": \"4\"}, {\"input\": \"3\\n1 0 0\", \"output\": \"1\"}, {\"input\": \"3\\n0 0 0\", \"output\": \"0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1677,
        "problem_description": "Enter 10 ascending integers, with a number range of 1 to 100. Then enter a number x. Find the position of number x among these 10 numbers and output which number it is. If it cannot be found, output -1.",
        "function_declaration": "int findFirstGreaterOrEqual(int a[], int n, int x)",
        "code_context": "#include <iostream>\nusing namespace std;\n\nint n = 10;\nint a[10];\nint x;\n\n// function start\n\n// function end\n\nint main() {\n    // 输入数组\n    for( int i = 0; i < n; ++i ) \n        cin >> a[i];\n    cin >> x;\n    \n    // calling start\n    int result = findFirstGreaterOrEqual(a, n, x);\n    // calling end\n\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"2 6 7 9 11 13 14 23 26 31\\n9\", \"output\": \"4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2208,
        "problem_description": "There are many synthesis-type games with the following gameplay: players are given many numbers, each of which is a power of 2. Players can select two numbers of the same size and combine them into a new number, which is twice the size of the original number. If this synthesis operation can be performed continuously, given the set of numbers that Xiaoice initially obtained, please help her calculate the maximum number she can obtain. A power of 2 refers to a positive integer that only has 2 as a prime factor, such as 4, 256, and so on. However, 60 is not a power of 2 because it has a prime factor of 3.",
        "function_declaration": "long long getMaxNumber(vector<long long>& numbers)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<long long> numbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> numbers[i];\n    }\n    //calling start\n    long long maxNumber = getMaxNumber(numbers);\n    //calling end\n    cout << maxNumber << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"5\\n4 1 2 1 1\", \"output\": \"8\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1838,
        "problem_description": "A certain shipping company recently needs to track the incoming and outgoing shipments of their warehouses. Currently, their only record is a log that tracks the movements of shipping containers. This log includes two types of operations: the first type is an operation for container storage, along with the weight of the container being stored; the second type is an operation for container retrieval. These records are strictly arranged in chronological order. The rules for container storage and retrieval follow a last-in, first-out (LIFO) approach, meaning that each retrieval operation targets the container that was most recently stored in the warehouse. For analytical purposes, analysts have inserted a third type of operation—query operations—into the log at random intervals. When analyzing the log, each query operation prompts the system to report the weight of the heaviest container currently in the warehouse.Input consists of N log operations, each falling into one of the following three formats: 0 X represents a container storage operation, where positive integer X indicates the weight of the container being stored; 1 represents a container retrieval operation, which retrieves the most recently stored container; 2 represents a query operation, requiring the analysis program to output the weight of the heaviest container currently in the warehouse. In case the warehouse is empty, you should ignore retrieval operations, and when a query is made on an empty warehouse, the output should be 0. All data adheres to the constraints N ≤ 200,000, and X ≤ 10^8.The output should contain the results of the query operations from the log.",
        "function_declaration": "vector<int> calculateMaxWeight(vector<pair<int, int>>& logs)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int N;\n    cin>>N;\n    vector<pair<int, int>> logs;\n    for(int i=0;i<N;i++){\n        int operation, weight;\n        cin>>operation;\n        if(operation == 0){\n            cin>>weight;\n        }\n        logs.push_back(make_pair(operation, weight));\n    }\n    // calling start\n    vector<int> result = calculateMaxWeight(logs);\n    // calling end\n    for(int i=0;i<result.size();i++){\n        cout<<result[i]<<endl;\n    }\n}",
        "example": "[{\"input\": \"13\\n0 1\\n0 2\\n2\\n0 4\\n0 2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\", \"output\": \"2\\n4\\n4\\n1\\n0\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2134,
        "problem_description": "Dark Professor is an ASCII art enthusiast. This time, he wants you to print an ASCII art of order n. An ASCII art of order n consists of n consecutive characters \"+\". In particular, Dark Professor specifies that you cannot use loops and must implement it using functions. Can you complete his challenge? (Hint: Functions can call themselves, i.e., recursion; void functions can end directly with the return statement, similar to the break statement in loops.)",
        "function_declaration": "void print(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    int n;\n    cin >> n;\n    // calling start\n    print(n);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"+++\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2349,
        "problem_description": "Given a piece of English text, please adjust the format and output each sentence of the original text on a separate line. The input is only one line, containing a paragraph of English text consisting of several sentences ending with '.'. For 100% of the data, the length of the text (i.e., the number of characters) does not exceed 1000. Output several lines, with one sentence per line.",
        "function_declaration": "void formatText(const string& text) ",
        "code_context": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    string text;\n    getline(cin, text);\n\n    //calling start\n    formatText(text);\n    //calling end\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"This is the first sentence. This is the second sentence.\", \"output\": \"This is the first sentence.\\nThis is the second sentence.\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1626,
        "problem_description": "Input three integers a, b, c, output the value of a OR operation with b, and then the result of AND operation with c.",
        "function_declaration": "int calculate(int a, int b, int c)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    // calling start\n    int result = calculate(a, b, c);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"1 2 3\", \"output\": \"3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1913,
        "problem_description": "If a decimal number with an even number of digits is a palindrome, it is called an even-digit palindrome number. For example, 1221 is an even-digit palindrome number, while 121 and 1234 are not, because the former is a palindrome but the number of digits is not even, and the latter has an even number of digits but is not a palindrome. Given an integer n, please find the first n even-digit palindrome numbers in positive integers, calculate and output their sum. For 30% of the data, 1 ≤ n ≤ 100; for 60% of the data, 1 ≤ n ≤ 5000; for 100% of the data, 1 ≤ n ≤ 100,000.",
        "function_declaration": "long long calculateSum(long long n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    long long n;\n    cin >> n;\n    // calling start\n    long long result = calculateSum(n);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"33\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1839,
        "problem_description": "Given an arithmetic expression containing only addition and multiplication, please program to calculate the value of the expression.",
        "function_declaration": "long long calculate(string x)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nstring x;\nstack<char> s;\nstack<long long> n;\nlong long ans;\n\n// function start\n\n// function end\n\nint main() {\n    getline(cin, x);\n    // calling start\n    long long result = calculate(x);\n    // calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"1+1*3+4\\n1+1234567890*1\\n1+1000000003*1\", \"output\": \"8\\n7891\\n4\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1719,
        "problem_description": "Given a string of length n, output the total number of palindrome substrings (with a length greater than 1). A palindrome substring is a string that reads the same forwards and backwards, such as 'abba' or 'cccdeedccc'.",
        "function_declaration": "int countPalindromeSubstrings(char a[], int n)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){ \n    char a[505]; \n    int n; \n    scanf(\"%s\",a); \n    n=strlen(a);\n    //calling start\n    int cnt = countPalindromeSubstrings(a, n);\n    //calling end\n    cout << cnt;\n    return 0;\n}",
        "example": "[{\"input\": \"123321125775165561\", \"output\": \"10\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2094,
        "problem_description": "The warehouse of a certain shopping mall has n types of products, and each product is numbered from 1 to n. Now, the mall manager suddenly had an idea and decided to take out all the products with prime numbers for a promotional event. Please help the warehouse manager select the products with prime number labels.",
        "function_declaration": "bool isPrime(int n)",
        "code_context": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main ( ) { \n    int n;\n    cin >> n;\n    // calling start\n    for (int i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            cout << i << \" \";\n        }\n    }\n    // calling end\n    return 0; \n}",
        "example": "[{\"input\": \"20\", \"output\": \"2 3 5 7 11 13 17 19\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2359,
        "problem_description": "In competitive sports involving two-player matches, such as table tennis, badminton, and chess, the most common formats are knockout and round-robin tournaments. The former has fewer matches, each one intense and exciting, but with higher randomness. The latter tends to be fairer with lower randomness, but often leads to a lengthy competition process. The Swiss tournament format introduced in this question got its name from being first used in an international chess competition held in Switzerland in 1895. It can be seen as a compromise between knockout and round-robin, ensuring stability while preventing the schedule from becoming excessively long.In a Swiss tournament, $2 \\times N$ players numbered from $1$ to $2N$ participate in $R$ rounds of matches. Before each round and after all matches, players are ranked based on their total scores, with ties broken by lower player numbers. A player's total score is their initial score before the first round plus the scores earned in all matches participated in. In case of tied scores, the player with the lower number is ranked higher.The matchups for each round are based on the rankings before that round: players ranked $1$ and $2$, $3$ and $4$, $2K - 1$ and $2K$, $2N - 1$ and $2N$, and so on, compete in matches. The winner of each match gets $1$ point, while the loser gets $0$ points. Except for the first round, the matchups for subsequent rounds cannot be predetermined and depend on the players' performance in previous matches. Given the initial scores and skill values of each player, the task is to compute the player's number who will be ranked $Q$ after $R$ rounds of matches. Assuming the player with higher skill value always wins and, in case of tied skill values, the player with the lower number wins.Input consists of three positive integers: $N$, $R$, and $Q$, where $N$ represents the number of players ($2 \\times N$), $R$ represents the number of rounds, and $Q$ represents the desired rank. Followed by $2 \\times N$ non-negative integers $s_1, s_2, ..., s_{2N}$, representing the initial scores of players. Then, $2 \\times N$ positive integers $w_1, w_2, ..., w_{2N}$ are given, representing the skill values of players. The output should be a single integer representing the player number ranked $Q$ after $R$ rounds of matches",
        "function_declaration": "int SwissTournament(int N, int R, int Q, vector<int> initialScores, vector<int> strengths) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n\n//function start\n\n//function end\n\nint main() {\n    int N, R, Q;\n    cin >> N >> R >> Q;\n\n    vector<int> initialScores(2 * N);\n    for (int i = 0; i < 2 * N; ++i) {\n        cin >> initialScores[i];\n    }\n\n    vector<int> strengths(2 * N);\n    for (int i = 0; i < 2 * N; ++i) {\n        cin >> strengths[i];\n    }\n    //calling start\n    int result = SwissTournament(N, R, Q, initialScores, strengths);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"2 4 2 \\n7 6 6 7 \\n10 5 20 15\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2183,
        "problem_description": "Given an integer a, if $a > 2147483647$, output $2147483647$; if $a < -2147483648$, output $-2147483648$; otherwise, output a itself.",
        "function_declaration": "int process(int a)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a;\n    cin>>a; // 其实读入int时题面要求的操作会自动完成\n    // calling start\n    int result = process(a);\n    // calling end\n    cout<<result;\n}",
        "example": "[{\"input\": \"10000000000\", \"output\": \"2147483647\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2293,
        "problem_description": "On a straight line, there are $n$ points, and the coordinate of the $i$-th point is $x_i$. Given a restriction $d$, if the distance between two points does not exceed $d$, then they can communicate directly. Please count the number of pairs of points that can communicate directly.",
        "function_declaration": "long long calculatePairs(int n, int d, int x[])",
        "code_context": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint x[100000];\n\n// function start\n\n// function end\n\nint main() {\n    int n, d;\n    cin >> n >> d;\n    for (int i = 0; i < n; ++i)\n        cin >> x[i];\n    // calling start\n    long long result = calculatePairs(n, d, x);\n    // calling end\n    cout << result;\n}",
        "example": "[{\"input\": \"4 25\\n30 40 10 20\", \"output\": \"5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1720,
        "problem_description": "Enter a word consisting of 5 characters from the keyboard and determine if this word is \"hello\".",
        "function_declaration": "bool isHello(char* str)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char str[6];\n    scanf(\"%s\",&str); \n\n    // calling start\n    bool flag = isHello(str);\n    // calling end\n\n    if(flag == 0)\n        printf(\"this word is not hello!\");\n    else\n        printf(\"this word is hello!\");\n    return 0;\n}",
        "example": "[{\"input\": \"hello\", \"output\": \"this word is hello!\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1560,
        "problem_description": "Given an integer n greater than 1, find the sum of all numbers in the range [1, n].",
        "function_declaration": "int calculateSum(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    cin >> n;\n    \n    // calling start\n    int result = calculateSum(n);\n    // calling end\n    \n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"3\", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2232,
        "problem_description": "Little A wants to test your proficiency in multiplication and division operations. First, Little A gives you a positive integer n. Then, Little A will give you q operations, each operation consisting of two positive integers a and b. If a=1, it means multiplying n by b (i.e., changing the value of n to n*b); if a=2, it means dividing n by b (i.e., changing the value of n to n/b, keeping the decimal part). After all the operations are completed, please output the value of n, rounded to the nearest integer. In particular, Little A will ensure that the value of n after all the operations is not greater than 10000, for your convenience in outputting.",
        "function_declaration": "double calculateLog(int n, int q, vector<pair<int, int>> operations)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n int n,q,a,b;\n cin>>n>>q;\n vector<pair<int, int>> operations(q);\n for(int i=0; i<q; i++){\n  cin>>a>>b;\n  operations[i] = make_pair(a, b);\n }\n // calling start\n double c = calculateLog(n, q, operations);\n // calling end\n printf(\"%.0lf\",c);\n}",
        "example": "[{\"input\": \"1 3\\n1 1000\\n2 7\\n1 50\", \"output\": \"7143\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2152,
        "problem_description": "The game rule of \"pass on every seven\" is as follows: Count the integers in a given range. If the number encountered is a multiple of 7 or its units digit is 7, do not count and output \"pass\". Given the first integer $a$ to start the game and the last integer $b$ when the game ends, please output the entire counting process. Output multiple lines: each line contains a number or a word.",
        "function_declaration": "void checkNumber(int a, int b)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b;  \n    cin >> a >> b;\n    // calling start\n    checkNumber(a, b);\n    // calling end\n}",
        "example": "[{\"input\": \"1 10\", \"output\": \"1\\n2\\n3\\n4\\n5\\n6\\npass\\n8\\n9\\n10\"}, {\"input\": \"41 50\", \"output\": \"41\\npass\\n43\\n44\\n45\\n46\\npass\\n48\\npass\\n50\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2345,
        "problem_description": "Little Orange borrowed a textbook from classmate Little Wan to take notes. Little Wan added asterisks \"*\" before and after key sentences. The content between two \"*\" represents the key points. Little Orange feels that this is not intuitive enough, so she wants to use angle brackets \"<\" and \">\" to represent key sentences when recording in her own notebook. Please help Little Orange make the conversion! Note that key sentences may span multiple lines.",
        "function_declaration": "void processStr(char* str)",
        "code_context": "#include <cstring>\n#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nchar str[10001];\n\nint main() {\n    cin.read(str, 10000);\n    // calling start\n    processStr(str);\n    // calling end\n    cout.write(str, strlen(str));\n    return 0;\n}",
        "example": "[{\"input\": \"hello, my name\\nis *XiaoWan*,\\nnice to meet *you*.\", \"output\": \"hello, my name\\nis <XiaoWan>,\\nnice to meet <you>.\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1795,
        "problem_description": "Using pointers, write a function to reverse the input string and output it.",
        "function_declaration": "void reversePrint(char* str, int len)",
        "code_context": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    char str[100];\n    cin >> str;\n    int len;\n    len = strlen(str);\n    // calling start\n    reversePrint(str, len);\n    // calling end\n    return 0;\n}",
        "example": "[{\"input\": \"ABCDEFGHIJK\", \"output\": \"KJIHGFEDCBA\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2016,
        "problem_description": "2048 is a simple and interesting puzzle game. The rules are as follows: there are some blocks with numbers. Only two blocks with the same number can be merged into one block, with the number becoming the sum of the two numbers. For example, two blocks with the number 1 can be merged into one block with the number 2, but two blocks with the numbers 1 and 2 cannot be merged. Now, given the numbers of two blocks, determine if they can be merged. In particular, the numbers may not be integers.",
        "function_declaration": "bool isEqual(double x, double y)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nsigned main() {\n    double x,y;\n    cin >> x >> y;\n    // calling start\n    bool result = isEqual(x, y);\n    // calling end\n    if(result) cout << \"Yes\";\n    else       cout << \"No\";\n    return 0;\n}",
        "example": "[{\"input\": \"1.3 1.3\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1745,
        "problem_description": "There is a sequence of n numbers and a sliding window of length k. At the beginning, the left side of the window overlaps with the first number, and then it moves one position to the right each time until the right side of the window exactly covers the last number. Please find the maximum value in each sliding window. Return n - k + 1 integers, representing the maximum value in each sliding window.",
        "function_declaration": "vector<int> slidingWindowMax(vector<int>& nums, int k)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    // calling start\n    vector<int> result = slidingWindowMax(nums, m);\n    // calling end\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"5 2\\n1 4 3 5 2\", \"output\": \"4 4 5 5\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2187,
        "problem_description": "Given n positive integers, you can choose any two numbers a and b to compose, and the composition result is 2*min(a,b) (i.e., twice the smaller number between a and b). The two numbers a and b used for composition will disappear after composition, while the composed number 2*min(a,b) can continue to participate in other compositions. You can perform composition operations any number of times. Return the maximum number you can obtain.",
        "function_declaration": "int findMaxNumber(int n, vector<int>& nums) ",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Function to find the maximum number that can be obtained\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    // Calling the function to find the maximum number\n    //calling start\n    int result = findMaxNumber(n, nums);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"8\\n1 2 3 4 5 6 7 8\", \"output\": \"28\"}, {\"input\": \"2\\n7 3\", \"output\": \"7\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2288,
        "problem_description": "In a team battle against a monster, Xiao Ai and Xiao Ai attack simultaneously. The monster starts with $n$ health points, and it is defeated when its health reaches 0 or below. Xiao Ai can deal $a$ damage per minute, while Xiao Ai can deal $b$ damage per minute. If $a=2$ and $b=4$, Xiao Ai attacks at the moments $$0.5, 1, 1.5, 2, 2.5, ...$$ and Xiao Ai attacks at the moments $$0.25, 0.5, 0.75, 1, 1.25, 1.5, ...$$. There are two types of attacks: a normal attack that deals 1 damage to the monster, and a critical attack that deals double damage, totaling $(1+1)×2=4$ damage. Once the battle starts, it does not stop until the monster is defeated. The question is: Which player deals the final blow to the monster? If Xiao Ai deals the final blow, return A; if Xiao Ai deals the final blow, return B; if both players' critical attacks are the final blow, return C.",
        "function_declaration": "char lastAttacker(int n, int a, int b)",
        "code_context": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to determine the last attacker\n//function start\n\n//function end\n\nint main() {\n    int n, a, b;\n    cin >> n >> a >> b;\n\n    // Determine the last attacker and print the result\n    //calling start\n    char result = lastAttacker(n, a, b);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"40\\n3 5\", \"output\": \"C\"}, {\"input\": \"33\\n3 5\", \"output\": \"B\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1760,
        "problem_description": "Sort the numbers 1 to 4 in lexicographical order from smallest to largest. Input one of the permutations, for example (3 2 1 4). Utilize the next_permutation function and output its next permutation (3 2 4 1). If there is no next permutation, output 'No'. Input consists of 4 numbers representing a permutation of 1 to 4. Output 4 numbers separated by spaces representing the next permutation.",
        "function_declaration": "void nextPermutation(vector<int>& nums)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    vector<int> nums(4);\n    for(int i=0; i<4; i++){\n        cin>>nums[i];\n    }\n    // calling start\n    nextPermutation(nums);\n    // calling end\n}",
        "example": "[{\"input\": \"1 2 3 4\", \"output\": \"1 2 4 3\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1832,
        "problem_description": "When representing a static search table with a sequential list, the search function can be implemented using sequential search. Usually, the search process of sequential search starts from the last record in the table, and compares the key of each record with the given search value one by one. If the key of a record is equal to the given value, it indicates a successful search. Otherwise, if all the keys are not equal to the given value until the first record, it indicates that there is no corresponding record in the table, and the search fails. Read in a sequence of integers, and perform multiple queries to determine if each query has found the corresponding integer. If found, output the position of the integer. Given n integers and a search value t, if the corresponding integer is found in the query, return its corresponding position; otherwise, return -1.",
        "function_declaration": "int findIndex(int a[],int n, int t)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;  \n\nint a[510];\n\n// function start\n\n// function end\n\nint main() {\n    int n, m, t;\n    cin >> n >> m;\n    for (int i = 0; i < n; i++)\n        cin >> a[i];\n    while (m--) {\n        cin >> t;\n        // calling start\n        int index = findIndex(a, n, t);\n        // calling end\n        cout << index << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"8 3\\n1 3 5 7 8 9 10 15\\n9 2 5\", \"output\": \"5 -1 2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2202,
        "problem_description": "There are two methods for naming variables: camel case - each word starts with a capital letter and there are no spaces between words. For example, MyFirstName, DataCenter, etc. Snake case - all letters in each word are lowercase and words are connected with underscores _. For example, my_first_name, data_center, etc. Given a name in camel case, please convert it to snake case.",
        "function_declaration": "string camelToSnake(string s)",
        "code_context": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Function to convert camel case to snake case\n//function start\n\n//function end\n\nint main() {\n    string s;\n    cin >> s;\n\n    // Calling the function to convert camel case to snake case\n    //calling start\n    string result = camelToSnake(s);\n    //calling end\n\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"HowAreYou\", \"output\": \"how_are_you\"}, {\"input\": \"Good\", \"output\": \"good\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1740,
        "problem_description": "There are two chess pieces on a grid, and their respective movement steps are provided. Each time you can choose to move only one piece one step, or choose to move both pieces one step. The cost for each step is the square of the Euclidean distance between the two chess pieces after they have moved. Please find a solution that minimizes the cost of their movement and output that cost. Input consists of two integers, n and m (1 ≤ n, m ≤ 1000), representing the movement steps for the two chess pieces. Two integers x1 and y1 represent the starting coordinates of chess piece 1. Two integers x2 and y2 represent the starting coordinates of chess piece 2. 'moves1' contains n integers, representing the movement path of chess piece 1. 'moves2' contains m integers, representing the movement path of chess piece 2. The description of the movement path is as follows: 1 represents moving upwards, 2 represents moving downwards, 3 represents moving left, and 4 represents moving right. The absolute value of the coordinates does not exceed 1000. Return an integer representing the minimum cost.",
        "function_declaration": "int calculateMinimumCost(int n, int m, int x1, int y1, int x2, int y2, vector<int>& moves1, vector<int>& moves2)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    // Reading input\n    int n, m;\n    cin >> n >> m;\n\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    vector<int> moves1(n);\n    vector<int> moves2(m);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> moves1[i];\n    }\n\n    for (int i = 0; i < m; ++i) {\n        cin >> moves2[i];\n    }\n\n    //calling start\n    int minCost = calculateMinimumCost(n, m, x1, y1, x2, y2, moves1, moves2);\n    //calling end\n    cout << minCost << endl;\n\n    return 0;\n}\n",
        "example": "[{\"input\": \"2 3\\n0 0\\n1 0\\n3 3\\n4 4 4\", \"output\": \"56\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2049,
        "problem_description": "Hastin wants to have an intense duel with DarkSharpless! They have chosen the most primitive and simple way - rock-paper-scissors. As the referee, you need to determine who wins. a and b represent the moves made by Hastin and DarkSharpless, respectively. In this game, 0 represents rock, 1 represents scissors, and 2 represents paper. The rules are the traditional rock-paper-scissors rules, where rock beats scissors, scissors beats paper, and paper beats rock. Return 1 if Hastin wins, return 0 if it's a tie, and return -1 if DarkSharpless wins.",
        "function_declaration": "int gameResult(int a, int b)",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int a = 0, b = 0;\n    cin >> a >> b;\n    //calling start\n    int result = gameResult(a, b);\n    //calling end\n    if (result == 1) puts(\"Hastin\");\n    else if (result == 0) puts(\"draw\");\n    else puts(\"DarkSharpless\");\n    return 0;\n}",
        "example": "[{\"input\": \"1 0\", \"output\": \"DarkSharpless\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1594,
        "problem_description": "Little Ming's wallet contains various banknotes. There are 4 types of banknotes (with denominations of 1 yuan, 3 yuan, 5 yuan, and 10 yuan), with a, b, c, and d notes respectively. Now, Little Ming needs to pay N yuan when going out to buy things. Without giving any change, can he successfully make the payment? If he can, please calculate the number of possible payment methods; if he cannot, return 0.",
        "function_declaration": "int calculatePaymentWays(int a, int b, int c, int d, int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int a, b, c, d, n;\n    cin >> a >> b >> c >> d >> n;\n\n    // calling start\n    int num = calculatePaymentWays(a, b, c, d, n);\n    // calling end\n\n    if (num)\n        cout << num << endl;\n    else\n        cout << \"no\" << endl;\n    \n    return 0;\n}",
        "example": "[{\"input\": \"1 1 1 1 1\", \"output\": \"1\"}, {\"input\": \"1 1 1 1 100\", \"output\": \"no\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2221,
        "problem_description": "A certain school's exam scores are presented in the form of grades, with each student's score being one of ABCD. The school has n classes. Xiaoi wants to sort these classes in descending order based on the proportion of A grades in this exam. If two classes have the same proportion of A grades, they should be sorted in descending order based on the proportion of B grades. If they are still the same, they should be sorted based on the proportion of C grades. If they are still the same, they should be sorted in descending order based on the number of students in the class. If they are still the same, they should be sorted in ascending order based on the class number. Please help Xiaoi complete this task. The input consists of n strings, representing the exam scores of the i-th class, with each character representing a student's score.",
        "function_declaration": "vector<int> sortClasses(int n, const vector<string>& grades)",
        "code_context": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> grades(n);\n    for (int i = 0; i < n; i++) {\n        cin >> grades[i];\n    }\n    //calling start\n    vector<int> sortedClasses = sortClasses(n, grades);\n    //calling end\n    for (int id : sortedClasses) {\n        cout << id << \" \";\n    }\n\n    return 0;\n}",
        "example": "[{\"input\": \"3\\nABAACAA\\nDDABBB\\nBABABA\", \"output\": \"1 3 2\"}, {\"input\": \"3\\nABCD\\nABCDABCD\\nAABBCCDD\", \"output\": \"2 3 1\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1596,
        "problem_description": "The value of a constant a is 10. Input a number b, and find the sum of constant a and variable b. When adding two variables or constants, use + to connect them. For example, to find the sum of variable a and constant 2, it can be written as a + 2.",
        "function_declaration": "int add(int a, int b)",
        "code_context": "#include <iostream>\nusing namespace std; \n\n// function start\n\n// function end\n\nint main() {\n    const int a = 10;\n    int b;\n    cin >> b;\n    // calling start\n    int result = add(a, b);\n    // calling end\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"5\", \"output\": \"15\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1782,
        "problem_description": "There are $n$ children, lined up from shortest to tallest according to their height. Now a new child with a height of $k$ has arrived. Please tell me at which position should he/she be inserted into the queue?",
        "function_declaration": "int findFirstHigher(double h[], int n, double k)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int n;\n    double k;\n    double h[100010];\n\n    cin >> n >> k;\n    for (int i = 0; i < n; ++i)\n        cin >> h[i];\n\n    // calling start\n    int result = findFirstHigher(h, n, k);\n    // calling end\n\n    cout << result;\n    return 0;\n}",
        "example": "[{\"input\": \"5 1.22\\n1.20 1.32 1.35 1.37 1.39 \", \"output\": \"2\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1992,
        "problem_description": "Bo Xiaoyu encountered a challenge and he wants to ask for your help: given a 6-digit number, please output the result of reversing the order of the digits.",
        "function_declaration": "void reversePrint(char a1, char a2, char a3, char a4, char a5, char a6)",
        "code_context": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//function start\n\n//function end\n\nint main(){\n    //freopen(\"5.in\", \"r\", stdin);\n    //freopen(\"5.out\", \"w\", stdout);\n\n    char a1,a2,a3,a4,a5,a6;\n    scanf(\"%c%c%c%c%c.%c\", &a1, &a2, &a3, &a4, &a5, &a6);\n    //calling start\n    reversePrint(a1, a2, a3, a4, a5, a6);\n    //calling end\n    return 0;\n}",
        "example": "[{\"input\": \"12345.6\", \"output\": \"6.54321\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1924,
        "problem_description": "Given a string s, if any substring of s with a length greater than or equal to 2 has a character that appears more than half of the length of the substring, then s is not random. Otherwise, we call s random. Please determine if s is a random string. Let |s| denote the length of s. For 30% of the data, 1 ≤ |s| ≤ 1000; for 60% of the data, 1 ≤ |s| ≤ 10000; for 100% of the data, 1 ≤ |s| ≤ 100000. It is guaranteed that s consists only of lowercase English letters.",
        "function_declaration": "bool isRandomString(string str)",
        "code_context": "#include <bits/stdc++.h>\nusing namespace std;\n\nint cnt[30];\n\n// function start\n\n// function end\n\nint main() {\n    string str;\n    cin >> str;\n    // calling start\n    bool result = isRandomString(str);\n    // calling end\n    if (result) {\n        cout << \"Random string\" << endl;\n    } else {\n        cout << \"Not a random string\" << endl;\n    }\n    return 0;\n}",
        "example": "[{\"input\": \"yacs\", \"output\": \"Random string\"}, {\"input\": \"iai\", \"output\": \"Not a random string\"}, {\"input\": \"happy\", \"output\": \"Not a random string\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1885,
        "problem_description": "American people use the Imperial system of measurement. They are accustomed to using feet and inches to report their height. Please convert feet and inches to the metric unit of meters.",
        "function_declaration": "float calculateHeight(int feet, int inch)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int feet, inch; \n  float height;\n  cin >> feet >> inch;\n  // calling start\n  height = calculateHeight(feet, inch);\n  // calling end\n  cout << height;\n  return 0;\n}",
        "example": "[{\"input\": \"5 7\", \"output\": \"1.7018\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1974,
        "problem_description": "BMI index is a commonly used international standard to measure the degree of obesity in the human body. Its algorithm is m÷(h×h), where m refers to weight (in kilograms) and h refers to height (in meters). Please calculate the BMI index.",
        "function_declaration": "double calculateBMI(double m, double h)",
        "code_context": "#include <iostream>\n\nusing namespace std;\ndouble m, h, bmi;\n\n// function start\n\n// function end\n\nint main() {\n  cin >> m >> h;\n  // calling start\n  bmi = calculateBMI(m, h);\n  // calling end\n  // 开始比大小\n  if (bmi < 18.5) cout << \"Underweight\" << endl;\n  if (bmi >= 18.5 && bmi < 24) cout << \"Normal\";\n  if (bmi >= 24) cout << bmi << endl << \"Overweight\" << endl;\n  return 0;\n}",
        "example": "[{\"input\": \"70 1.72\\n\", \"output\": \"Normal\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1791,
        "problem_description": "Write a program that uses dynamic allocation to calculate the first 20 terms of the Fibonacci sequence and store them in dynamically allocated space.",
        "function_declaration": "void calculateFibonacci(int* p)",
        "code_context": "#include <iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int *p;\n    p = new int[20];\n    // calling start\n    calculateFibonacci(p);\n    // calling end\n    for (int i = 0; i < 20; i++)\n        cout << p[i] << \" \";\n    return 0;\n}",
        "example": "[{\"input\": \" \", \"output\": \"1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 306,
        "problem_description": "Jin Jin has always managed her pocket money on her own. At the beginning of each month, her mother gives her 300 yuan, and Jin Jin budgets her expenses for the month, always ensuring that her actual spending matches her budget. To teach Jin Jin about saving money, her mother proposed a plan: Jin Jin can deposit any amount in hundreds with her mother at any time, and by the end of the year, her mother will return 20% of the total deposited amount to Jin Jin. As a result, Jin Jin has come up with a savings plan: at the beginning of each month, after receiving the pocket money from her mother, if she anticipates that she will have more than 100 yuan left at the end of the month or exactly 100 yuan, she will deposit the money in hundreds with her mother and keep the remainder. For example, at the beginning of November, Jin Jin had 83 yuan left, and her mother gave her 300 yuan. Jin Jin estimated her expenses for November to be 180 yuan, so she would deposit 200 yuan with her mother and keep 183 yuan. By the end of November, Jin Jin would have 3 yuan left.Jin Jin discovered that the main risk of this savings plan is that the money deposited with her mother cannot be withdrawn before the end of the year. It's possible that in some months, the money Jin Jin has on hand plus the money her mother gives her won't be enough to cover the budget for that month. In such cases, Jin Jin will have to tighten her belt and cut her budget for that month. Now, based on Jin Jin's budget for each month from January to December 2004, you need to determine if this situation will occur. If it won't, calculate how much money Jin Jin will have in hand by the end of 2004 after her mother returns the 20% of her usual savings. If during the implementation of the savings plan there's a month where the money won't be sufficient, output -X, where X represents the first month where this situation occurs. Otherwise, return the amount of money Jin Jin will have in hand by the end of 2004.",
        "function_declaration": "int calculateSavings(int monthlyExpenses[12])",
        "code_context": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n    int x = 0;\n    int monthlyExpenses[12];\n    for (int i = 0; i < 12; ++i) {\n        cin >> x;\n        monthlyExpenses[i] = x;\n    }\n    // calling start\n    int result = calculateSavings(monthlyExpenses);\n    // calling end\n    cout << result << '\\n';\n    return 0;\n}",
        "example": "[{\"input\": \"290\\n230\\n280\\n200\\n300\\n170\\n340\\n50\\n90\\n80\\n200\\n60\\n\", \"output\": \"-7\\n\"}]",
        "time_limit": 1000,
        "memory_limit": 125
    },
    {
        "id": 1827,
        "problem_description": "Beside an old train station, there is a bridge with a rotating bridge deck that can rotate horizontally around the central pier of the river. A station employee found that the bridge can accommodate a maximum of two train cars. By rotating the bridge 180 degrees, the positions of the adjacent two train cars can be swapped, allowing for a rearrangement of the car order. Therefore, he is responsible for using this bridge to arrange the incoming train cars in ascending order by car number. After he retired, the train station decided to automate this task, and one important aspect is to develop a program that takes the initial car order as input and calculates the minimum number of steps required to sort the train cars.",
        "function_declaration": "long long bubbleSortAndCount(int n, int a[])",
        "code_context": "#include <cstdio> \n#include <cstring> \n#include <iostream> \n#include <algorithm> \n#define N 10005 \nusing namespace std; \n\nint n, a[N]; \n\n// function start\n\n// function end\n\nint main() { \n    scanf(\"%d\", &n); \n    for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]); \n\n    // calling start\n    long long sum = bubbleSortAndCount(n, a);\n    // calling end\n\n    printf(\"%lld\\n\", sum); \n    return 0; \n}",
        "example": "[{\"input\": \"4\\n4 3 2 1 \", \"output\": \"6\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2153,
        "problem_description": "Given a positive integer $n$, please determine whether it is a palindrome number. A palindrome number is defined as a number that remains the same when its digits are reversed. For example, 101 and 6886 are palindrome numbers, while 100 is not. If the input is a palindrome number, return 1; otherwise, return 0.",
        "function_declaration": "int reverseAndCheck(int n)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n\tint n;\n\tcin >> n;\n\t// calling start\n\tint result = reverseAndCheck(n);\n\t// calling end\n\tif (result == 1)\n\t\tcout << \"Palindromic Number\";\n\telse \n\t    cout << \"Non-Palindromic Number\";\n}",
        "example": "[{\"input\": \"1001\", \"output\": \"Palindromic Number\"}, {\"input\": \"8848\", \"output\": \"Non-Palindromic Number\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1888,
        "problem_description": "Given an integer a, determine its sign. If a>0, return positive; if a=0, return zero; if a<0, return negative.",
        "function_declaration": "string checkNumber(int a)",
        "code_context": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main() {\n  int a;\n  cin >> a;\n  // calling start\n  cout << checkNumber(a);\n  // calling end\n  return 0;\n}",
        "example": "[{\"input\": \"10\", \"output\": \"positive\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1621,
        "problem_description": "Considering that the safety index is a large integer within a wide range, Xiaocai may not be certain whether he is truly safe. Therefore, Dunden decides to set a threshold value $\\theta$ in order to convert the safety index $y$ into a concrete prediction outcome - either 'will fail' or 'will not fail'. Since a higher safety index indicates a lower likelihood of Xiaocai failing, when $y \\geq \\theta$, Dunden will predict that Xiaocai is safe and will not fail this semester; conversely, if $y < \\theta$, Dunden will caution Xiaocai: 'You might fail your final exams, be prepared.' So, how should this threshold be set? Dunden plans to find the answer from the past data. Specifically, Dunden evaluated the safety index of $m$ students from the previous semester. The safety index of the $i$-th student $(1 \\leq i \\leq m)$ is denoted as $y_i$, which is an integer in the range $[0, 10^8]$. Additionally, the student's result from the previous semester is denoted as $result_i \\in {0, 1}$, where $0$ represents failing and $1$ represents not failing. Correspondingly, Dunden uses $predict_{\\theta}(y)$ to represent the specific prediction outcome obtained by converting the safety index $y$ using the threshold $\\theta$. If $predict_{\\theta}(y_j)$ is the same as $result_j$, it means that Dunden's prediction for whether the $j$-th student failed or not using the threshold $\\theta$ is correct; if they are different, it means the prediction is wrong. If $y < \\theta$, then $predict_{\\theta}(y) = 0$, and if $y \\geq \\theta$, then $predict_{\\theta}(y) = 1$. Finally, Dunden designs the following formula to calculate the optimal threshold $\\theta^*$：$\\theta^*=arg \\max_{\\theta\\in y_i}\\sum_{j=1}^m(predict_{\\theta}(y_j)==result_j)$. This formula can also be equivalently expressed by the following rule: The optimal threshold is selected only from $y_i$, i.e., it is the same as the safety index of a particular student. Based on this threshold, predictions are made for the previous semester's failing status of these $m$ students. The threshold that results in the highest number of correct predictions (i.e., the highest accuracy) is chosen. If multiple thresholds achieve the highest accuracy, the largest one is selected. Input consists of a positive integer $m$ and $m$ pairs of integers $y_i$ and $result_i$, as described above. 70% of test data ensures that $m \\leq 200$; all test data ensures $2 \\leq m \\leq 10^5$. Return an integer representing the optimal threshold $\\theta^*$.",
        "function_declaration": "int calculateThreshold(int m, vector<int>& y, vector<int>& result)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n// function end\n\nint main(){\n    int m;\n    cin>>m;\n    vector<int> y(m);\n    vector<int> result(m);\n    for(int i=0; i<m; i++){\n        cin>>y[i]>>result[i];\n    }\n    // calling start\n    int threshold = calculateThreshold(m, y, result);\n    // calling end\n    cout<<threshold;\n}",
        "example": "[{\"input\": \"6\\n0 0\\n1 0\\n1 1\\n3 1\\n5 1\\n7 1\", \"output\": \"3\"}, {\"input\": \"8\\n5 1\\n5 0\\n5 0\\n2 1\\n3 0\\n4 0\\n100000000 1\\n1 0\", \"output\": \"100000000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1599,
        "problem_description": "Enter a character and return its corresponding ASCII code.",
        "function_declaration": "int charToInt(char a)",
        "code_context": "#include <cstdio>\nusing namespace std; \n\n//function start\n\n//function end\n\nint main() {\n    char a;\n    scanf(\"%c\", &a);\n    //calling start\n    int result = charToInt(a);\n    //calling end\n    printf(\"%d\", result);\n    return 0;\n}",
        "example": "[{\"input\": \"a\", \"output\": \"97\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 1798,
        "problem_description": "Inserting x into the array a, which is already sorted in ascending order, while maintaining the sorted order. The array a contains a total of 10 elements: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19. Input x, and output all elements of the array after insertion, separated by spaces.",
        "function_declaration": "void insertElement(int a[], int x)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int a[11] = {1,3,5,7,9,11,13,15,17,19};\n    int x;\n    cin>>x;\n    // calling start\n    insertElement(a, x);\n    // calling end\n}",
        "example": "[{\"input\": \"4\", \"output\": \"1 3 4 5 7 9 11 13 15 17 19\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2229,
        "problem_description": "Given a positive integer n, output the value of the greatest common divisor of n and n+1 modulo 1000003.",
        "function_declaration": "int gcdOfNAndNPlusOne(int n)",
        "code_context": "#include <iostream>\nusing namespace std;\n\nconst int MOD = 1000003;\n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    int result = gcdOfNAndNPlusOne(n);\n    //calling end\n    cout << result << endl;\n\n    return 0;\n}",
        "example": "[{\"input\": \"2\", \"output\": \"1\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 1655,
        "problem_description": "How many apples should there be in a pile at least if you want to distribute them to n children so that each child can get apples and the number of apples each child gets is different?",
        "function_declaration": "int calculateSum(int n)",
        "code_context": "#include <iostream>\n\nusing namespace std; \n\n//function start\n\n//function end\n\nint main() {\n    int n;\n    cin >> n;\n    //calling start\n    int result = calculateSum(n);\n    //calling end\n    cout << result << endl;\n    return 0;\n}",
        "example": "[{\"input\": \"8\", \"output\": \"36\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2372,
        "problem_description": "The final exam of Xiao Ben has ended. His grades will be released soon. Given a grade table, the school's teacher believes that it is not good to calculate the scores with so many grades entered, so he wants a comprehensive score evaluation. The comprehensive score evaluation is defined as: (the sum of the maximum scores of each subject * 3 - the sum of the actual scores of each subject * 2) divided by the sum of the deducted scores for each subject. Xiao Ben wants you to give him his comprehensive score. Can you do it? Enter an integer n, representing the total number of subjects. n integers $a_i$, representing the maximum score of the i-th course. n integers $b_i$, representing Xiao Ben's actual score for the i-th course. Return a decimal number representing his comprehensive score.",
        "function_declaration": "double calculateAverage(int n, int a[], int b[])",
        "code_context": "#include <bits/stdc++.h> \n#define N 1000010\nusing namespace std; \n\nint n, a[N], b[N]; \n\n// function start\n\n// function end\n\nint main() { \n    scanf(\"%d\", &n); \n    for (int i = 0; i < n; ++i) { \n        scanf(\"%d\", &a[i]); \n    } \n    for (int i = 0; i < n; ++i) { \n        scanf(\"%d\", &b[i]); \n    } \n\n    // calling start\n    double ans = calculateAverage(n, a, b);\n    // calling end\n\n    printf(\"%.6f\", ans); \n      \n    return 0; \n}",
        "example": "[{\"input\": \"3\\n10 10 10\\n5 5 5\", \"output\": \"4.000000\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2231,
        "problem_description": "Little A and Little B are playing a number guessing game. The rules are as follows: Little B first thinks of a positive integer n and tells Little A. Then, in his mind, Little B thinks of a positive integer that is not greater than n. Each time, Little A can guess a number. If the guessed number is smaller than the number Little B is thinking of, Little B will answer \"too small\". If the guessed number is greater than the number Little B is thinking of, Little B will answer \"too big\". If the guessed number is exactly the number Little B is thinking of, Little B will answer \"correct\", and the game ends. Now, Little B has already told n to Little A. Little A wants you to tell him the minimum number of guesses he needs to guarantee that, no matter what number Little B is thinking of, he will eventually guess it correctly.",
        "function_declaration": "int calculateLog(int n)",
        "code_context": "#include<bits/stdc++.h>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main(){\n    int t,n;\n    cin>>t;\n    // calling start\n    while(t--){\n        cin>>n;\n        cout<<calculateLog(n)<<endl;\n    }\n    // calling end\n}",
        "example": "[{\"input\": \"2\\n1\\n7\", \"output\": \"1\\n3\"}]",
        "time_limit": 1000,
        "memory_limit": 512
    },
    {
        "id": 2364,
        "problem_description": "The structure is not just a bundle of several related quantities. One important point is that these quantities are stored continuously in memory. For example, in the following code:\n\nstruct A {\n    int a;\n    int b;\n    int c;\n};\n\nA x;\n\nTaking a reference to x or x.a will yield the same address, while the difference between &x.b and &x.a is exactly the number of bytes occupied by the int type. Because of this property, we can also use structures for unified operations when performing binary operations. This is very useful when reading and writing files. \n\nSuppose you now have a class:\n\nstruct Person {\n    char name[8];\n    int age;\n    int height;\n};\n\nYou will read several sets of binary data (little-endian) from cin, and you need to output the user's information on cout, one person per line, in the order of name, age, and height, separated by spaces.",
        "function_declaration": "void printPersonInfo(Person a)",
        "code_context": "#include <iostream>\nusing namespace std;\n\nstruct Person {\n\tchar name[8];\n\tint age;\n\tint height;\n};\n\n// function start\n\n// function end\n\nint main() {\n\tPerson a;\n\t// calling start\n\twhile (cin.read(reinterpret_cast<char *>(&a), sizeof(a))) {\n\t\tprintPersonInfo(a);\n\t}\n\t// calling end\n\treturn 0;\n}",
        "example": "[{\"input\": \"因为二进制无法直接显示，因此这里使用十六进制表示。\\n（提示：在vscode或其他文本编辑器中，通常有十六进制编辑器插件）\\n\\n\\n41 6c 69 63 65 00 00 00 12 00 00 00 b4 00 00 00\\n42 6f 62 00 00 00 00 00 12 00 00 00 aa 00 00 00\\n\", \"output\": \"Alice 18 180\\nBob 18 170\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    },
    {
        "id": 2079,
        "problem_description": "Given an integer x, you need to determine whether the number 42 has appeared in this integer or if it is divisible by 42. If yes, return 1; otherwise, return 0.",
        "function_declaration": "int checkNumber(long long x)",
        "code_context": "#include<iostream>\nusing namespace std;\n\n// function start\n\n// function end\n\nint main()\n{\n\tlong long x;\n\tcin >> x;\n\t// calling start\n\tint flag = checkNumber(x);\n\t// calling end\n\tif (flag)\n\t\tprintf(\"Yes\\n\");\n\telse\n\t\tprintf(\"No\\n\");\n\t\n\treturn 0;\t\t\n}",
        "example": "[{\"input\": \"11424\", \"output\": \"Yes\"}, {\"input\": \"17682\", \"output\": \"Yes\"}, {\"input\": \"16124\", \"output\": \"No\"}, {\"input\": \"42\", \"output\": \"Yes\"}]",
        "time_limit": 1000,
        "memory_limit": 256
    }
]